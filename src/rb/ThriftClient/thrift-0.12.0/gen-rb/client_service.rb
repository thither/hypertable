#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'client_types'

module Hypertable
  module ThriftGen
    module ClientService
      class Client
        include ::Thrift::Client

        def namespace_create(ns)
          send_namespace_create(ns)
          recv_namespace_create()
        end

        def send_namespace_create(ns)
          send_message('namespace_create', Namespace_create_args, :ns => ns)
        end

        def recv_namespace_create()
          result = receive_message(Namespace_create_result)
          raise result.e unless result.e.nil?
          return
        end

        def create_namespace(ns)
          send_create_namespace(ns)
          recv_create_namespace()
        end

        def send_create_namespace(ns)
          send_message('create_namespace', Create_namespace_args, :ns => ns)
        end

        def recv_create_namespace()
          result = receive_message(Create_namespace_result)
          raise result.e unless result.e.nil?
          return
        end

        def table_create(ns, table_name, schema)
          send_table_create(ns, table_name, schema)
          recv_table_create()
        end

        def send_table_create(ns, table_name, schema)
          send_message('table_create', Table_create_args, :ns => ns, :table_name => table_name, :schema => schema)
        end

        def recv_table_create()
          result = receive_message(Table_create_result)
          raise result.e unless result.e.nil?
          return
        end

        def table_alter(ns, table_name, schema)
          send_table_alter(ns, table_name, schema)
          recv_table_alter()
        end

        def send_table_alter(ns, table_name, schema)
          send_message('table_alter', Table_alter_args, :ns => ns, :table_name => table_name, :schema => schema)
        end

        def recv_table_alter()
          result = receive_message(Table_alter_result)
          raise result.e unless result.e.nil?
          return
        end

        def refresh_table(ns, table_name)
          send_refresh_table(ns, table_name)
          recv_refresh_table()
        end

        def send_refresh_table(ns, table_name)
          send_message('refresh_table', Refresh_table_args, :ns => ns, :table_name => table_name)
        end

        def recv_refresh_table()
          result = receive_message(Refresh_table_result)
          raise result.e unless result.e.nil?
          return
        end

        def namespace_open(ns)
          send_namespace_open(ns)
          return recv_namespace_open()
        end

        def send_namespace_open(ns)
          send_message('namespace_open', Namespace_open_args, :ns => ns)
        end

        def recv_namespace_open()
          result = receive_message(Namespace_open_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'namespace_open failed: unknown result')
        end

        def open_namespace(ns)
          send_open_namespace(ns)
          return recv_open_namespace()
        end

        def send_open_namespace(ns)
          send_message('open_namespace', Open_namespace_args, :ns => ns)
        end

        def recv_open_namespace()
          result = receive_message(Open_namespace_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'open_namespace failed: unknown result')
        end

        def namespace_close(ns)
          send_namespace_close(ns)
          recv_namespace_close()
        end

        def send_namespace_close(ns)
          send_message('namespace_close', Namespace_close_args, :ns => ns)
        end

        def recv_namespace_close()
          result = receive_message(Namespace_close_result)
          raise result.e unless result.e.nil?
          return
        end

        def close_namespace(ns)
          send_close_namespace(ns)
          recv_close_namespace()
        end

        def send_close_namespace(ns)
          send_message('close_namespace', Close_namespace_args, :ns => ns)
        end

        def recv_close_namespace()
          result = receive_message(Close_namespace_result)
          raise result.e unless result.e.nil?
          return
        end

        def future_open(capacity)
          send_future_open(capacity)
          return recv_future_open()
        end

        def send_future_open(capacity)
          send_message('future_open', Future_open_args, :capacity => capacity)
        end

        def recv_future_open()
          result = receive_message(Future_open_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'future_open failed: unknown result')
        end

        def open_future(capacity)
          send_open_future(capacity)
          return recv_open_future()
        end

        def send_open_future(capacity)
          send_message('open_future', Open_future_args, :capacity => capacity)
        end

        def recv_open_future()
          result = receive_message(Open_future_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'open_future failed: unknown result')
        end

        def future_cancel(ff)
          send_future_cancel(ff)
          recv_future_cancel()
        end

        def send_future_cancel(ff)
          send_message('future_cancel', Future_cancel_args, :ff => ff)
        end

        def recv_future_cancel()
          result = receive_message(Future_cancel_result)
          raise result.e unless result.e.nil?
          return
        end

        def cancel_future(ff)
          send_cancel_future(ff)
          recv_cancel_future()
        end

        def send_cancel_future(ff)
          send_message('cancel_future', Cancel_future_args, :ff => ff)
        end

        def recv_cancel_future()
          result = receive_message(Cancel_future_result)
          raise result.e unless result.e.nil?
          return
        end

        def future_get_result(ff, timeout_millis)
          send_future_get_result(ff, timeout_millis)
          return recv_future_get_result()
        end

        def send_future_get_result(ff, timeout_millis)
          send_message('future_get_result', Future_get_result_args, :ff => ff, :timeout_millis => timeout_millis)
        end

        def recv_future_get_result()
          result = receive_message(Future_get_result_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'future_get_result failed: unknown result')
        end

        def get_future_result(ff, timeout_millis)
          send_get_future_result(ff, timeout_millis)
          return recv_get_future_result()
        end

        def send_get_future_result(ff, timeout_millis)
          send_message('get_future_result', Get_future_result_args, :ff => ff, :timeout_millis => timeout_millis)
        end

        def recv_get_future_result()
          result = receive_message(Get_future_result_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_future_result failed: unknown result')
        end

        def future_get_result_as_arrays(ff, timeout_millis)
          send_future_get_result_as_arrays(ff, timeout_millis)
          return recv_future_get_result_as_arrays()
        end

        def send_future_get_result_as_arrays(ff, timeout_millis)
          send_message('future_get_result_as_arrays', Future_get_result_as_arrays_args, :ff => ff, :timeout_millis => timeout_millis)
        end

        def recv_future_get_result_as_arrays()
          result = receive_message(Future_get_result_as_arrays_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'future_get_result_as_arrays failed: unknown result')
        end

        def get_future_result_as_arrays(ff, timeout_millis)
          send_get_future_result_as_arrays(ff, timeout_millis)
          return recv_get_future_result_as_arrays()
        end

        def send_get_future_result_as_arrays(ff, timeout_millis)
          send_message('get_future_result_as_arrays', Get_future_result_as_arrays_args, :ff => ff, :timeout_millis => timeout_millis)
        end

        def recv_get_future_result_as_arrays()
          result = receive_message(Get_future_result_as_arrays_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_future_result_as_arrays failed: unknown result')
        end

        def future_get_result_serialized(ff, timeout_millis)
          send_future_get_result_serialized(ff, timeout_millis)
          return recv_future_get_result_serialized()
        end

        def send_future_get_result_serialized(ff, timeout_millis)
          send_message('future_get_result_serialized', Future_get_result_serialized_args, :ff => ff, :timeout_millis => timeout_millis)
        end

        def recv_future_get_result_serialized()
          result = receive_message(Future_get_result_serialized_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'future_get_result_serialized failed: unknown result')
        end

        def get_future_result_serialized(ff, timeout_millis)
          send_get_future_result_serialized(ff, timeout_millis)
          return recv_get_future_result_serialized()
        end

        def send_get_future_result_serialized(ff, timeout_millis)
          send_message('get_future_result_serialized', Get_future_result_serialized_args, :ff => ff, :timeout_millis => timeout_millis)
        end

        def recv_get_future_result_serialized()
          result = receive_message(Get_future_result_serialized_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_future_result_serialized failed: unknown result')
        end

        def future_is_empty(ff)
          send_future_is_empty(ff)
          return recv_future_is_empty()
        end

        def send_future_is_empty(ff)
          send_message('future_is_empty', Future_is_empty_args, :ff => ff)
        end

        def recv_future_is_empty()
          result = receive_message(Future_is_empty_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'future_is_empty failed: unknown result')
        end

        def future_is_full(ff)
          send_future_is_full(ff)
          return recv_future_is_full()
        end

        def send_future_is_full(ff)
          send_message('future_is_full', Future_is_full_args, :ff => ff)
        end

        def recv_future_is_full()
          result = receive_message(Future_is_full_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'future_is_full failed: unknown result')
        end

        def future_is_cancelled(ff)
          send_future_is_cancelled(ff)
          return recv_future_is_cancelled()
        end

        def send_future_is_cancelled(ff)
          send_message('future_is_cancelled', Future_is_cancelled_args, :ff => ff)
        end

        def recv_future_is_cancelled()
          result = receive_message(Future_is_cancelled_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'future_is_cancelled failed: unknown result')
        end

        def future_has_outstanding(ff)
          send_future_has_outstanding(ff)
          return recv_future_has_outstanding()
        end

        def send_future_has_outstanding(ff)
          send_message('future_has_outstanding', Future_has_outstanding_args, :ff => ff)
        end

        def recv_future_has_outstanding()
          result = receive_message(Future_has_outstanding_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'future_has_outstanding failed: unknown result')
        end

        def future_close(ff)
          send_future_close(ff)
          recv_future_close()
        end

        def send_future_close(ff)
          send_message('future_close', Future_close_args, :ff => ff)
        end

        def recv_future_close()
          result = receive_message(Future_close_result)
          raise result.e unless result.e.nil?
          return
        end

        def close_future(ff)
          send_close_future(ff)
          recv_close_future()
        end

        def send_close_future(ff)
          send_message('close_future', Close_future_args, :ff => ff)
        end

        def recv_close_future()
          result = receive_message(Close_future_result)
          raise result.e unless result.e.nil?
          return
        end

        def scanner_open(ns, table_name, scan_spec)
          send_scanner_open(ns, table_name, scan_spec)
          return recv_scanner_open()
        end

        def send_scanner_open(ns, table_name, scan_spec)
          send_message('scanner_open', Scanner_open_args, :ns => ns, :table_name => table_name, :scan_spec => scan_spec)
        end

        def recv_scanner_open()
          result = receive_message(Scanner_open_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'scanner_open failed: unknown result')
        end

        def open_scanner(ns, table_name, scan_spec)
          send_open_scanner(ns, table_name, scan_spec)
          return recv_open_scanner()
        end

        def send_open_scanner(ns, table_name, scan_spec)
          send_message('open_scanner', Open_scanner_args, :ns => ns, :table_name => table_name, :scan_spec => scan_spec)
        end

        def recv_open_scanner()
          result = receive_message(Open_scanner_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'open_scanner failed: unknown result')
        end

        def async_scanner_open(ns, table_name, future, scan_spec)
          send_async_scanner_open(ns, table_name, future, scan_spec)
          return recv_async_scanner_open()
        end

        def send_async_scanner_open(ns, table_name, future, scan_spec)
          send_message('async_scanner_open', Async_scanner_open_args, :ns => ns, :table_name => table_name, :future => future, :scan_spec => scan_spec)
        end

        def recv_async_scanner_open()
          result = receive_message(Async_scanner_open_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'async_scanner_open failed: unknown result')
        end

        def open_scanner_async(ns, table_name, future, scan_spec)
          send_open_scanner_async(ns, table_name, future, scan_spec)
          return recv_open_scanner_async()
        end

        def send_open_scanner_async(ns, table_name, future, scan_spec)
          send_message('open_scanner_async', Open_scanner_async_args, :ns => ns, :table_name => table_name, :future => future, :scan_spec => scan_spec)
        end

        def recv_open_scanner_async()
          result = receive_message(Open_scanner_async_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'open_scanner_async failed: unknown result')
        end

        def scanner_close(scanner)
          send_scanner_close(scanner)
          recv_scanner_close()
        end

        def send_scanner_close(scanner)
          send_message('scanner_close', Scanner_close_args, :scanner => scanner)
        end

        def recv_scanner_close()
          result = receive_message(Scanner_close_result)
          raise result.e unless result.e.nil?
          return
        end

        def close_scanner(scanner)
          send_close_scanner(scanner)
          recv_close_scanner()
        end

        def send_close_scanner(scanner)
          send_message('close_scanner', Close_scanner_args, :scanner => scanner)
        end

        def recv_close_scanner()
          result = receive_message(Close_scanner_result)
          raise result.e unless result.e.nil?
          return
        end

        def async_scanner_cancel(scanner)
          send_async_scanner_cancel(scanner)
          recv_async_scanner_cancel()
        end

        def send_async_scanner_cancel(scanner)
          send_message('async_scanner_cancel', Async_scanner_cancel_args, :scanner => scanner)
        end

        def recv_async_scanner_cancel()
          result = receive_message(Async_scanner_cancel_result)
          raise result.e unless result.e.nil?
          return
        end

        def cancel_scanner_async(scanner)
          send_cancel_scanner_async(scanner)
          recv_cancel_scanner_async()
        end

        def send_cancel_scanner_async(scanner)
          send_message('cancel_scanner_async', Cancel_scanner_async_args, :scanner => scanner)
        end

        def recv_cancel_scanner_async()
          result = receive_message(Cancel_scanner_async_result)
          raise result.e unless result.e.nil?
          return
        end

        def async_scanner_close(scanner)
          send_async_scanner_close(scanner)
          recv_async_scanner_close()
        end

        def send_async_scanner_close(scanner)
          send_message('async_scanner_close', Async_scanner_close_args, :scanner => scanner)
        end

        def recv_async_scanner_close()
          result = receive_message(Async_scanner_close_result)
          raise result.e unless result.e.nil?
          return
        end

        def close_scanner_async(scanner)
          send_close_scanner_async(scanner)
          recv_close_scanner_async()
        end

        def send_close_scanner_async(scanner)
          send_message('close_scanner_async', Close_scanner_async_args, :scanner => scanner)
        end

        def recv_close_scanner_async()
          result = receive_message(Close_scanner_async_result)
          raise result.e unless result.e.nil?
          return
        end

        def scanner_get_cells(scanner)
          send_scanner_get_cells(scanner)
          return recv_scanner_get_cells()
        end

        def send_scanner_get_cells(scanner)
          send_message('scanner_get_cells', Scanner_get_cells_args, :scanner => scanner)
        end

        def recv_scanner_get_cells()
          result = receive_message(Scanner_get_cells_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'scanner_get_cells failed: unknown result')
        end

        def next_cells(scanner)
          send_next_cells(scanner)
          return recv_next_cells()
        end

        def send_next_cells(scanner)
          send_message('next_cells', Next_cells_args, :scanner => scanner)
        end

        def recv_next_cells()
          result = receive_message(Next_cells_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'next_cells failed: unknown result')
        end

        def scanner_get_cells_as_arrays(scanner)
          send_scanner_get_cells_as_arrays(scanner)
          return recv_scanner_get_cells_as_arrays()
        end

        def send_scanner_get_cells_as_arrays(scanner)
          send_message('scanner_get_cells_as_arrays', Scanner_get_cells_as_arrays_args, :scanner => scanner)
        end

        def recv_scanner_get_cells_as_arrays()
          result = receive_message(Scanner_get_cells_as_arrays_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'scanner_get_cells_as_arrays failed: unknown result')
        end

        def next_cells_as_arrays(scanner)
          send_next_cells_as_arrays(scanner)
          return recv_next_cells_as_arrays()
        end

        def send_next_cells_as_arrays(scanner)
          send_message('next_cells_as_arrays', Next_cells_as_arrays_args, :scanner => scanner)
        end

        def recv_next_cells_as_arrays()
          result = receive_message(Next_cells_as_arrays_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'next_cells_as_arrays failed: unknown result')
        end

        def scanner_get_cells_serialized(scanner)
          send_scanner_get_cells_serialized(scanner)
          return recv_scanner_get_cells_serialized()
        end

        def send_scanner_get_cells_serialized(scanner)
          send_message('scanner_get_cells_serialized', Scanner_get_cells_serialized_args, :scanner => scanner)
        end

        def recv_scanner_get_cells_serialized()
          result = receive_message(Scanner_get_cells_serialized_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'scanner_get_cells_serialized failed: unknown result')
        end

        def next_cells_serialized(scanner)
          send_next_cells_serialized(scanner)
          return recv_next_cells_serialized()
        end

        def send_next_cells_serialized(scanner)
          send_message('next_cells_serialized', Next_cells_serialized_args, :scanner => scanner)
        end

        def recv_next_cells_serialized()
          result = receive_message(Next_cells_serialized_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'next_cells_serialized failed: unknown result')
        end

        def scanner_get_row(scanner)
          send_scanner_get_row(scanner)
          return recv_scanner_get_row()
        end

        def send_scanner_get_row(scanner)
          send_message('scanner_get_row', Scanner_get_row_args, :scanner => scanner)
        end

        def recv_scanner_get_row()
          result = receive_message(Scanner_get_row_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'scanner_get_row failed: unknown result')
        end

        def next_row(scanner)
          send_next_row(scanner)
          return recv_next_row()
        end

        def send_next_row(scanner)
          send_message('next_row', Next_row_args, :scanner => scanner)
        end

        def recv_next_row()
          result = receive_message(Next_row_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'next_row failed: unknown result')
        end

        def scanner_get_row_as_arrays(scanner)
          send_scanner_get_row_as_arrays(scanner)
          return recv_scanner_get_row_as_arrays()
        end

        def send_scanner_get_row_as_arrays(scanner)
          send_message('scanner_get_row_as_arrays', Scanner_get_row_as_arrays_args, :scanner => scanner)
        end

        def recv_scanner_get_row_as_arrays()
          result = receive_message(Scanner_get_row_as_arrays_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'scanner_get_row_as_arrays failed: unknown result')
        end

        def next_row_as_arrays(scanner)
          send_next_row_as_arrays(scanner)
          return recv_next_row_as_arrays()
        end

        def send_next_row_as_arrays(scanner)
          send_message('next_row_as_arrays', Next_row_as_arrays_args, :scanner => scanner)
        end

        def recv_next_row_as_arrays()
          result = receive_message(Next_row_as_arrays_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'next_row_as_arrays failed: unknown result')
        end

        def scanner_get_row_serialized(scanner)
          send_scanner_get_row_serialized(scanner)
          return recv_scanner_get_row_serialized()
        end

        def send_scanner_get_row_serialized(scanner)
          send_message('scanner_get_row_serialized', Scanner_get_row_serialized_args, :scanner => scanner)
        end

        def recv_scanner_get_row_serialized()
          result = receive_message(Scanner_get_row_serialized_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'scanner_get_row_serialized failed: unknown result')
        end

        def next_row_serialized(scanner)
          send_next_row_serialized(scanner)
          return recv_next_row_serialized()
        end

        def send_next_row_serialized(scanner)
          send_message('next_row_serialized', Next_row_serialized_args, :scanner => scanner)
        end

        def recv_next_row_serialized()
          result = receive_message(Next_row_serialized_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'next_row_serialized failed: unknown result')
        end

        def get_row(ns, table_name, row)
          send_get_row(ns, table_name, row)
          return recv_get_row()
        end

        def send_get_row(ns, table_name, row)
          send_message('get_row', Get_row_args, :ns => ns, :table_name => table_name, :row => row)
        end

        def recv_get_row()
          result = receive_message(Get_row_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_row failed: unknown result')
        end

        def get_row_as_arrays(ns, name, row)
          send_get_row_as_arrays(ns, name, row)
          return recv_get_row_as_arrays()
        end

        def send_get_row_as_arrays(ns, name, row)
          send_message('get_row_as_arrays', Get_row_as_arrays_args, :ns => ns, :name => name, :row => row)
        end

        def recv_get_row_as_arrays()
          result = receive_message(Get_row_as_arrays_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_row_as_arrays failed: unknown result')
        end

        def get_row_serialized(ns, table_name, row)
          send_get_row_serialized(ns, table_name, row)
          return recv_get_row_serialized()
        end

        def send_get_row_serialized(ns, table_name, row)
          send_message('get_row_serialized', Get_row_serialized_args, :ns => ns, :table_name => table_name, :row => row)
        end

        def recv_get_row_serialized()
          result = receive_message(Get_row_serialized_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_row_serialized failed: unknown result')
        end

        def get_cell(ns, table_name, row, column)
          send_get_cell(ns, table_name, row, column)
          return recv_get_cell()
        end

        def send_get_cell(ns, table_name, row, column)
          send_message('get_cell', Get_cell_args, :ns => ns, :table_name => table_name, :row => row, :column => column)
        end

        def recv_get_cell()
          result = receive_message(Get_cell_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_cell failed: unknown result')
        end

        def get_cells(ns, table_name, scan_spec)
          send_get_cells(ns, table_name, scan_spec)
          return recv_get_cells()
        end

        def send_get_cells(ns, table_name, scan_spec)
          send_message('get_cells', Get_cells_args, :ns => ns, :table_name => table_name, :scan_spec => scan_spec)
        end

        def recv_get_cells()
          result = receive_message(Get_cells_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_cells failed: unknown result')
        end

        def get_cells_as_arrays(ns, name, scan_spec)
          send_get_cells_as_arrays(ns, name, scan_spec)
          return recv_get_cells_as_arrays()
        end

        def send_get_cells_as_arrays(ns, name, scan_spec)
          send_message('get_cells_as_arrays', Get_cells_as_arrays_args, :ns => ns, :name => name, :scan_spec => scan_spec)
        end

        def recv_get_cells_as_arrays()
          result = receive_message(Get_cells_as_arrays_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_cells_as_arrays failed: unknown result')
        end

        def get_cells_serialized(ns, name, scan_spec)
          send_get_cells_serialized(ns, name, scan_spec)
          return recv_get_cells_serialized()
        end

        def send_get_cells_serialized(ns, name, scan_spec)
          send_message('get_cells_serialized', Get_cells_serialized_args, :ns => ns, :name => name, :scan_spec => scan_spec)
        end

        def recv_get_cells_serialized()
          result = receive_message(Get_cells_serialized_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_cells_serialized failed: unknown result')
        end

        def shared_mutator_refresh(ns, table_name, mutate_spec)
          send_shared_mutator_refresh(ns, table_name, mutate_spec)
          recv_shared_mutator_refresh()
        end

        def send_shared_mutator_refresh(ns, table_name, mutate_spec)
          send_message('shared_mutator_refresh', Shared_mutator_refresh_args, :ns => ns, :table_name => table_name, :mutate_spec => mutate_spec)
        end

        def recv_shared_mutator_refresh()
          result = receive_message(Shared_mutator_refresh_result)
          raise result.e unless result.e.nil?
          return
        end

        def refresh_shared_mutator(ns, table_name, mutate_spec)
          send_refresh_shared_mutator(ns, table_name, mutate_spec)
          recv_refresh_shared_mutator()
        end

        def send_refresh_shared_mutator(ns, table_name, mutate_spec)
          send_message('refresh_shared_mutator', Refresh_shared_mutator_args, :ns => ns, :table_name => table_name, :mutate_spec => mutate_spec)
        end

        def recv_refresh_shared_mutator()
          result = receive_message(Refresh_shared_mutator_result)
          raise result.e unless result.e.nil?
          return
        end

        def shared_mutator_set_cells(ns, table_name, mutate_spec, cells)
          send_shared_mutator_set_cells(ns, table_name, mutate_spec, cells)
          recv_shared_mutator_set_cells()
        end

        def send_shared_mutator_set_cells(ns, table_name, mutate_spec, cells)
          send_message('shared_mutator_set_cells', Shared_mutator_set_cells_args, :ns => ns, :table_name => table_name, :mutate_spec => mutate_spec, :cells => cells)
        end

        def recv_shared_mutator_set_cells()
          result = receive_message(Shared_mutator_set_cells_result)
          raise result.e unless result.e.nil?
          return
        end

        def offer_cells(ns, table_name, mutate_spec, cells)
          send_offer_cells(ns, table_name, mutate_spec, cells)
          recv_offer_cells()
        end

        def send_offer_cells(ns, table_name, mutate_spec, cells)
          send_message('offer_cells', Offer_cells_args, :ns => ns, :table_name => table_name, :mutate_spec => mutate_spec, :cells => cells)
        end

        def recv_offer_cells()
          result = receive_message(Offer_cells_result)
          raise result.e unless result.e.nil?
          return
        end

        def shared_mutator_set_cells_as_arrays(ns, table_name, mutate_spec, cells)
          send_shared_mutator_set_cells_as_arrays(ns, table_name, mutate_spec, cells)
          recv_shared_mutator_set_cells_as_arrays()
        end

        def send_shared_mutator_set_cells_as_arrays(ns, table_name, mutate_spec, cells)
          send_message('shared_mutator_set_cells_as_arrays', Shared_mutator_set_cells_as_arrays_args, :ns => ns, :table_name => table_name, :mutate_spec => mutate_spec, :cells => cells)
        end

        def recv_shared_mutator_set_cells_as_arrays()
          result = receive_message(Shared_mutator_set_cells_as_arrays_result)
          raise result.e unless result.e.nil?
          return
        end

        def offer_cells_as_arrays(ns, table_name, mutate_spec, cells)
          send_offer_cells_as_arrays(ns, table_name, mutate_spec, cells)
          recv_offer_cells_as_arrays()
        end

        def send_offer_cells_as_arrays(ns, table_name, mutate_spec, cells)
          send_message('offer_cells_as_arrays', Offer_cells_as_arrays_args, :ns => ns, :table_name => table_name, :mutate_spec => mutate_spec, :cells => cells)
        end

        def recv_offer_cells_as_arrays()
          result = receive_message(Offer_cells_as_arrays_result)
          raise result.e unless result.e.nil?
          return
        end

        def shared_mutator_set_cell(ns, table_name, mutate_spec, cell)
          send_shared_mutator_set_cell(ns, table_name, mutate_spec, cell)
          recv_shared_mutator_set_cell()
        end

        def send_shared_mutator_set_cell(ns, table_name, mutate_spec, cell)
          send_message('shared_mutator_set_cell', Shared_mutator_set_cell_args, :ns => ns, :table_name => table_name, :mutate_spec => mutate_spec, :cell => cell)
        end

        def recv_shared_mutator_set_cell()
          result = receive_message(Shared_mutator_set_cell_result)
          raise result.e unless result.e.nil?
          return
        end

        def offer_cell(ns, table_name, mutate_spec, cell)
          send_offer_cell(ns, table_name, mutate_spec, cell)
          recv_offer_cell()
        end

        def send_offer_cell(ns, table_name, mutate_spec, cell)
          send_message('offer_cell', Offer_cell_args, :ns => ns, :table_name => table_name, :mutate_spec => mutate_spec, :cell => cell)
        end

        def recv_offer_cell()
          result = receive_message(Offer_cell_result)
          raise result.e unless result.e.nil?
          return
        end

        def shared_mutator_set_cell_as_array(ns, table_name, mutate_spec, cell)
          send_shared_mutator_set_cell_as_array(ns, table_name, mutate_spec, cell)
          recv_shared_mutator_set_cell_as_array()
        end

        def send_shared_mutator_set_cell_as_array(ns, table_name, mutate_spec, cell)
          send_message('shared_mutator_set_cell_as_array', Shared_mutator_set_cell_as_array_args, :ns => ns, :table_name => table_name, :mutate_spec => mutate_spec, :cell => cell)
        end

        def recv_shared_mutator_set_cell_as_array()
          result = receive_message(Shared_mutator_set_cell_as_array_result)
          raise result.e unless result.e.nil?
          return
        end

        def offer_cell_as_array(ns, table_name, mutate_spec, cell)
          send_offer_cell_as_array(ns, table_name, mutate_spec, cell)
          recv_offer_cell_as_array()
        end

        def send_offer_cell_as_array(ns, table_name, mutate_spec, cell)
          send_message('offer_cell_as_array', Offer_cell_as_array_args, :ns => ns, :table_name => table_name, :mutate_spec => mutate_spec, :cell => cell)
        end

        def recv_offer_cell_as_array()
          result = receive_message(Offer_cell_as_array_result)
          raise result.e unless result.e.nil?
          return
        end

        def mutator_open(ns, table_name, flags, flush_interval)
          send_mutator_open(ns, table_name, flags, flush_interval)
          return recv_mutator_open()
        end

        def send_mutator_open(ns, table_name, flags, flush_interval)
          send_message('mutator_open', Mutator_open_args, :ns => ns, :table_name => table_name, :flags => flags, :flush_interval => flush_interval)
        end

        def recv_mutator_open()
          result = receive_message(Mutator_open_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'mutator_open failed: unknown result')
        end

        def open_mutator(ns, table_name, flags, flush_interval)
          send_open_mutator(ns, table_name, flags, flush_interval)
          return recv_open_mutator()
        end

        def send_open_mutator(ns, table_name, flags, flush_interval)
          send_message('open_mutator', Open_mutator_args, :ns => ns, :table_name => table_name, :flags => flags, :flush_interval => flush_interval)
        end

        def recv_open_mutator()
          result = receive_message(Open_mutator_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'open_mutator failed: unknown result')
        end

        def async_mutator_open(ns, table_name, future, flags)
          send_async_mutator_open(ns, table_name, future, flags)
          return recv_async_mutator_open()
        end

        def send_async_mutator_open(ns, table_name, future, flags)
          send_message('async_mutator_open', Async_mutator_open_args, :ns => ns, :table_name => table_name, :future => future, :flags => flags)
        end

        def recv_async_mutator_open()
          result = receive_message(Async_mutator_open_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'async_mutator_open failed: unknown result')
        end

        def open_mutator_async(ns, table_name, future, flags)
          send_open_mutator_async(ns, table_name, future, flags)
          return recv_open_mutator_async()
        end

        def send_open_mutator_async(ns, table_name, future, flags)
          send_message('open_mutator_async', Open_mutator_async_args, :ns => ns, :table_name => table_name, :future => future, :flags => flags)
        end

        def recv_open_mutator_async()
          result = receive_message(Open_mutator_async_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'open_mutator_async failed: unknown result')
        end

        def mutator_close(mutator)
          send_mutator_close(mutator)
          recv_mutator_close()
        end

        def send_mutator_close(mutator)
          send_message('mutator_close', Mutator_close_args, :mutator => mutator)
        end

        def recv_mutator_close()
          result = receive_message(Mutator_close_result)
          raise result.e unless result.e.nil?
          return
        end

        def close_mutator(mutator)
          send_close_mutator(mutator)
          recv_close_mutator()
        end

        def send_close_mutator(mutator)
          send_message('close_mutator', Close_mutator_args, :mutator => mutator)
        end

        def recv_close_mutator()
          result = receive_message(Close_mutator_result)
          raise result.e unless result.e.nil?
          return
        end

        def async_mutator_cancel(mutator)
          send_async_mutator_cancel(mutator)
          recv_async_mutator_cancel()
        end

        def send_async_mutator_cancel(mutator)
          send_message('async_mutator_cancel', Async_mutator_cancel_args, :mutator => mutator)
        end

        def recv_async_mutator_cancel()
          result = receive_message(Async_mutator_cancel_result)
          raise result.e unless result.e.nil?
          return
        end

        def cancel_mutator_async(mutator)
          send_cancel_mutator_async(mutator)
          recv_cancel_mutator_async()
        end

        def send_cancel_mutator_async(mutator)
          send_message('cancel_mutator_async', Cancel_mutator_async_args, :mutator => mutator)
        end

        def recv_cancel_mutator_async()
          result = receive_message(Cancel_mutator_async_result)
          raise result.e unless result.e.nil?
          return
        end

        def async_mutator_close(mutator)
          send_async_mutator_close(mutator)
          recv_async_mutator_close()
        end

        def send_async_mutator_close(mutator)
          send_message('async_mutator_close', Async_mutator_close_args, :mutator => mutator)
        end

        def recv_async_mutator_close()
          result = receive_message(Async_mutator_close_result)
          raise result.e unless result.e.nil?
          return
        end

        def close_mutator_async(mutator)
          send_close_mutator_async(mutator)
          recv_close_mutator_async()
        end

        def send_close_mutator_async(mutator)
          send_message('close_mutator_async', Close_mutator_async_args, :mutator => mutator)
        end

        def recv_close_mutator_async()
          result = receive_message(Close_mutator_async_result)
          raise result.e unless result.e.nil?
          return
        end

        def mutator_set_cell(mutator, cell)
          send_mutator_set_cell(mutator, cell)
          recv_mutator_set_cell()
        end

        def send_mutator_set_cell(mutator, cell)
          send_message('mutator_set_cell', Mutator_set_cell_args, :mutator => mutator, :cell => cell)
        end

        def recv_mutator_set_cell()
          result = receive_message(Mutator_set_cell_result)
          raise result.e unless result.e.nil?
          return
        end

        def set_cell(ns, table_name, cell)
          send_set_cell(ns, table_name, cell)
          recv_set_cell()
        end

        def send_set_cell(ns, table_name, cell)
          send_message('set_cell', Set_cell_args, :ns => ns, :table_name => table_name, :cell => cell)
        end

        def recv_set_cell()
          result = receive_message(Set_cell_result)
          raise result.e unless result.e.nil?
          return
        end

        def mutator_set_cell_as_array(mutator, cell)
          send_mutator_set_cell_as_array(mutator, cell)
          recv_mutator_set_cell_as_array()
        end

        def send_mutator_set_cell_as_array(mutator, cell)
          send_message('mutator_set_cell_as_array', Mutator_set_cell_as_array_args, :mutator => mutator, :cell => cell)
        end

        def recv_mutator_set_cell_as_array()
          result = receive_message(Mutator_set_cell_as_array_result)
          raise result.e unless result.e.nil?
          return
        end

        def set_cell_as_array(ns, table_name, cell)
          send_set_cell_as_array(ns, table_name, cell)
          recv_set_cell_as_array()
        end

        def send_set_cell_as_array(ns, table_name, cell)
          send_message('set_cell_as_array', Set_cell_as_array_args, :ns => ns, :table_name => table_name, :cell => cell)
        end

        def recv_set_cell_as_array()
          result = receive_message(Set_cell_as_array_result)
          raise result.e unless result.e.nil?
          return
        end

        def mutator_set_cells(mutator, cells)
          send_mutator_set_cells(mutator, cells)
          recv_mutator_set_cells()
        end

        def send_mutator_set_cells(mutator, cells)
          send_message('mutator_set_cells', Mutator_set_cells_args, :mutator => mutator, :cells => cells)
        end

        def recv_mutator_set_cells()
          result = receive_message(Mutator_set_cells_result)
          raise result.e unless result.e.nil?
          return
        end

        def set_cells(ns, table_name, cells)
          send_set_cells(ns, table_name, cells)
          recv_set_cells()
        end

        def send_set_cells(ns, table_name, cells)
          send_message('set_cells', Set_cells_args, :ns => ns, :table_name => table_name, :cells => cells)
        end

        def recv_set_cells()
          result = receive_message(Set_cells_result)
          raise result.e unless result.e.nil?
          return
        end

        def mutator_set_cells_as_arrays(mutator, cells)
          send_mutator_set_cells_as_arrays(mutator, cells)
          recv_mutator_set_cells_as_arrays()
        end

        def send_mutator_set_cells_as_arrays(mutator, cells)
          send_message('mutator_set_cells_as_arrays', Mutator_set_cells_as_arrays_args, :mutator => mutator, :cells => cells)
        end

        def recv_mutator_set_cells_as_arrays()
          result = receive_message(Mutator_set_cells_as_arrays_result)
          raise result.e unless result.e.nil?
          return
        end

        def set_cells_as_arrays(ns, table_name, cells)
          send_set_cells_as_arrays(ns, table_name, cells)
          recv_set_cells_as_arrays()
        end

        def send_set_cells_as_arrays(ns, table_name, cells)
          send_message('set_cells_as_arrays', Set_cells_as_arrays_args, :ns => ns, :table_name => table_name, :cells => cells)
        end

        def recv_set_cells_as_arrays()
          result = receive_message(Set_cells_as_arrays_result)
          raise result.e unless result.e.nil?
          return
        end

        def mutator_set_cells_serialized(mutator, cells, flush)
          send_mutator_set_cells_serialized(mutator, cells, flush)
          recv_mutator_set_cells_serialized()
        end

        def send_mutator_set_cells_serialized(mutator, cells, flush)
          send_message('mutator_set_cells_serialized', Mutator_set_cells_serialized_args, :mutator => mutator, :cells => cells, :flush => flush)
        end

        def recv_mutator_set_cells_serialized()
          result = receive_message(Mutator_set_cells_serialized_result)
          raise result.e unless result.e.nil?
          return
        end

        def set_cells_serialized(ns, table_name, cells)
          send_set_cells_serialized(ns, table_name, cells)
          recv_set_cells_serialized()
        end

        def send_set_cells_serialized(ns, table_name, cells)
          send_message('set_cells_serialized', Set_cells_serialized_args, :ns => ns, :table_name => table_name, :cells => cells)
        end

        def recv_set_cells_serialized()
          result = receive_message(Set_cells_serialized_result)
          raise result.e unless result.e.nil?
          return
        end

        def mutator_flush(mutator)
          send_mutator_flush(mutator)
          recv_mutator_flush()
        end

        def send_mutator_flush(mutator)
          send_message('mutator_flush', Mutator_flush_args, :mutator => mutator)
        end

        def recv_mutator_flush()
          result = receive_message(Mutator_flush_result)
          raise result.e unless result.e.nil?
          return
        end

        def flush_mutator(mutator)
          send_flush_mutator(mutator)
          recv_flush_mutator()
        end

        def send_flush_mutator(mutator)
          send_message('flush_mutator', Flush_mutator_args, :mutator => mutator)
        end

        def recv_flush_mutator()
          result = receive_message(Flush_mutator_result)
          raise result.e unless result.e.nil?
          return
        end

        def async_mutator_set_cell(mutator, cell)
          send_async_mutator_set_cell(mutator, cell)
          recv_async_mutator_set_cell()
        end

        def send_async_mutator_set_cell(mutator, cell)
          send_message('async_mutator_set_cell', Async_mutator_set_cell_args, :mutator => mutator, :cell => cell)
        end

        def recv_async_mutator_set_cell()
          result = receive_message(Async_mutator_set_cell_result)
          raise result.e unless result.e.nil?
          return
        end

        def set_cell_async(mutator, cell)
          send_set_cell_async(mutator, cell)
          recv_set_cell_async()
        end

        def send_set_cell_async(mutator, cell)
          send_message('set_cell_async', Set_cell_async_args, :mutator => mutator, :cell => cell)
        end

        def recv_set_cell_async()
          result = receive_message(Set_cell_async_result)
          raise result.e unless result.e.nil?
          return
        end

        def async_mutator_set_cell_as_array(mutator, cell)
          send_async_mutator_set_cell_as_array(mutator, cell)
          recv_async_mutator_set_cell_as_array()
        end

        def send_async_mutator_set_cell_as_array(mutator, cell)
          send_message('async_mutator_set_cell_as_array', Async_mutator_set_cell_as_array_args, :mutator => mutator, :cell => cell)
        end

        def recv_async_mutator_set_cell_as_array()
          result = receive_message(Async_mutator_set_cell_as_array_result)
          raise result.e unless result.e.nil?
          return
        end

        def set_cell_as_array_async(mutator, cell)
          send_set_cell_as_array_async(mutator, cell)
          recv_set_cell_as_array_async()
        end

        def send_set_cell_as_array_async(mutator, cell)
          send_message('set_cell_as_array_async', Set_cell_as_array_async_args, :mutator => mutator, :cell => cell)
        end

        def recv_set_cell_as_array_async()
          result = receive_message(Set_cell_as_array_async_result)
          raise result.e unless result.e.nil?
          return
        end

        def async_mutator_set_cells(mutator, cells)
          send_async_mutator_set_cells(mutator, cells)
          recv_async_mutator_set_cells()
        end

        def send_async_mutator_set_cells(mutator, cells)
          send_message('async_mutator_set_cells', Async_mutator_set_cells_args, :mutator => mutator, :cells => cells)
        end

        def recv_async_mutator_set_cells()
          result = receive_message(Async_mutator_set_cells_result)
          raise result.e unless result.e.nil?
          return
        end

        def set_cells_async(mutator, cells)
          send_set_cells_async(mutator, cells)
          recv_set_cells_async()
        end

        def send_set_cells_async(mutator, cells)
          send_message('set_cells_async', Set_cells_async_args, :mutator => mutator, :cells => cells)
        end

        def recv_set_cells_async()
          result = receive_message(Set_cells_async_result)
          raise result.e unless result.e.nil?
          return
        end

        def async_mutator_set_cells_as_arrays(mutator, cells)
          send_async_mutator_set_cells_as_arrays(mutator, cells)
          recv_async_mutator_set_cells_as_arrays()
        end

        def send_async_mutator_set_cells_as_arrays(mutator, cells)
          send_message('async_mutator_set_cells_as_arrays', Async_mutator_set_cells_as_arrays_args, :mutator => mutator, :cells => cells)
        end

        def recv_async_mutator_set_cells_as_arrays()
          result = receive_message(Async_mutator_set_cells_as_arrays_result)
          raise result.e unless result.e.nil?
          return
        end

        def set_cells_as_arrays_async(mutator, cells)
          send_set_cells_as_arrays_async(mutator, cells)
          recv_set_cells_as_arrays_async()
        end

        def send_set_cells_as_arrays_async(mutator, cells)
          send_message('set_cells_as_arrays_async', Set_cells_as_arrays_async_args, :mutator => mutator, :cells => cells)
        end

        def recv_set_cells_as_arrays_async()
          result = receive_message(Set_cells_as_arrays_async_result)
          raise result.e unless result.e.nil?
          return
        end

        def async_mutator_set_cells_serialized(mutator, cells, flush)
          send_async_mutator_set_cells_serialized(mutator, cells, flush)
          recv_async_mutator_set_cells_serialized()
        end

        def send_async_mutator_set_cells_serialized(mutator, cells, flush)
          send_message('async_mutator_set_cells_serialized', Async_mutator_set_cells_serialized_args, :mutator => mutator, :cells => cells, :flush => flush)
        end

        def recv_async_mutator_set_cells_serialized()
          result = receive_message(Async_mutator_set_cells_serialized_result)
          raise result.e unless result.e.nil?
          return
        end

        def set_cells_serialized_async(mutator, cells, flush)
          send_set_cells_serialized_async(mutator, cells, flush)
          recv_set_cells_serialized_async()
        end

        def send_set_cells_serialized_async(mutator, cells, flush)
          send_message('set_cells_serialized_async', Set_cells_serialized_async_args, :mutator => mutator, :cells => cells, :flush => flush)
        end

        def recv_set_cells_serialized_async()
          result = receive_message(Set_cells_serialized_async_result)
          raise result.e unless result.e.nil?
          return
        end

        def async_mutator_flush(mutator)
          send_async_mutator_flush(mutator)
          recv_async_mutator_flush()
        end

        def send_async_mutator_flush(mutator)
          send_message('async_mutator_flush', Async_mutator_flush_args, :mutator => mutator)
        end

        def recv_async_mutator_flush()
          result = receive_message(Async_mutator_flush_result)
          raise result.e unless result.e.nil?
          return
        end

        def flush_mutator_async(mutator)
          send_flush_mutator_async(mutator)
          recv_flush_mutator_async()
        end

        def send_flush_mutator_async(mutator)
          send_message('flush_mutator_async', Flush_mutator_async_args, :mutator => mutator)
        end

        def recv_flush_mutator_async()
          result = receive_message(Flush_mutator_async_result)
          raise result.e unless result.e.nil?
          return
        end

        def namespace_exists(ns)
          send_namespace_exists(ns)
          return recv_namespace_exists()
        end

        def send_namespace_exists(ns)
          send_message('namespace_exists', Namespace_exists_args, :ns => ns)
        end

        def recv_namespace_exists()
          result = receive_message(Namespace_exists_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'namespace_exists failed: unknown result')
        end

        def exists_namespace(ns)
          send_exists_namespace(ns)
          return recv_exists_namespace()
        end

        def send_exists_namespace(ns)
          send_message('exists_namespace', Exists_namespace_args, :ns => ns)
        end

        def recv_exists_namespace()
          result = receive_message(Exists_namespace_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'exists_namespace failed: unknown result')
        end

        def exists_table(ns, name)
          send_exists_table(ns, name)
          return recv_exists_table()
        end

        def send_exists_table(ns, name)
          send_message('exists_table', Exists_table_args, :ns => ns, :name => name)
        end

        def recv_exists_table()
          result = receive_message(Exists_table_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'exists_table failed: unknown result')
        end

        def table_exists(ns, name)
          send_table_exists(ns, name)
          return recv_table_exists()
        end

        def send_table_exists(ns, name)
          send_message('table_exists', Table_exists_args, :ns => ns, :name => name)
        end

        def recv_table_exists()
          result = receive_message(Table_exists_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'table_exists failed: unknown result')
        end

        def table_get_id(ns, table_name)
          send_table_get_id(ns, table_name)
          return recv_table_get_id()
        end

        def send_table_get_id(ns, table_name)
          send_message('table_get_id', Table_get_id_args, :ns => ns, :table_name => table_name)
        end

        def recv_table_get_id()
          result = receive_message(Table_get_id_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'table_get_id failed: unknown result')
        end

        def get_table_id(ns, table_name)
          send_get_table_id(ns, table_name)
          return recv_get_table_id()
        end

        def send_get_table_id(ns, table_name)
          send_message('get_table_id', Get_table_id_args, :ns => ns, :table_name => table_name)
        end

        def recv_get_table_id()
          result = receive_message(Get_table_id_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_table_id failed: unknown result')
        end

        def table_get_schema_str(ns, table_name)
          send_table_get_schema_str(ns, table_name)
          return recv_table_get_schema_str()
        end

        def send_table_get_schema_str(ns, table_name)
          send_message('table_get_schema_str', Table_get_schema_str_args, :ns => ns, :table_name => table_name)
        end

        def recv_table_get_schema_str()
          result = receive_message(Table_get_schema_str_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'table_get_schema_str failed: unknown result')
        end

        def get_schema_str(ns, table_name)
          send_get_schema_str(ns, table_name)
          return recv_get_schema_str()
        end

        def send_get_schema_str(ns, table_name)
          send_message('get_schema_str', Get_schema_str_args, :ns => ns, :table_name => table_name)
        end

        def recv_get_schema_str()
          result = receive_message(Get_schema_str_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_schema_str failed: unknown result')
        end

        def table_get_schema_str_with_ids(ns, table_name)
          send_table_get_schema_str_with_ids(ns, table_name)
          return recv_table_get_schema_str_with_ids()
        end

        def send_table_get_schema_str_with_ids(ns, table_name)
          send_message('table_get_schema_str_with_ids', Table_get_schema_str_with_ids_args, :ns => ns, :table_name => table_name)
        end

        def recv_table_get_schema_str_with_ids()
          result = receive_message(Table_get_schema_str_with_ids_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'table_get_schema_str_with_ids failed: unknown result')
        end

        def get_schema_str_with_ids(ns, table_name)
          send_get_schema_str_with_ids(ns, table_name)
          return recv_get_schema_str_with_ids()
        end

        def send_get_schema_str_with_ids(ns, table_name)
          send_message('get_schema_str_with_ids', Get_schema_str_with_ids_args, :ns => ns, :table_name => table_name)
        end

        def recv_get_schema_str_with_ids()
          result = receive_message(Get_schema_str_with_ids_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_schema_str_with_ids failed: unknown result')
        end

        def table_get_schema(ns, table_name)
          send_table_get_schema(ns, table_name)
          return recv_table_get_schema()
        end

        def send_table_get_schema(ns, table_name)
          send_message('table_get_schema', Table_get_schema_args, :ns => ns, :table_name => table_name)
        end

        def recv_table_get_schema()
          result = receive_message(Table_get_schema_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'table_get_schema failed: unknown result')
        end

        def get_schema(ns, table_name)
          send_get_schema(ns, table_name)
          return recv_get_schema()
        end

        def send_get_schema(ns, table_name)
          send_message('get_schema', Get_schema_args, :ns => ns, :table_name => table_name)
        end

        def recv_get_schema()
          result = receive_message(Get_schema_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_schema failed: unknown result')
        end

        def get_tables(ns)
          send_get_tables(ns)
          return recv_get_tables()
        end

        def send_get_tables(ns)
          send_message('get_tables', Get_tables_args, :ns => ns)
        end

        def recv_get_tables()
          result = receive_message(Get_tables_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_tables failed: unknown result')
        end

        def namespace_get_listing(ns)
          send_namespace_get_listing(ns)
          return recv_namespace_get_listing()
        end

        def send_namespace_get_listing(ns)
          send_message('namespace_get_listing', Namespace_get_listing_args, :ns => ns)
        end

        def recv_namespace_get_listing()
          result = receive_message(Namespace_get_listing_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'namespace_get_listing failed: unknown result')
        end

        def get_listing(ns)
          send_get_listing(ns)
          return recv_get_listing()
        end

        def send_get_listing(ns)
          send_message('get_listing', Get_listing_args, :ns => ns)
        end

        def recv_get_listing()
          result = receive_message(Get_listing_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_listing failed: unknown result')
        end

        def table_get_splits(ns, table_name)
          send_table_get_splits(ns, table_name)
          return recv_table_get_splits()
        end

        def send_table_get_splits(ns, table_name)
          send_message('table_get_splits', Table_get_splits_args, :ns => ns, :table_name => table_name)
        end

        def recv_table_get_splits()
          result = receive_message(Table_get_splits_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'table_get_splits failed: unknown result')
        end

        def get_table_splits(ns, table_name)
          send_get_table_splits(ns, table_name)
          return recv_get_table_splits()
        end

        def send_get_table_splits(ns, table_name)
          send_message('get_table_splits', Get_table_splits_args, :ns => ns, :table_name => table_name)
        end

        def recv_get_table_splits()
          result = receive_message(Get_table_splits_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_table_splits failed: unknown result')
        end

        def namespace_drop(ns, if_exists)
          send_namespace_drop(ns, if_exists)
          recv_namespace_drop()
        end

        def send_namespace_drop(ns, if_exists)
          send_message('namespace_drop', Namespace_drop_args, :ns => ns, :if_exists => if_exists)
        end

        def recv_namespace_drop()
          result = receive_message(Namespace_drop_result)
          raise result.e unless result.e.nil?
          return
        end

        def drop_namespace(ns, if_exists)
          send_drop_namespace(ns, if_exists)
          recv_drop_namespace()
        end

        def send_drop_namespace(ns, if_exists)
          send_message('drop_namespace', Drop_namespace_args, :ns => ns, :if_exists => if_exists)
        end

        def recv_drop_namespace()
          result = receive_message(Drop_namespace_result)
          raise result.e unless result.e.nil?
          return
        end

        def rename_table(ns, name, new_name)
          send_rename_table(ns, name, new_name)
          recv_rename_table()
        end

        def send_rename_table(ns, name, new_name)
          send_message('rename_table', Rename_table_args, :ns => ns, :name => name, :new_name => new_name)
        end

        def recv_rename_table()
          result = receive_message(Rename_table_result)
          raise result.e unless result.e.nil?
          return
        end

        def table_rename(ns, name, new_name)
          send_table_rename(ns, name, new_name)
          recv_table_rename()
        end

        def send_table_rename(ns, name, new_name)
          send_message('table_rename', Table_rename_args, :ns => ns, :name => name, :new_name => new_name)
        end

        def recv_table_rename()
          result = receive_message(Table_rename_result)
          raise result.e unless result.e.nil?
          return
        end

        def drop_table(ns, name, if_exists)
          send_drop_table(ns, name, if_exists)
          recv_drop_table()
        end

        def send_drop_table(ns, name, if_exists)
          send_message('drop_table', Drop_table_args, :ns => ns, :name => name, :if_exists => if_exists)
        end

        def recv_drop_table()
          result = receive_message(Drop_table_result)
          raise result.e unless result.e.nil?
          return
        end

        def table_drop(ns, name, if_exists)
          send_table_drop(ns, name, if_exists)
          recv_table_drop()
        end

        def send_table_drop(ns, name, if_exists)
          send_message('table_drop', Table_drop_args, :ns => ns, :name => name, :if_exists => if_exists)
        end

        def recv_table_drop()
          result = receive_message(Table_drop_result)
          raise result.e unless result.e.nil?
          return
        end

        def generate_guid()
          send_generate_guid()
          return recv_generate_guid()
        end

        def send_generate_guid()
          send_message('generate_guid', Generate_guid_args)
        end

        def recv_generate_guid()
          result = receive_message(Generate_guid_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'generate_guid failed: unknown result')
        end

        def create_cell_unique(ns, table_name, key, value)
          send_create_cell_unique(ns, table_name, key, value)
          return recv_create_cell_unique()
        end

        def send_create_cell_unique(ns, table_name, key, value)
          send_message('create_cell_unique', Create_cell_unique_args, :ns => ns, :table_name => table_name, :key => key, :value => value)
        end

        def recv_create_cell_unique()
          result = receive_message(Create_cell_unique_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_cell_unique failed: unknown result')
        end

        def error_get_text(error_code)
          send_error_get_text(error_code)
          return recv_error_get_text()
        end

        def send_error_get_text(error_code)
          send_message('error_get_text', Error_get_text_args, :error_code => error_code)
        end

        def recv_error_get_text()
          result = receive_message(Error_get_text_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'error_get_text failed: unknown result')
        end

        def status()
          send_status()
          return recv_status()
        end

        def send_status()
          send_message('status', Status_args)
        end

        def recv_status()
          result = receive_message(Status_result)
          return result.success unless result.success.nil?
          raise result.e unless result.e.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'status failed: unknown result')
        end

        def shutdown()
          send_shutdown()
          recv_shutdown()
        end

        def send_shutdown()
          send_message('shutdown', Shutdown_args)
        end

        def recv_shutdown()
          result = receive_message(Shutdown_result)
          raise result.e unless result.e.nil?
          return
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_namespace_create(seqid, iprot, oprot)
          args = read_args(iprot, Namespace_create_args)
          result = Namespace_create_result.new()
          begin
            @handler.namespace_create(args.ns)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'namespace_create', seqid)
        end

        def process_create_namespace(seqid, iprot, oprot)
          args = read_args(iprot, Create_namespace_args)
          result = Create_namespace_result.new()
          begin
            @handler.create_namespace(args.ns)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'create_namespace', seqid)
        end

        def process_table_create(seqid, iprot, oprot)
          args = read_args(iprot, Table_create_args)
          result = Table_create_result.new()
          begin
            @handler.table_create(args.ns, args.table_name, args.schema)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'table_create', seqid)
        end

        def process_table_alter(seqid, iprot, oprot)
          args = read_args(iprot, Table_alter_args)
          result = Table_alter_result.new()
          begin
            @handler.table_alter(args.ns, args.table_name, args.schema)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'table_alter', seqid)
        end

        def process_refresh_table(seqid, iprot, oprot)
          args = read_args(iprot, Refresh_table_args)
          result = Refresh_table_result.new()
          begin
            @handler.refresh_table(args.ns, args.table_name)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'refresh_table', seqid)
        end

        def process_namespace_open(seqid, iprot, oprot)
          args = read_args(iprot, Namespace_open_args)
          result = Namespace_open_result.new()
          begin
            result.success = @handler.namespace_open(args.ns)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'namespace_open', seqid)
        end

        def process_open_namespace(seqid, iprot, oprot)
          args = read_args(iprot, Open_namespace_args)
          result = Open_namespace_result.new()
          begin
            result.success = @handler.open_namespace(args.ns)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'open_namespace', seqid)
        end

        def process_namespace_close(seqid, iprot, oprot)
          args = read_args(iprot, Namespace_close_args)
          result = Namespace_close_result.new()
          begin
            @handler.namespace_close(args.ns)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'namespace_close', seqid)
        end

        def process_close_namespace(seqid, iprot, oprot)
          args = read_args(iprot, Close_namespace_args)
          result = Close_namespace_result.new()
          begin
            @handler.close_namespace(args.ns)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'close_namespace', seqid)
        end

        def process_future_open(seqid, iprot, oprot)
          args = read_args(iprot, Future_open_args)
          result = Future_open_result.new()
          begin
            result.success = @handler.future_open(args.capacity)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'future_open', seqid)
        end

        def process_open_future(seqid, iprot, oprot)
          args = read_args(iprot, Open_future_args)
          result = Open_future_result.new()
          begin
            result.success = @handler.open_future(args.capacity)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'open_future', seqid)
        end

        def process_future_cancel(seqid, iprot, oprot)
          args = read_args(iprot, Future_cancel_args)
          result = Future_cancel_result.new()
          begin
            @handler.future_cancel(args.ff)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'future_cancel', seqid)
        end

        def process_cancel_future(seqid, iprot, oprot)
          args = read_args(iprot, Cancel_future_args)
          result = Cancel_future_result.new()
          begin
            @handler.cancel_future(args.ff)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'cancel_future', seqid)
        end

        def process_future_get_result(seqid, iprot, oprot)
          args = read_args(iprot, Future_get_result_args)
          result = Future_get_result_result.new()
          begin
            result.success = @handler.future_get_result(args.ff, args.timeout_millis)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'future_get_result', seqid)
        end

        def process_get_future_result(seqid, iprot, oprot)
          args = read_args(iprot, Get_future_result_args)
          result = Get_future_result_result.new()
          begin
            result.success = @handler.get_future_result(args.ff, args.timeout_millis)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'get_future_result', seqid)
        end

        def process_future_get_result_as_arrays(seqid, iprot, oprot)
          args = read_args(iprot, Future_get_result_as_arrays_args)
          result = Future_get_result_as_arrays_result.new()
          begin
            result.success = @handler.future_get_result_as_arrays(args.ff, args.timeout_millis)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'future_get_result_as_arrays', seqid)
        end

        def process_get_future_result_as_arrays(seqid, iprot, oprot)
          args = read_args(iprot, Get_future_result_as_arrays_args)
          result = Get_future_result_as_arrays_result.new()
          begin
            result.success = @handler.get_future_result_as_arrays(args.ff, args.timeout_millis)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'get_future_result_as_arrays', seqid)
        end

        def process_future_get_result_serialized(seqid, iprot, oprot)
          args = read_args(iprot, Future_get_result_serialized_args)
          result = Future_get_result_serialized_result.new()
          begin
            result.success = @handler.future_get_result_serialized(args.ff, args.timeout_millis)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'future_get_result_serialized', seqid)
        end

        def process_get_future_result_serialized(seqid, iprot, oprot)
          args = read_args(iprot, Get_future_result_serialized_args)
          result = Get_future_result_serialized_result.new()
          begin
            result.success = @handler.get_future_result_serialized(args.ff, args.timeout_millis)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'get_future_result_serialized', seqid)
        end

        def process_future_is_empty(seqid, iprot, oprot)
          args = read_args(iprot, Future_is_empty_args)
          result = Future_is_empty_result.new()
          begin
            result.success = @handler.future_is_empty(args.ff)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'future_is_empty', seqid)
        end

        def process_future_is_full(seqid, iprot, oprot)
          args = read_args(iprot, Future_is_full_args)
          result = Future_is_full_result.new()
          begin
            result.success = @handler.future_is_full(args.ff)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'future_is_full', seqid)
        end

        def process_future_is_cancelled(seqid, iprot, oprot)
          args = read_args(iprot, Future_is_cancelled_args)
          result = Future_is_cancelled_result.new()
          begin
            result.success = @handler.future_is_cancelled(args.ff)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'future_is_cancelled', seqid)
        end

        def process_future_has_outstanding(seqid, iprot, oprot)
          args = read_args(iprot, Future_has_outstanding_args)
          result = Future_has_outstanding_result.new()
          begin
            result.success = @handler.future_has_outstanding(args.ff)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'future_has_outstanding', seqid)
        end

        def process_future_close(seqid, iprot, oprot)
          args = read_args(iprot, Future_close_args)
          result = Future_close_result.new()
          begin
            @handler.future_close(args.ff)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'future_close', seqid)
        end

        def process_close_future(seqid, iprot, oprot)
          args = read_args(iprot, Close_future_args)
          result = Close_future_result.new()
          begin
            @handler.close_future(args.ff)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'close_future', seqid)
        end

        def process_scanner_open(seqid, iprot, oprot)
          args = read_args(iprot, Scanner_open_args)
          result = Scanner_open_result.new()
          begin
            result.success = @handler.scanner_open(args.ns, args.table_name, args.scan_spec)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'scanner_open', seqid)
        end

        def process_open_scanner(seqid, iprot, oprot)
          args = read_args(iprot, Open_scanner_args)
          result = Open_scanner_result.new()
          begin
            result.success = @handler.open_scanner(args.ns, args.table_name, args.scan_spec)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'open_scanner', seqid)
        end

        def process_async_scanner_open(seqid, iprot, oprot)
          args = read_args(iprot, Async_scanner_open_args)
          result = Async_scanner_open_result.new()
          begin
            result.success = @handler.async_scanner_open(args.ns, args.table_name, args.future, args.scan_spec)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'async_scanner_open', seqid)
        end

        def process_open_scanner_async(seqid, iprot, oprot)
          args = read_args(iprot, Open_scanner_async_args)
          result = Open_scanner_async_result.new()
          begin
            result.success = @handler.open_scanner_async(args.ns, args.table_name, args.future, args.scan_spec)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'open_scanner_async', seqid)
        end

        def process_scanner_close(seqid, iprot, oprot)
          args = read_args(iprot, Scanner_close_args)
          result = Scanner_close_result.new()
          begin
            @handler.scanner_close(args.scanner)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'scanner_close', seqid)
        end

        def process_close_scanner(seqid, iprot, oprot)
          args = read_args(iprot, Close_scanner_args)
          result = Close_scanner_result.new()
          begin
            @handler.close_scanner(args.scanner)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'close_scanner', seqid)
        end

        def process_async_scanner_cancel(seqid, iprot, oprot)
          args = read_args(iprot, Async_scanner_cancel_args)
          result = Async_scanner_cancel_result.new()
          begin
            @handler.async_scanner_cancel(args.scanner)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'async_scanner_cancel', seqid)
        end

        def process_cancel_scanner_async(seqid, iprot, oprot)
          args = read_args(iprot, Cancel_scanner_async_args)
          result = Cancel_scanner_async_result.new()
          begin
            @handler.cancel_scanner_async(args.scanner)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'cancel_scanner_async', seqid)
        end

        def process_async_scanner_close(seqid, iprot, oprot)
          args = read_args(iprot, Async_scanner_close_args)
          result = Async_scanner_close_result.new()
          begin
            @handler.async_scanner_close(args.scanner)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'async_scanner_close', seqid)
        end

        def process_close_scanner_async(seqid, iprot, oprot)
          args = read_args(iprot, Close_scanner_async_args)
          result = Close_scanner_async_result.new()
          begin
            @handler.close_scanner_async(args.scanner)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'close_scanner_async', seqid)
        end

        def process_scanner_get_cells(seqid, iprot, oprot)
          args = read_args(iprot, Scanner_get_cells_args)
          result = Scanner_get_cells_result.new()
          begin
            result.success = @handler.scanner_get_cells(args.scanner)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'scanner_get_cells', seqid)
        end

        def process_next_cells(seqid, iprot, oprot)
          args = read_args(iprot, Next_cells_args)
          result = Next_cells_result.new()
          begin
            result.success = @handler.next_cells(args.scanner)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'next_cells', seqid)
        end

        def process_scanner_get_cells_as_arrays(seqid, iprot, oprot)
          args = read_args(iprot, Scanner_get_cells_as_arrays_args)
          result = Scanner_get_cells_as_arrays_result.new()
          begin
            result.success = @handler.scanner_get_cells_as_arrays(args.scanner)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'scanner_get_cells_as_arrays', seqid)
        end

        def process_next_cells_as_arrays(seqid, iprot, oprot)
          args = read_args(iprot, Next_cells_as_arrays_args)
          result = Next_cells_as_arrays_result.new()
          begin
            result.success = @handler.next_cells_as_arrays(args.scanner)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'next_cells_as_arrays', seqid)
        end

        def process_scanner_get_cells_serialized(seqid, iprot, oprot)
          args = read_args(iprot, Scanner_get_cells_serialized_args)
          result = Scanner_get_cells_serialized_result.new()
          begin
            result.success = @handler.scanner_get_cells_serialized(args.scanner)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'scanner_get_cells_serialized', seqid)
        end

        def process_next_cells_serialized(seqid, iprot, oprot)
          args = read_args(iprot, Next_cells_serialized_args)
          result = Next_cells_serialized_result.new()
          begin
            result.success = @handler.next_cells_serialized(args.scanner)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'next_cells_serialized', seqid)
        end

        def process_scanner_get_row(seqid, iprot, oprot)
          args = read_args(iprot, Scanner_get_row_args)
          result = Scanner_get_row_result.new()
          begin
            result.success = @handler.scanner_get_row(args.scanner)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'scanner_get_row', seqid)
        end

        def process_next_row(seqid, iprot, oprot)
          args = read_args(iprot, Next_row_args)
          result = Next_row_result.new()
          begin
            result.success = @handler.next_row(args.scanner)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'next_row', seqid)
        end

        def process_scanner_get_row_as_arrays(seqid, iprot, oprot)
          args = read_args(iprot, Scanner_get_row_as_arrays_args)
          result = Scanner_get_row_as_arrays_result.new()
          begin
            result.success = @handler.scanner_get_row_as_arrays(args.scanner)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'scanner_get_row_as_arrays', seqid)
        end

        def process_next_row_as_arrays(seqid, iprot, oprot)
          args = read_args(iprot, Next_row_as_arrays_args)
          result = Next_row_as_arrays_result.new()
          begin
            result.success = @handler.next_row_as_arrays(args.scanner)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'next_row_as_arrays', seqid)
        end

        def process_scanner_get_row_serialized(seqid, iprot, oprot)
          args = read_args(iprot, Scanner_get_row_serialized_args)
          result = Scanner_get_row_serialized_result.new()
          begin
            result.success = @handler.scanner_get_row_serialized(args.scanner)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'scanner_get_row_serialized', seqid)
        end

        def process_next_row_serialized(seqid, iprot, oprot)
          args = read_args(iprot, Next_row_serialized_args)
          result = Next_row_serialized_result.new()
          begin
            result.success = @handler.next_row_serialized(args.scanner)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'next_row_serialized', seqid)
        end

        def process_get_row(seqid, iprot, oprot)
          args = read_args(iprot, Get_row_args)
          result = Get_row_result.new()
          begin
            result.success = @handler.get_row(args.ns, args.table_name, args.row)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'get_row', seqid)
        end

        def process_get_row_as_arrays(seqid, iprot, oprot)
          args = read_args(iprot, Get_row_as_arrays_args)
          result = Get_row_as_arrays_result.new()
          begin
            result.success = @handler.get_row_as_arrays(args.ns, args.name, args.row)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'get_row_as_arrays', seqid)
        end

        def process_get_row_serialized(seqid, iprot, oprot)
          args = read_args(iprot, Get_row_serialized_args)
          result = Get_row_serialized_result.new()
          begin
            result.success = @handler.get_row_serialized(args.ns, args.table_name, args.row)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'get_row_serialized', seqid)
        end

        def process_get_cell(seqid, iprot, oprot)
          args = read_args(iprot, Get_cell_args)
          result = Get_cell_result.new()
          begin
            result.success = @handler.get_cell(args.ns, args.table_name, args.row, args.column)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'get_cell', seqid)
        end

        def process_get_cells(seqid, iprot, oprot)
          args = read_args(iprot, Get_cells_args)
          result = Get_cells_result.new()
          begin
            result.success = @handler.get_cells(args.ns, args.table_name, args.scan_spec)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'get_cells', seqid)
        end

        def process_get_cells_as_arrays(seqid, iprot, oprot)
          args = read_args(iprot, Get_cells_as_arrays_args)
          result = Get_cells_as_arrays_result.new()
          begin
            result.success = @handler.get_cells_as_arrays(args.ns, args.name, args.scan_spec)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'get_cells_as_arrays', seqid)
        end

        def process_get_cells_serialized(seqid, iprot, oprot)
          args = read_args(iprot, Get_cells_serialized_args)
          result = Get_cells_serialized_result.new()
          begin
            result.success = @handler.get_cells_serialized(args.ns, args.name, args.scan_spec)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'get_cells_serialized', seqid)
        end

        def process_shared_mutator_refresh(seqid, iprot, oprot)
          args = read_args(iprot, Shared_mutator_refresh_args)
          result = Shared_mutator_refresh_result.new()
          begin
            @handler.shared_mutator_refresh(args.ns, args.table_name, args.mutate_spec)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'shared_mutator_refresh', seqid)
        end

        def process_refresh_shared_mutator(seqid, iprot, oprot)
          args = read_args(iprot, Refresh_shared_mutator_args)
          result = Refresh_shared_mutator_result.new()
          begin
            @handler.refresh_shared_mutator(args.ns, args.table_name, args.mutate_spec)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'refresh_shared_mutator', seqid)
        end

        def process_shared_mutator_set_cells(seqid, iprot, oprot)
          args = read_args(iprot, Shared_mutator_set_cells_args)
          result = Shared_mutator_set_cells_result.new()
          begin
            @handler.shared_mutator_set_cells(args.ns, args.table_name, args.mutate_spec, args.cells)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'shared_mutator_set_cells', seqid)
        end

        def process_offer_cells(seqid, iprot, oprot)
          args = read_args(iprot, Offer_cells_args)
          result = Offer_cells_result.new()
          begin
            @handler.offer_cells(args.ns, args.table_name, args.mutate_spec, args.cells)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'offer_cells', seqid)
        end

        def process_shared_mutator_set_cells_as_arrays(seqid, iprot, oprot)
          args = read_args(iprot, Shared_mutator_set_cells_as_arrays_args)
          result = Shared_mutator_set_cells_as_arrays_result.new()
          begin
            @handler.shared_mutator_set_cells_as_arrays(args.ns, args.table_name, args.mutate_spec, args.cells)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'shared_mutator_set_cells_as_arrays', seqid)
        end

        def process_offer_cells_as_arrays(seqid, iprot, oprot)
          args = read_args(iprot, Offer_cells_as_arrays_args)
          result = Offer_cells_as_arrays_result.new()
          begin
            @handler.offer_cells_as_arrays(args.ns, args.table_name, args.mutate_spec, args.cells)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'offer_cells_as_arrays', seqid)
        end

        def process_shared_mutator_set_cell(seqid, iprot, oprot)
          args = read_args(iprot, Shared_mutator_set_cell_args)
          result = Shared_mutator_set_cell_result.new()
          begin
            @handler.shared_mutator_set_cell(args.ns, args.table_name, args.mutate_spec, args.cell)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'shared_mutator_set_cell', seqid)
        end

        def process_offer_cell(seqid, iprot, oprot)
          args = read_args(iprot, Offer_cell_args)
          result = Offer_cell_result.new()
          begin
            @handler.offer_cell(args.ns, args.table_name, args.mutate_spec, args.cell)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'offer_cell', seqid)
        end

        def process_shared_mutator_set_cell_as_array(seqid, iprot, oprot)
          args = read_args(iprot, Shared_mutator_set_cell_as_array_args)
          result = Shared_mutator_set_cell_as_array_result.new()
          begin
            @handler.shared_mutator_set_cell_as_array(args.ns, args.table_name, args.mutate_spec, args.cell)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'shared_mutator_set_cell_as_array', seqid)
        end

        def process_offer_cell_as_array(seqid, iprot, oprot)
          args = read_args(iprot, Offer_cell_as_array_args)
          result = Offer_cell_as_array_result.new()
          begin
            @handler.offer_cell_as_array(args.ns, args.table_name, args.mutate_spec, args.cell)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'offer_cell_as_array', seqid)
        end

        def process_mutator_open(seqid, iprot, oprot)
          args = read_args(iprot, Mutator_open_args)
          result = Mutator_open_result.new()
          begin
            result.success = @handler.mutator_open(args.ns, args.table_name, args.flags, args.flush_interval)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'mutator_open', seqid)
        end

        def process_open_mutator(seqid, iprot, oprot)
          args = read_args(iprot, Open_mutator_args)
          result = Open_mutator_result.new()
          begin
            result.success = @handler.open_mutator(args.ns, args.table_name, args.flags, args.flush_interval)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'open_mutator', seqid)
        end

        def process_async_mutator_open(seqid, iprot, oprot)
          args = read_args(iprot, Async_mutator_open_args)
          result = Async_mutator_open_result.new()
          begin
            result.success = @handler.async_mutator_open(args.ns, args.table_name, args.future, args.flags)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'async_mutator_open', seqid)
        end

        def process_open_mutator_async(seqid, iprot, oprot)
          args = read_args(iprot, Open_mutator_async_args)
          result = Open_mutator_async_result.new()
          begin
            result.success = @handler.open_mutator_async(args.ns, args.table_name, args.future, args.flags)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'open_mutator_async', seqid)
        end

        def process_mutator_close(seqid, iprot, oprot)
          args = read_args(iprot, Mutator_close_args)
          result = Mutator_close_result.new()
          begin
            @handler.mutator_close(args.mutator)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'mutator_close', seqid)
        end

        def process_close_mutator(seqid, iprot, oprot)
          args = read_args(iprot, Close_mutator_args)
          result = Close_mutator_result.new()
          begin
            @handler.close_mutator(args.mutator)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'close_mutator', seqid)
        end

        def process_async_mutator_cancel(seqid, iprot, oprot)
          args = read_args(iprot, Async_mutator_cancel_args)
          result = Async_mutator_cancel_result.new()
          begin
            @handler.async_mutator_cancel(args.mutator)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'async_mutator_cancel', seqid)
        end

        def process_cancel_mutator_async(seqid, iprot, oprot)
          args = read_args(iprot, Cancel_mutator_async_args)
          result = Cancel_mutator_async_result.new()
          begin
            @handler.cancel_mutator_async(args.mutator)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'cancel_mutator_async', seqid)
        end

        def process_async_mutator_close(seqid, iprot, oprot)
          args = read_args(iprot, Async_mutator_close_args)
          result = Async_mutator_close_result.new()
          begin
            @handler.async_mutator_close(args.mutator)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'async_mutator_close', seqid)
        end

        def process_close_mutator_async(seqid, iprot, oprot)
          args = read_args(iprot, Close_mutator_async_args)
          result = Close_mutator_async_result.new()
          begin
            @handler.close_mutator_async(args.mutator)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'close_mutator_async', seqid)
        end

        def process_mutator_set_cell(seqid, iprot, oprot)
          args = read_args(iprot, Mutator_set_cell_args)
          result = Mutator_set_cell_result.new()
          begin
            @handler.mutator_set_cell(args.mutator, args.cell)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'mutator_set_cell', seqid)
        end

        def process_set_cell(seqid, iprot, oprot)
          args = read_args(iprot, Set_cell_args)
          result = Set_cell_result.new()
          begin
            @handler.set_cell(args.ns, args.table_name, args.cell)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'set_cell', seqid)
        end

        def process_mutator_set_cell_as_array(seqid, iprot, oprot)
          args = read_args(iprot, Mutator_set_cell_as_array_args)
          result = Mutator_set_cell_as_array_result.new()
          begin
            @handler.mutator_set_cell_as_array(args.mutator, args.cell)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'mutator_set_cell_as_array', seqid)
        end

        def process_set_cell_as_array(seqid, iprot, oprot)
          args = read_args(iprot, Set_cell_as_array_args)
          result = Set_cell_as_array_result.new()
          begin
            @handler.set_cell_as_array(args.ns, args.table_name, args.cell)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'set_cell_as_array', seqid)
        end

        def process_mutator_set_cells(seqid, iprot, oprot)
          args = read_args(iprot, Mutator_set_cells_args)
          result = Mutator_set_cells_result.new()
          begin
            @handler.mutator_set_cells(args.mutator, args.cells)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'mutator_set_cells', seqid)
        end

        def process_set_cells(seqid, iprot, oprot)
          args = read_args(iprot, Set_cells_args)
          result = Set_cells_result.new()
          begin
            @handler.set_cells(args.ns, args.table_name, args.cells)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'set_cells', seqid)
        end

        def process_mutator_set_cells_as_arrays(seqid, iprot, oprot)
          args = read_args(iprot, Mutator_set_cells_as_arrays_args)
          result = Mutator_set_cells_as_arrays_result.new()
          begin
            @handler.mutator_set_cells_as_arrays(args.mutator, args.cells)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'mutator_set_cells_as_arrays', seqid)
        end

        def process_set_cells_as_arrays(seqid, iprot, oprot)
          args = read_args(iprot, Set_cells_as_arrays_args)
          result = Set_cells_as_arrays_result.new()
          begin
            @handler.set_cells_as_arrays(args.ns, args.table_name, args.cells)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'set_cells_as_arrays', seqid)
        end

        def process_mutator_set_cells_serialized(seqid, iprot, oprot)
          args = read_args(iprot, Mutator_set_cells_serialized_args)
          result = Mutator_set_cells_serialized_result.new()
          begin
            @handler.mutator_set_cells_serialized(args.mutator, args.cells, args.flush)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'mutator_set_cells_serialized', seqid)
        end

        def process_set_cells_serialized(seqid, iprot, oprot)
          args = read_args(iprot, Set_cells_serialized_args)
          result = Set_cells_serialized_result.new()
          begin
            @handler.set_cells_serialized(args.ns, args.table_name, args.cells)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'set_cells_serialized', seqid)
        end

        def process_mutator_flush(seqid, iprot, oprot)
          args = read_args(iprot, Mutator_flush_args)
          result = Mutator_flush_result.new()
          begin
            @handler.mutator_flush(args.mutator)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'mutator_flush', seqid)
        end

        def process_flush_mutator(seqid, iprot, oprot)
          args = read_args(iprot, Flush_mutator_args)
          result = Flush_mutator_result.new()
          begin
            @handler.flush_mutator(args.mutator)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'flush_mutator', seqid)
        end

        def process_async_mutator_set_cell(seqid, iprot, oprot)
          args = read_args(iprot, Async_mutator_set_cell_args)
          result = Async_mutator_set_cell_result.new()
          begin
            @handler.async_mutator_set_cell(args.mutator, args.cell)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'async_mutator_set_cell', seqid)
        end

        def process_set_cell_async(seqid, iprot, oprot)
          args = read_args(iprot, Set_cell_async_args)
          result = Set_cell_async_result.new()
          begin
            @handler.set_cell_async(args.mutator, args.cell)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'set_cell_async', seqid)
        end

        def process_async_mutator_set_cell_as_array(seqid, iprot, oprot)
          args = read_args(iprot, Async_mutator_set_cell_as_array_args)
          result = Async_mutator_set_cell_as_array_result.new()
          begin
            @handler.async_mutator_set_cell_as_array(args.mutator, args.cell)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'async_mutator_set_cell_as_array', seqid)
        end

        def process_set_cell_as_array_async(seqid, iprot, oprot)
          args = read_args(iprot, Set_cell_as_array_async_args)
          result = Set_cell_as_array_async_result.new()
          begin
            @handler.set_cell_as_array_async(args.mutator, args.cell)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'set_cell_as_array_async', seqid)
        end

        def process_async_mutator_set_cells(seqid, iprot, oprot)
          args = read_args(iprot, Async_mutator_set_cells_args)
          result = Async_mutator_set_cells_result.new()
          begin
            @handler.async_mutator_set_cells(args.mutator, args.cells)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'async_mutator_set_cells', seqid)
        end

        def process_set_cells_async(seqid, iprot, oprot)
          args = read_args(iprot, Set_cells_async_args)
          result = Set_cells_async_result.new()
          begin
            @handler.set_cells_async(args.mutator, args.cells)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'set_cells_async', seqid)
        end

        def process_async_mutator_set_cells_as_arrays(seqid, iprot, oprot)
          args = read_args(iprot, Async_mutator_set_cells_as_arrays_args)
          result = Async_mutator_set_cells_as_arrays_result.new()
          begin
            @handler.async_mutator_set_cells_as_arrays(args.mutator, args.cells)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'async_mutator_set_cells_as_arrays', seqid)
        end

        def process_set_cells_as_arrays_async(seqid, iprot, oprot)
          args = read_args(iprot, Set_cells_as_arrays_async_args)
          result = Set_cells_as_arrays_async_result.new()
          begin
            @handler.set_cells_as_arrays_async(args.mutator, args.cells)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'set_cells_as_arrays_async', seqid)
        end

        def process_async_mutator_set_cells_serialized(seqid, iprot, oprot)
          args = read_args(iprot, Async_mutator_set_cells_serialized_args)
          result = Async_mutator_set_cells_serialized_result.new()
          begin
            @handler.async_mutator_set_cells_serialized(args.mutator, args.cells, args.flush)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'async_mutator_set_cells_serialized', seqid)
        end

        def process_set_cells_serialized_async(seqid, iprot, oprot)
          args = read_args(iprot, Set_cells_serialized_async_args)
          result = Set_cells_serialized_async_result.new()
          begin
            @handler.set_cells_serialized_async(args.mutator, args.cells, args.flush)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'set_cells_serialized_async', seqid)
        end

        def process_async_mutator_flush(seqid, iprot, oprot)
          args = read_args(iprot, Async_mutator_flush_args)
          result = Async_mutator_flush_result.new()
          begin
            @handler.async_mutator_flush(args.mutator)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'async_mutator_flush', seqid)
        end

        def process_flush_mutator_async(seqid, iprot, oprot)
          args = read_args(iprot, Flush_mutator_async_args)
          result = Flush_mutator_async_result.new()
          begin
            @handler.flush_mutator_async(args.mutator)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'flush_mutator_async', seqid)
        end

        def process_namespace_exists(seqid, iprot, oprot)
          args = read_args(iprot, Namespace_exists_args)
          result = Namespace_exists_result.new()
          begin
            result.success = @handler.namespace_exists(args.ns)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'namespace_exists', seqid)
        end

        def process_exists_namespace(seqid, iprot, oprot)
          args = read_args(iprot, Exists_namespace_args)
          result = Exists_namespace_result.new()
          begin
            result.success = @handler.exists_namespace(args.ns)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'exists_namespace', seqid)
        end

        def process_exists_table(seqid, iprot, oprot)
          args = read_args(iprot, Exists_table_args)
          result = Exists_table_result.new()
          begin
            result.success = @handler.exists_table(args.ns, args.name)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'exists_table', seqid)
        end

        def process_table_exists(seqid, iprot, oprot)
          args = read_args(iprot, Table_exists_args)
          result = Table_exists_result.new()
          begin
            result.success = @handler.table_exists(args.ns, args.name)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'table_exists', seqid)
        end

        def process_table_get_id(seqid, iprot, oprot)
          args = read_args(iprot, Table_get_id_args)
          result = Table_get_id_result.new()
          begin
            result.success = @handler.table_get_id(args.ns, args.table_name)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'table_get_id', seqid)
        end

        def process_get_table_id(seqid, iprot, oprot)
          args = read_args(iprot, Get_table_id_args)
          result = Get_table_id_result.new()
          begin
            result.success = @handler.get_table_id(args.ns, args.table_name)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'get_table_id', seqid)
        end

        def process_table_get_schema_str(seqid, iprot, oprot)
          args = read_args(iprot, Table_get_schema_str_args)
          result = Table_get_schema_str_result.new()
          begin
            result.success = @handler.table_get_schema_str(args.ns, args.table_name)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'table_get_schema_str', seqid)
        end

        def process_get_schema_str(seqid, iprot, oprot)
          args = read_args(iprot, Get_schema_str_args)
          result = Get_schema_str_result.new()
          begin
            result.success = @handler.get_schema_str(args.ns, args.table_name)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'get_schema_str', seqid)
        end

        def process_table_get_schema_str_with_ids(seqid, iprot, oprot)
          args = read_args(iprot, Table_get_schema_str_with_ids_args)
          result = Table_get_schema_str_with_ids_result.new()
          begin
            result.success = @handler.table_get_schema_str_with_ids(args.ns, args.table_name)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'table_get_schema_str_with_ids', seqid)
        end

        def process_get_schema_str_with_ids(seqid, iprot, oprot)
          args = read_args(iprot, Get_schema_str_with_ids_args)
          result = Get_schema_str_with_ids_result.new()
          begin
            result.success = @handler.get_schema_str_with_ids(args.ns, args.table_name)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'get_schema_str_with_ids', seqid)
        end

        def process_table_get_schema(seqid, iprot, oprot)
          args = read_args(iprot, Table_get_schema_args)
          result = Table_get_schema_result.new()
          begin
            result.success = @handler.table_get_schema(args.ns, args.table_name)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'table_get_schema', seqid)
        end

        def process_get_schema(seqid, iprot, oprot)
          args = read_args(iprot, Get_schema_args)
          result = Get_schema_result.new()
          begin
            result.success = @handler.get_schema(args.ns, args.table_name)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'get_schema', seqid)
        end

        def process_get_tables(seqid, iprot, oprot)
          args = read_args(iprot, Get_tables_args)
          result = Get_tables_result.new()
          begin
            result.success = @handler.get_tables(args.ns)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'get_tables', seqid)
        end

        def process_namespace_get_listing(seqid, iprot, oprot)
          args = read_args(iprot, Namespace_get_listing_args)
          result = Namespace_get_listing_result.new()
          begin
            result.success = @handler.namespace_get_listing(args.ns)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'namespace_get_listing', seqid)
        end

        def process_get_listing(seqid, iprot, oprot)
          args = read_args(iprot, Get_listing_args)
          result = Get_listing_result.new()
          begin
            result.success = @handler.get_listing(args.ns)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'get_listing', seqid)
        end

        def process_table_get_splits(seqid, iprot, oprot)
          args = read_args(iprot, Table_get_splits_args)
          result = Table_get_splits_result.new()
          begin
            result.success = @handler.table_get_splits(args.ns, args.table_name)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'table_get_splits', seqid)
        end

        def process_get_table_splits(seqid, iprot, oprot)
          args = read_args(iprot, Get_table_splits_args)
          result = Get_table_splits_result.new()
          begin
            result.success = @handler.get_table_splits(args.ns, args.table_name)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'get_table_splits', seqid)
        end

        def process_namespace_drop(seqid, iprot, oprot)
          args = read_args(iprot, Namespace_drop_args)
          result = Namespace_drop_result.new()
          begin
            @handler.namespace_drop(args.ns, args.if_exists)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'namespace_drop', seqid)
        end

        def process_drop_namespace(seqid, iprot, oprot)
          args = read_args(iprot, Drop_namespace_args)
          result = Drop_namespace_result.new()
          begin
            @handler.drop_namespace(args.ns, args.if_exists)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'drop_namespace', seqid)
        end

        def process_rename_table(seqid, iprot, oprot)
          args = read_args(iprot, Rename_table_args)
          result = Rename_table_result.new()
          begin
            @handler.rename_table(args.ns, args.name, args.new_name)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'rename_table', seqid)
        end

        def process_table_rename(seqid, iprot, oprot)
          args = read_args(iprot, Table_rename_args)
          result = Table_rename_result.new()
          begin
            @handler.table_rename(args.ns, args.name, args.new_name)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'table_rename', seqid)
        end

        def process_drop_table(seqid, iprot, oprot)
          args = read_args(iprot, Drop_table_args)
          result = Drop_table_result.new()
          begin
            @handler.drop_table(args.ns, args.name, args.if_exists)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'drop_table', seqid)
        end

        def process_table_drop(seqid, iprot, oprot)
          args = read_args(iprot, Table_drop_args)
          result = Table_drop_result.new()
          begin
            @handler.table_drop(args.ns, args.name, args.if_exists)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'table_drop', seqid)
        end

        def process_generate_guid(seqid, iprot, oprot)
          args = read_args(iprot, Generate_guid_args)
          result = Generate_guid_result.new()
          result.success = @handler.generate_guid()
          write_result(result, oprot, 'generate_guid', seqid)
        end

        def process_create_cell_unique(seqid, iprot, oprot)
          args = read_args(iprot, Create_cell_unique_args)
          result = Create_cell_unique_result.new()
          begin
            result.success = @handler.create_cell_unique(args.ns, args.table_name, args.key, args.value)
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'create_cell_unique', seqid)
        end

        def process_error_get_text(seqid, iprot, oprot)
          args = read_args(iprot, Error_get_text_args)
          result = Error_get_text_result.new()
          result.success = @handler.error_get_text(args.error_code)
          write_result(result, oprot, 'error_get_text', seqid)
        end

        def process_status(seqid, iprot, oprot)
          args = read_args(iprot, Status_args)
          result = Status_result.new()
          begin
            result.success = @handler.status()
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'status', seqid)
        end

        def process_shutdown(seqid, iprot, oprot)
          args = read_args(iprot, Shutdown_args)
          result = Shutdown_result.new()
          begin
            @handler.shutdown()
          rescue ::Hypertable::ThriftGen::ClientException => e
            result.e = e
          end
          write_result(result, oprot, 'shutdown', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Namespace_create_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1

        FIELDS = {
          NS => {:type => ::Thrift::Types::STRING, :name => 'ns'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Namespace_create_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_namespace_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1

        FIELDS = {
          NS => {:type => ::Thrift::Types::STRING, :name => 'ns'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_namespace_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_create_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        SCHEMA = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          SCHEMA => {:type => ::Thrift::Types::STRUCT, :name => 'schema', :class => ::Hypertable::ThriftGen::Schema}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_create_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_alter_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        SCHEMA = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          SCHEMA => {:type => ::Thrift::Types::STRUCT, :name => 'schema', :class => ::Hypertable::ThriftGen::Schema}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_alter_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Refresh_table_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Refresh_table_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Namespace_open_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1

        FIELDS = {
          NS => {:type => ::Thrift::Types::STRING, :name => 'ns'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Namespace_open_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Open_namespace_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1

        FIELDS = {
          NS => {:type => ::Thrift::Types::STRING, :name => 'ns'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Open_namespace_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Namespace_close_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Namespace_close_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Close_namespace_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Close_namespace_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_open_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        CAPACITY = 1

        FIELDS = {
          CAPACITY => {:type => ::Thrift::Types::I32, :name => 'capacity', :default => 0}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_open_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Open_future_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        CAPACITY = 1

        FIELDS = {
          CAPACITY => {:type => ::Thrift::Types::I32, :name => 'capacity', :default => 0}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Open_future_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_cancel_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FF = 1

        FIELDS = {
          FF => {:type => ::Thrift::Types::I64, :name => 'ff'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_cancel_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Cancel_future_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FF = 1

        FIELDS = {
          FF => {:type => ::Thrift::Types::I64, :name => 'ff'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Cancel_future_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_get_result_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FF = 1
        TIMEOUT_MILLIS = 2

        FIELDS = {
          FF => {:type => ::Thrift::Types::I64, :name => 'ff'},
          TIMEOUT_MILLIS => {:type => ::Thrift::Types::I32, :name => 'timeout_millis', :default => 0}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_get_result_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Hypertable::ThriftGen::Result},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_future_result_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FF = 1
        TIMEOUT_MILLIS = 2

        FIELDS = {
          FF => {:type => ::Thrift::Types::I64, :name => 'ff'},
          TIMEOUT_MILLIS => {:type => ::Thrift::Types::I32, :name => 'timeout_millis', :default => 0}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_future_result_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Hypertable::ThriftGen::Result},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_get_result_as_arrays_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FF = 1
        TIMEOUT_MILLIS = 2

        FIELDS = {
          FF => {:type => ::Thrift::Types::I64, :name => 'ff'},
          TIMEOUT_MILLIS => {:type => ::Thrift::Types::I32, :name => 'timeout_millis', :default => 0}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_get_result_as_arrays_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Hypertable::ThriftGen::ResultAsArrays},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_future_result_as_arrays_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FF = 1
        TIMEOUT_MILLIS = 2

        FIELDS = {
          FF => {:type => ::Thrift::Types::I64, :name => 'ff'},
          TIMEOUT_MILLIS => {:type => ::Thrift::Types::I32, :name => 'timeout_millis', :default => 0}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_future_result_as_arrays_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Hypertable::ThriftGen::ResultAsArrays},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_get_result_serialized_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FF = 1
        TIMEOUT_MILLIS = 2

        FIELDS = {
          FF => {:type => ::Thrift::Types::I64, :name => 'ff'},
          TIMEOUT_MILLIS => {:type => ::Thrift::Types::I32, :name => 'timeout_millis', :default => 0}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_get_result_serialized_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Hypertable::ThriftGen::ResultSerialized},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_future_result_serialized_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FF = 1
        TIMEOUT_MILLIS = 2

        FIELDS = {
          FF => {:type => ::Thrift::Types::I64, :name => 'ff'},
          TIMEOUT_MILLIS => {:type => ::Thrift::Types::I32, :name => 'timeout_millis', :default => 0}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_future_result_serialized_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Hypertable::ThriftGen::ResultSerialized},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_is_empty_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FF = 1

        FIELDS = {
          FF => {:type => ::Thrift::Types::I64, :name => 'ff'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_is_empty_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_is_full_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FF = 1

        FIELDS = {
          FF => {:type => ::Thrift::Types::I64, :name => 'ff'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_is_full_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_is_cancelled_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FF = 1

        FIELDS = {
          FF => {:type => ::Thrift::Types::I64, :name => 'ff'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_is_cancelled_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_has_outstanding_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FF = 1

        FIELDS = {
          FF => {:type => ::Thrift::Types::I64, :name => 'ff'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_has_outstanding_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_close_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FF = 1

        FIELDS = {
          FF => {:type => ::Thrift::Types::I64, :name => 'ff'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Future_close_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Close_future_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FF = 1

        FIELDS = {
          FF => {:type => ::Thrift::Types::I64, :name => 'ff'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Close_future_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Scanner_open_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        SCAN_SPEC = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          SCAN_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'scan_spec', :class => ::Hypertable::ThriftGen::ScanSpec}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Scanner_open_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Open_scanner_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        SCAN_SPEC = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          SCAN_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'scan_spec', :class => ::Hypertable::ThriftGen::ScanSpec}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Open_scanner_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_scanner_open_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        FUTURE = 3
        SCAN_SPEC = 4

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          FUTURE => {:type => ::Thrift::Types::I64, :name => 'future'},
          SCAN_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'scan_spec', :class => ::Hypertable::ThriftGen::ScanSpec}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_scanner_open_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Open_scanner_async_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        FUTURE = 3
        SCAN_SPEC = 4

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          FUTURE => {:type => ::Thrift::Types::I64, :name => 'future'},
          SCAN_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'scan_spec', :class => ::Hypertable::ThriftGen::ScanSpec}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Open_scanner_async_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Scanner_close_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCANNER = 1

        FIELDS = {
          SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Scanner_close_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Close_scanner_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCANNER = 1

        FIELDS = {
          SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Close_scanner_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_scanner_cancel_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCANNER = 1

        FIELDS = {
          SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_scanner_cancel_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Cancel_scanner_async_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCANNER = 1

        FIELDS = {
          SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Cancel_scanner_async_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_scanner_close_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCANNER = 1

        FIELDS = {
          SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_scanner_close_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Close_scanner_async_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCANNER = 1

        FIELDS = {
          SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Close_scanner_async_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Scanner_get_cells_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCANNER = 1

        FIELDS = {
          SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Scanner_get_cells_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Hypertable::ThriftGen::Cell}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Next_cells_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCANNER = 1

        FIELDS = {
          SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Next_cells_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Hypertable::ThriftGen::Cell}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Scanner_get_cells_as_arrays_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCANNER = 1

        FIELDS = {
          SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Scanner_get_cells_as_arrays_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Next_cells_as_arrays_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCANNER = 1

        FIELDS = {
          SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Next_cells_as_arrays_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Scanner_get_cells_serialized_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCANNER = 1

        FIELDS = {
          SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Scanner_get_cells_serialized_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Next_cells_serialized_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCANNER = 1

        FIELDS = {
          SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Next_cells_serialized_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Scanner_get_row_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCANNER = 1

        FIELDS = {
          SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Scanner_get_row_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Hypertable::ThriftGen::Cell}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Next_row_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCANNER = 1

        FIELDS = {
          SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Next_row_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Hypertable::ThriftGen::Cell}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Scanner_get_row_as_arrays_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCANNER = 1

        FIELDS = {
          SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Scanner_get_row_as_arrays_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Next_row_as_arrays_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCANNER = 1

        FIELDS = {
          SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Next_row_as_arrays_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Scanner_get_row_serialized_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCANNER = 1

        FIELDS = {
          SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Scanner_get_row_serialized_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Next_row_serialized_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SCANNER = 1

        FIELDS = {
          SCANNER => {:type => ::Thrift::Types::I64, :name => 'scanner'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Next_row_serialized_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_row_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        ROW = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          ROW => {:type => ::Thrift::Types::STRING, :name => 'row'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_row_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Hypertable::ThriftGen::Cell}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_row_as_arrays_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        NAME = 2
        ROW = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          ROW => {:type => ::Thrift::Types::STRING, :name => 'row'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_row_as_arrays_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_row_serialized_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        ROW = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          ROW => {:type => ::Thrift::Types::STRING, :name => 'row'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_row_serialized_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_cell_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        ROW = 3
        COLUMN = 4

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          ROW => {:type => ::Thrift::Types::STRING, :name => 'row'},
          COLUMN => {:type => ::Thrift::Types::STRING, :name => 'column'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_cell_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_cells_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        SCAN_SPEC = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          SCAN_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'scan_spec', :class => ::Hypertable::ThriftGen::ScanSpec}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_cells_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Hypertable::ThriftGen::Cell}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_cells_as_arrays_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        NAME = 2
        SCAN_SPEC = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          SCAN_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'scan_spec', :class => ::Hypertable::ThriftGen::ScanSpec}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_cells_as_arrays_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_cells_serialized_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        NAME = 2
        SCAN_SPEC = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          SCAN_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'scan_spec', :class => ::Hypertable::ThriftGen::ScanSpec}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_cells_serialized_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Shared_mutator_refresh_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        MUTATE_SPEC = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          MUTATE_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'mutate_spec', :class => ::Hypertable::ThriftGen::MutateSpec}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Shared_mutator_refresh_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Refresh_shared_mutator_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        MUTATE_SPEC = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          MUTATE_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'mutate_spec', :class => ::Hypertable::ThriftGen::MutateSpec}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Refresh_shared_mutator_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Shared_mutator_set_cells_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        MUTATE_SPEC = 3
        CELLS = 4

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          MUTATE_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'mutate_spec', :class => ::Hypertable::ThriftGen::MutateSpec},
          CELLS => {:type => ::Thrift::Types::LIST, :name => 'cells', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Hypertable::ThriftGen::Cell}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Shared_mutator_set_cells_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Offer_cells_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        MUTATE_SPEC = 3
        CELLS = 4

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          MUTATE_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'mutate_spec', :class => ::Hypertable::ThriftGen::MutateSpec},
          CELLS => {:type => ::Thrift::Types::LIST, :name => 'cells', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Hypertable::ThriftGen::Cell}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Offer_cells_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Shared_mutator_set_cells_as_arrays_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        MUTATE_SPEC = 3
        CELLS = 4

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          MUTATE_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'mutate_spec', :class => ::Hypertable::ThriftGen::MutateSpec},
          CELLS => {:type => ::Thrift::Types::LIST, :name => 'cells', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Shared_mutator_set_cells_as_arrays_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Offer_cells_as_arrays_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        MUTATE_SPEC = 3
        CELLS = 4

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          MUTATE_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'mutate_spec', :class => ::Hypertable::ThriftGen::MutateSpec},
          CELLS => {:type => ::Thrift::Types::LIST, :name => 'cells', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Offer_cells_as_arrays_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Shared_mutator_set_cell_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        MUTATE_SPEC = 3
        CELL = 4

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          MUTATE_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'mutate_spec', :class => ::Hypertable::ThriftGen::MutateSpec},
          CELL => {:type => ::Thrift::Types::STRUCT, :name => 'cell', :class => ::Hypertable::ThriftGen::Cell}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Shared_mutator_set_cell_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Offer_cell_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        MUTATE_SPEC = 3
        CELL = 4

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          MUTATE_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'mutate_spec', :class => ::Hypertable::ThriftGen::MutateSpec},
          CELL => {:type => ::Thrift::Types::STRUCT, :name => 'cell', :class => ::Hypertable::ThriftGen::Cell}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Offer_cell_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Shared_mutator_set_cell_as_array_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        MUTATE_SPEC = 3
        CELL = 4

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          MUTATE_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'mutate_spec', :class => ::Hypertable::ThriftGen::MutateSpec},
          CELL => {:type => ::Thrift::Types::LIST, :name => 'cell', :element => {:type => ::Thrift::Types::STRING}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Shared_mutator_set_cell_as_array_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Offer_cell_as_array_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        MUTATE_SPEC = 3
        CELL = 4

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          MUTATE_SPEC => {:type => ::Thrift::Types::STRUCT, :name => 'mutate_spec', :class => ::Hypertable::ThriftGen::MutateSpec},
          CELL => {:type => ::Thrift::Types::LIST, :name => 'cell', :element => {:type => ::Thrift::Types::STRING}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Offer_cell_as_array_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Mutator_open_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        FLAGS = 3
        FLUSH_INTERVAL = 4

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          FLAGS => {:type => ::Thrift::Types::I32, :name => 'flags', :default => 0},
          FLUSH_INTERVAL => {:type => ::Thrift::Types::I32, :name => 'flush_interval', :default => 0}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Mutator_open_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Open_mutator_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        FLAGS = 3
        FLUSH_INTERVAL = 4

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          FLAGS => {:type => ::Thrift::Types::I32, :name => 'flags', :default => 0},
          FLUSH_INTERVAL => {:type => ::Thrift::Types::I32, :name => 'flush_interval', :default => 0}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Open_mutator_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_mutator_open_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        FUTURE = 3
        FLAGS = 4

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          FUTURE => {:type => ::Thrift::Types::I64, :name => 'future'},
          FLAGS => {:type => ::Thrift::Types::I32, :name => 'flags', :default => 0}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_mutator_open_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Open_mutator_async_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        FUTURE = 3
        FLAGS = 4

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          FUTURE => {:type => ::Thrift::Types::I64, :name => 'future'},
          FLAGS => {:type => ::Thrift::Types::I32, :name => 'flags', :default => 0}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Open_mutator_async_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Mutator_close_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Mutator_close_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Close_mutator_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Close_mutator_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_mutator_cancel_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_mutator_cancel_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Cancel_mutator_async_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Cancel_mutator_async_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_mutator_close_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_mutator_close_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Close_mutator_async_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Close_mutator_async_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Mutator_set_cell_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1
        CELL = 2

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
          CELL => {:type => ::Thrift::Types::STRUCT, :name => 'cell', :class => ::Hypertable::ThriftGen::Cell}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Mutator_set_cell_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cell_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        CELL = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          CELL => {:type => ::Thrift::Types::STRUCT, :name => 'cell', :class => ::Hypertable::ThriftGen::Cell}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cell_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Mutator_set_cell_as_array_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1
        CELL = 2

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
          CELL => {:type => ::Thrift::Types::LIST, :name => 'cell', :element => {:type => ::Thrift::Types::STRING}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Mutator_set_cell_as_array_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cell_as_array_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        CELL = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          CELL => {:type => ::Thrift::Types::LIST, :name => 'cell', :element => {:type => ::Thrift::Types::STRING}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cell_as_array_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Mutator_set_cells_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1
        CELLS = 2

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
          CELLS => {:type => ::Thrift::Types::LIST, :name => 'cells', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Hypertable::ThriftGen::Cell}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Mutator_set_cells_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cells_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        CELLS = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          CELLS => {:type => ::Thrift::Types::LIST, :name => 'cells', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Hypertable::ThriftGen::Cell}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cells_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Mutator_set_cells_as_arrays_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1
        CELLS = 2

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
          CELLS => {:type => ::Thrift::Types::LIST, :name => 'cells', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Mutator_set_cells_as_arrays_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cells_as_arrays_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        CELLS = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          CELLS => {:type => ::Thrift::Types::LIST, :name => 'cells', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cells_as_arrays_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Mutator_set_cells_serialized_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1
        CELLS = 2
        FLUSH = 3

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
          CELLS => {:type => ::Thrift::Types::STRING, :name => 'cells', :binary => true},
          FLUSH => {:type => ::Thrift::Types::BOOL, :name => 'flush', :default => false}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Mutator_set_cells_serialized_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cells_serialized_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        CELLS = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          CELLS => {:type => ::Thrift::Types::STRING, :name => 'cells', :binary => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cells_serialized_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Mutator_flush_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Mutator_flush_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Flush_mutator_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Flush_mutator_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_mutator_set_cell_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1
        CELL = 2

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
          CELL => {:type => ::Thrift::Types::STRUCT, :name => 'cell', :class => ::Hypertable::ThriftGen::Cell}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_mutator_set_cell_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cell_async_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1
        CELL = 2

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
          CELL => {:type => ::Thrift::Types::STRUCT, :name => 'cell', :class => ::Hypertable::ThriftGen::Cell}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cell_async_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_mutator_set_cell_as_array_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1
        CELL = 2

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
          CELL => {:type => ::Thrift::Types::LIST, :name => 'cell', :element => {:type => ::Thrift::Types::STRING}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_mutator_set_cell_as_array_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cell_as_array_async_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1
        CELL = 2

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
          CELL => {:type => ::Thrift::Types::LIST, :name => 'cell', :element => {:type => ::Thrift::Types::STRING}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cell_as_array_async_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_mutator_set_cells_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1
        CELLS = 2

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
          CELLS => {:type => ::Thrift::Types::LIST, :name => 'cells', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Hypertable::ThriftGen::Cell}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_mutator_set_cells_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cells_async_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1
        CELLS = 2

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
          CELLS => {:type => ::Thrift::Types::LIST, :name => 'cells', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Hypertable::ThriftGen::Cell}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cells_async_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_mutator_set_cells_as_arrays_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1
        CELLS = 2

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
          CELLS => {:type => ::Thrift::Types::LIST, :name => 'cells', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_mutator_set_cells_as_arrays_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cells_as_arrays_async_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1
        CELLS = 2

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
          CELLS => {:type => ::Thrift::Types::LIST, :name => 'cells', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cells_as_arrays_async_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_mutator_set_cells_serialized_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1
        CELLS = 2
        FLUSH = 3

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
          CELLS => {:type => ::Thrift::Types::STRING, :name => 'cells', :binary => true},
          FLUSH => {:type => ::Thrift::Types::BOOL, :name => 'flush', :default => false}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_mutator_set_cells_serialized_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cells_serialized_async_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1
        CELLS = 2
        FLUSH = 3

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'},
          CELLS => {:type => ::Thrift::Types::STRING, :name => 'cells', :binary => true},
          FLUSH => {:type => ::Thrift::Types::BOOL, :name => 'flush', :default => false}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Set_cells_serialized_async_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_mutator_flush_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Async_mutator_flush_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Flush_mutator_async_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MUTATOR = 1

        FIELDS = {
          MUTATOR => {:type => ::Thrift::Types::I64, :name => 'mutator'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Flush_mutator_async_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Namespace_exists_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1

        FIELDS = {
          NS => {:type => ::Thrift::Types::STRING, :name => 'ns'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Namespace_exists_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Exists_namespace_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1

        FIELDS = {
          NS => {:type => ::Thrift::Types::STRING, :name => 'ns'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Exists_namespace_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Exists_table_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        NAME = 2

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Exists_table_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_exists_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        NAME = 2

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_exists_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_get_id_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_get_id_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_table_id_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_table_id_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_get_schema_str_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_get_schema_str_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_schema_str_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_schema_str_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_get_schema_str_with_ids_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_get_schema_str_with_ids_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_schema_str_with_ids_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_schema_str_with_ids_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_get_schema_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_get_schema_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Hypertable::ThriftGen::Schema},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_schema_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_schema_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Hypertable::ThriftGen::Schema},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_tables_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_tables_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Namespace_get_listing_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Namespace_get_listing_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Hypertable::ThriftGen::NamespaceListing}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_listing_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_listing_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Hypertable::ThriftGen::NamespaceListing}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_get_splits_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_get_splits_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Hypertable::ThriftGen::TableSplit}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_table_splits_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_table_splits_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Hypertable::ThriftGen::TableSplit}},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Namespace_drop_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        IF_EXISTS = 2

        FIELDS = {
          NS => {:type => ::Thrift::Types::STRING, :name => 'ns'},
          IF_EXISTS => {:type => ::Thrift::Types::BOOL, :name => 'if_exists', :default => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Namespace_drop_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Drop_namespace_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        IF_EXISTS = 2

        FIELDS = {
          NS => {:type => ::Thrift::Types::STRING, :name => 'ns'},
          IF_EXISTS => {:type => ::Thrift::Types::BOOL, :name => 'if_exists', :default => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Drop_namespace_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Rename_table_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        NAME = 2
        NEW_NAME = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          NEW_NAME => {:type => ::Thrift::Types::STRING, :name => 'new_name'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Rename_table_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_rename_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        NAME = 2
        NEW_NAME = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          NEW_NAME => {:type => ::Thrift::Types::STRING, :name => 'new_name'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_rename_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Drop_table_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        NAME = 2
        IF_EXISTS = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          IF_EXISTS => {:type => ::Thrift::Types::BOOL, :name => 'if_exists', :default => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Drop_table_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_drop_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        NAME = 2
        IF_EXISTS = 3

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          IF_EXISTS => {:type => ::Thrift::Types::BOOL, :name => 'if_exists', :default => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Table_drop_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Generate_guid_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Generate_guid_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_cell_unique_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NS = 1
        TABLE_NAME = 2
        KEY = 3
        VALUE = 4

        FIELDS = {
          NS => {:type => ::Thrift::Types::I64, :name => 'ns'},
          TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
          KEY => {:type => ::Thrift::Types::STRUCT, :name => 'key', :class => ::Hypertable::ThriftGen::Key},
          VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_cell_unique_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Error_get_text_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ERROR_CODE = 1

        FIELDS = {
          ERROR_CODE => {:type => ::Thrift::Types::I32, :name => 'error_code'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Error_get_text_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Status_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Status_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        E = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Hypertable::ThriftGen::Status},
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Shutdown_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Shutdown_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        E = 1

        FIELDS = {
          E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::Hypertable::ThriftGen::ClientException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
