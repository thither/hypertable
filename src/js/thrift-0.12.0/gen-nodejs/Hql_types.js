//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Client_ttypes = require('./Client_types');


var ttypes = module.exports = {};
var HqlResult = module.exports.HqlResult = function(args) {
  this.results = null;
  this.cells = null;
  this.scanner = null;
  this.mutator = null;
  if (args) {
    if (args.results !== undefined && args.results !== null) {
      this.results = Thrift.copyList(args.results, [null]);
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [Client_ttypes.Cell]);
    }
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
HqlResult.prototype = {};
HqlResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.results = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString();
          this.results.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.cells = [];
        var _rtmp35 = input.readListBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          var elem7 = null;
          elem7 = new Client_ttypes.Cell();
          elem7.read(input);
          this.cells.push(elem7);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HqlResult.prototype.write = function(output) {
  output.writeStructBegin('HqlResult');
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.results.length);
    for (var iter8 in this.results) {
      if (this.results.hasOwnProperty(iter8)) {
        iter8 = this.results[iter8];
        output.writeString(iter8);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter9 in this.cells) {
      if (this.cells.hasOwnProperty(iter9)) {
        iter9 = this.cells[iter9];
        iter9.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 3);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 4);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HqlResult2 = module.exports.HqlResult2 = function(args) {
  this.results = null;
  this.cells = null;
  this.scanner = null;
  this.mutator = null;
  if (args) {
    if (args.results !== undefined && args.results !== null) {
      this.results = Thrift.copyList(args.results, [null]);
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [null]);
    }
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
HqlResult2.prototype = {};
HqlResult2.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.results = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = input.readString();
          this.results.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.cells = [];
        var _rtmp315 = input.readListBegin();
        var _size14 = _rtmp315.size || 0;
        for (var _i16 = 0; _i16 < _size14; ++_i16) {
          var elem17 = null;
          elem17 = [];
          var _rtmp319 = input.readListBegin();
          var _size18 = _rtmp319.size || 0;
          for (var _i20 = 0; _i20 < _size18; ++_i20) {
            var elem21 = null;
            elem21 = input.readString();
            elem17.push(elem21);
          }
          input.readListEnd();
          this.cells.push(elem17);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HqlResult2.prototype.write = function(output) {
  output.writeStructBegin('HqlResult2');
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.results.length);
    for (var iter22 in this.results) {
      if (this.results.hasOwnProperty(iter22)) {
        iter22 = this.results[iter22];
        output.writeString(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.cells.length);
    for (var iter23 in this.cells) {
      if (this.cells.hasOwnProperty(iter23)) {
        iter23 = this.cells[iter23];
        output.writeListBegin(Thrift.Type.STRING, iter23.length);
        for (var iter24 in iter23) {
          if (iter23.hasOwnProperty(iter24)) {
            iter24 = iter23[iter24];
            output.writeString(iter24);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 3);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 4);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HqlResultAsArrays = module.exports.HqlResultAsArrays = function(args) {
  this.results = null;
  this.cells = null;
  this.scanner = null;
  this.mutator = null;
  if (args) {
    if (args.results !== undefined && args.results !== null) {
      this.results = Thrift.copyList(args.results, [null]);
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [null]);
    }
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
HqlResultAsArrays.prototype = {};
HqlResultAsArrays.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.results = [];
        var _rtmp326 = input.readListBegin();
        var _size25 = _rtmp326.size || 0;
        for (var _i27 = 0; _i27 < _size25; ++_i27) {
          var elem28 = null;
          elem28 = input.readString();
          this.results.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.cells = [];
        var _rtmp330 = input.readListBegin();
        var _size29 = _rtmp330.size || 0;
        for (var _i31 = 0; _i31 < _size29; ++_i31) {
          var elem32 = null;
          elem32 = [];
          var _rtmp334 = input.readListBegin();
          var _size33 = _rtmp334.size || 0;
          for (var _i35 = 0; _i35 < _size33; ++_i35) {
            var elem36 = null;
            elem36 = input.readString();
            elem32.push(elem36);
          }
          input.readListEnd();
          this.cells.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HqlResultAsArrays.prototype.write = function(output) {
  output.writeStructBegin('HqlResultAsArrays');
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.results.length);
    for (var iter37 in this.results) {
      if (this.results.hasOwnProperty(iter37)) {
        iter37 = this.results[iter37];
        output.writeString(iter37);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.cells.length);
    for (var iter38 in this.cells) {
      if (this.cells.hasOwnProperty(iter38)) {
        iter38 = this.cells[iter38];
        output.writeListBegin(Thrift.Type.STRING, iter38.length);
        for (var iter39 in iter38) {
          if (iter38.hasOwnProperty(iter39)) {
            iter39 = iter38[iter39];
            output.writeString(iter39);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 3);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 4);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

