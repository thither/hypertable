//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./Client_types');
//HELPER FUNCTIONS AND STRUCTURES

var ClientService_namespace_create_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_namespace_create_args.prototype = {};
ClientService_namespace_create_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_create_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_create_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_namespace_create_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_namespace_create_result.prototype = {};
ClientService_namespace_create_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_create_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_create_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_create_namespace_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_create_namespace_args.prototype = {};
ClientService_create_namespace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_create_namespace_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_create_namespace_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_create_namespace_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_create_namespace_result.prototype = {};
ClientService_create_namespace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_create_namespace_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_create_namespace_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_create_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.schema = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.schema !== undefined && args.schema !== null) {
      this.schema = new ttypes.Schema(args.schema);
    }
  }
};
ClientService_table_create_args.prototype = {};
ClientService_table_create_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.schema = new ttypes.Schema();
        this.schema.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_create_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_create_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.STRUCT, 3);
    this.schema.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_create_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_create_result.prototype = {};
ClientService_table_create_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_create_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_create_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_alter_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.schema = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.schema !== undefined && args.schema !== null) {
      this.schema = new ttypes.Schema(args.schema);
    }
  }
};
ClientService_table_alter_args.prototype = {};
ClientService_table_alter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.schema = new ttypes.Schema();
        this.schema.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_alter_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_alter_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.STRUCT, 3);
    this.schema.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_alter_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_alter_result.prototype = {};
ClientService_table_alter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_alter_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_alter_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_refresh_table_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_refresh_table_args.prototype = {};
ClientService_refresh_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_refresh_table_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_refresh_table_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_refresh_table_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_refresh_table_result.prototype = {};
ClientService_refresh_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_refresh_table_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_refresh_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_namespace_open_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_namespace_open_args.prototype = {};
ClientService_namespace_open_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_open_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_open_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_namespace_open_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_namespace_open_result.prototype = {};
ClientService_namespace_open_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_open_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_open_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_open_namespace_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_open_namespace_args.prototype = {};
ClientService_open_namespace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_namespace_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_namespace_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_open_namespace_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_open_namespace_result.prototype = {};
ClientService_open_namespace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_namespace_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_namespace_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_namespace_close_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_namespace_close_args.prototype = {};
ClientService_namespace_close_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_close_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_close_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_namespace_close_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_namespace_close_result.prototype = {};
ClientService_namespace_close_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_close_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_close_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_close_namespace_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_close_namespace_args.prototype = {};
ClientService_close_namespace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_namespace_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_namespace_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_close_namespace_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_close_namespace_result.prototype = {};
ClientService_close_namespace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_namespace_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_namespace_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_open_args = function(args) {
  this.capacity = 0;
  if (args) {
    if (args.capacity !== undefined && args.capacity !== null) {
      this.capacity = args.capacity;
    }
  }
};
ClientService_future_open_args.prototype = {};
ClientService_future_open_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.capacity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_open_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_open_args');
  if (this.capacity !== null && this.capacity !== undefined) {
    output.writeFieldBegin('capacity', Thrift.Type.I32, 1);
    output.writeI32(this.capacity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_open_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_open_result.prototype = {};
ClientService_future_open_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_open_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_open_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_open_future_args = function(args) {
  this.capacity = 0;
  if (args) {
    if (args.capacity !== undefined && args.capacity !== null) {
      this.capacity = args.capacity;
    }
  }
};
ClientService_open_future_args.prototype = {};
ClientService_open_future_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.capacity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_future_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_future_args');
  if (this.capacity !== null && this.capacity !== undefined) {
    output.writeFieldBegin('capacity', Thrift.Type.I32, 1);
    output.writeI32(this.capacity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_open_future_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_open_future_result.prototype = {};
ClientService_open_future_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_future_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_future_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_cancel_args = function(args) {
  this.ff = null;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
  }
};
ClientService_future_cancel_args.prototype = {};
ClientService_future_cancel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_cancel_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_cancel_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_cancel_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_cancel_result.prototype = {};
ClientService_future_cancel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_cancel_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_cancel_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_cancel_future_args = function(args) {
  this.ff = null;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
  }
};
ClientService_cancel_future_args.prototype = {};
ClientService_cancel_future_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_cancel_future_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_cancel_future_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_cancel_future_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_cancel_future_result.prototype = {};
ClientService_cancel_future_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_cancel_future_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_cancel_future_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_get_result_args = function(args) {
  this.ff = null;
  this.timeout_millis = 0;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
    if (args.timeout_millis !== undefined && args.timeout_millis !== null) {
      this.timeout_millis = args.timeout_millis;
    }
  }
};
ClientService_future_get_result_args.prototype = {};
ClientService_future_get_result_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timeout_millis = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_get_result_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_get_result_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  if (this.timeout_millis !== null && this.timeout_millis !== undefined) {
    output.writeFieldBegin('timeout_millis', Thrift.Type.I32, 2);
    output.writeI32(this.timeout_millis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_get_result_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Result(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_get_result_result.prototype = {};
ClientService_future_get_result_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_get_result_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_get_result_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_future_result_args = function(args) {
  this.ff = null;
  this.timeout_millis = 0;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
    if (args.timeout_millis !== undefined && args.timeout_millis !== null) {
      this.timeout_millis = args.timeout_millis;
    }
  }
};
ClientService_get_future_result_args.prototype = {};
ClientService_get_future_result_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timeout_millis = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_future_result_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_future_result_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  if (this.timeout_millis !== null && this.timeout_millis !== undefined) {
    output.writeFieldBegin('timeout_millis', Thrift.Type.I32, 2);
    output.writeI32(this.timeout_millis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_future_result_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Result(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_future_result_result.prototype = {};
ClientService_get_future_result_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_future_result_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_future_result_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_get_result_as_arrays_args = function(args) {
  this.ff = null;
  this.timeout_millis = 0;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
    if (args.timeout_millis !== undefined && args.timeout_millis !== null) {
      this.timeout_millis = args.timeout_millis;
    }
  }
};
ClientService_future_get_result_as_arrays_args.prototype = {};
ClientService_future_get_result_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timeout_millis = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_get_result_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_get_result_as_arrays_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  if (this.timeout_millis !== null && this.timeout_millis !== undefined) {
    output.writeFieldBegin('timeout_millis', Thrift.Type.I32, 2);
    output.writeI32(this.timeout_millis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_get_result_as_arrays_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ResultAsArrays(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_get_result_as_arrays_result.prototype = {};
ClientService_future_get_result_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ResultAsArrays();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_get_result_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_get_result_as_arrays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_future_result_as_arrays_args = function(args) {
  this.ff = null;
  this.timeout_millis = 0;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
    if (args.timeout_millis !== undefined && args.timeout_millis !== null) {
      this.timeout_millis = args.timeout_millis;
    }
  }
};
ClientService_get_future_result_as_arrays_args.prototype = {};
ClientService_get_future_result_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timeout_millis = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_future_result_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_future_result_as_arrays_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  if (this.timeout_millis !== null && this.timeout_millis !== undefined) {
    output.writeFieldBegin('timeout_millis', Thrift.Type.I32, 2);
    output.writeI32(this.timeout_millis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_future_result_as_arrays_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ResultAsArrays(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_future_result_as_arrays_result.prototype = {};
ClientService_get_future_result_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ResultAsArrays();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_future_result_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_future_result_as_arrays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_get_result_serialized_args = function(args) {
  this.ff = null;
  this.timeout_millis = 0;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
    if (args.timeout_millis !== undefined && args.timeout_millis !== null) {
      this.timeout_millis = args.timeout_millis;
    }
  }
};
ClientService_future_get_result_serialized_args.prototype = {};
ClientService_future_get_result_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timeout_millis = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_get_result_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_get_result_serialized_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  if (this.timeout_millis !== null && this.timeout_millis !== undefined) {
    output.writeFieldBegin('timeout_millis', Thrift.Type.I32, 2);
    output.writeI32(this.timeout_millis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_get_result_serialized_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ResultSerialized(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_get_result_serialized_result.prototype = {};
ClientService_future_get_result_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ResultSerialized();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_get_result_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_get_result_serialized_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_future_result_serialized_args = function(args) {
  this.ff = null;
  this.timeout_millis = 0;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
    if (args.timeout_millis !== undefined && args.timeout_millis !== null) {
      this.timeout_millis = args.timeout_millis;
    }
  }
};
ClientService_get_future_result_serialized_args.prototype = {};
ClientService_get_future_result_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timeout_millis = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_future_result_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_future_result_serialized_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  if (this.timeout_millis !== null && this.timeout_millis !== undefined) {
    output.writeFieldBegin('timeout_millis', Thrift.Type.I32, 2);
    output.writeI32(this.timeout_millis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_future_result_serialized_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ResultSerialized(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_future_result_serialized_result.prototype = {};
ClientService_get_future_result_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ResultSerialized();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_future_result_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_future_result_serialized_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_is_empty_args = function(args) {
  this.ff = null;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
  }
};
ClientService_future_is_empty_args.prototype = {};
ClientService_future_is_empty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_is_empty_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_is_empty_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_is_empty_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_is_empty_result.prototype = {};
ClientService_future_is_empty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_is_empty_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_is_empty_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_is_full_args = function(args) {
  this.ff = null;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
  }
};
ClientService_future_is_full_args.prototype = {};
ClientService_future_is_full_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_is_full_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_is_full_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_is_full_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_is_full_result.prototype = {};
ClientService_future_is_full_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_is_full_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_is_full_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_is_cancelled_args = function(args) {
  this.ff = null;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
  }
};
ClientService_future_is_cancelled_args.prototype = {};
ClientService_future_is_cancelled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_is_cancelled_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_is_cancelled_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_is_cancelled_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_is_cancelled_result.prototype = {};
ClientService_future_is_cancelled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_is_cancelled_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_is_cancelled_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_has_outstanding_args = function(args) {
  this.ff = null;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
  }
};
ClientService_future_has_outstanding_args.prototype = {};
ClientService_future_has_outstanding_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_has_outstanding_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_has_outstanding_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_has_outstanding_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_has_outstanding_result.prototype = {};
ClientService_future_has_outstanding_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_has_outstanding_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_has_outstanding_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_close_args = function(args) {
  this.ff = null;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
  }
};
ClientService_future_close_args.prototype = {};
ClientService_future_close_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_close_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_close_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_future_close_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_close_result.prototype = {};
ClientService_future_close_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_close_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_close_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_close_future_args = function(args) {
  this.ff = null;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
  }
};
ClientService_close_future_args.prototype = {};
ClientService_close_future_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_future_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_future_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_close_future_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_close_future_result.prototype = {};
ClientService_close_future_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_future_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_future_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_scanner_open_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.scan_spec = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.scan_spec !== undefined && args.scan_spec !== null) {
      this.scan_spec = new ttypes.ScanSpec(args.scan_spec);
    }
  }
};
ClientService_scanner_open_args.prototype = {};
ClientService_scanner_open_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan_spec = new ttypes.ScanSpec();
        this.scan_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_open_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_open_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.scan_spec !== null && this.scan_spec !== undefined) {
    output.writeFieldBegin('scan_spec', Thrift.Type.STRUCT, 3);
    this.scan_spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_scanner_open_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_scanner_open_result.prototype = {};
ClientService_scanner_open_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_open_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_open_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_open_scanner_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.scan_spec = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.scan_spec !== undefined && args.scan_spec !== null) {
      this.scan_spec = new ttypes.ScanSpec(args.scan_spec);
    }
  }
};
ClientService_open_scanner_args.prototype = {};
ClientService_open_scanner_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan_spec = new ttypes.ScanSpec();
        this.scan_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_scanner_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_scanner_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.scan_spec !== null && this.scan_spec !== undefined) {
    output.writeFieldBegin('scan_spec', Thrift.Type.STRUCT, 3);
    this.scan_spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_open_scanner_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_open_scanner_result.prototype = {};
ClientService_open_scanner_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_scanner_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_scanner_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_scanner_open_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.future = null;
  this.scan_spec = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.future !== undefined && args.future !== null) {
      this.future = args.future;
    }
    if (args.scan_spec !== undefined && args.scan_spec !== null) {
      this.scan_spec = new ttypes.ScanSpec(args.scan_spec);
    }
  }
};
ClientService_async_scanner_open_args.prototype = {};
ClientService_async_scanner_open_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.future = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan_spec = new ttypes.ScanSpec();
        this.scan_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_scanner_open_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_scanner_open_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.future !== null && this.future !== undefined) {
    output.writeFieldBegin('future', Thrift.Type.I64, 3);
    output.writeI64(this.future);
    output.writeFieldEnd();
  }
  if (this.scan_spec !== null && this.scan_spec !== undefined) {
    output.writeFieldBegin('scan_spec', Thrift.Type.STRUCT, 4);
    this.scan_spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_scanner_open_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_scanner_open_result.prototype = {};
ClientService_async_scanner_open_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_scanner_open_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_scanner_open_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_open_scanner_async_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.future = null;
  this.scan_spec = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.future !== undefined && args.future !== null) {
      this.future = args.future;
    }
    if (args.scan_spec !== undefined && args.scan_spec !== null) {
      this.scan_spec = new ttypes.ScanSpec(args.scan_spec);
    }
  }
};
ClientService_open_scanner_async_args.prototype = {};
ClientService_open_scanner_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.future = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan_spec = new ttypes.ScanSpec();
        this.scan_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_scanner_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_scanner_async_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.future !== null && this.future !== undefined) {
    output.writeFieldBegin('future', Thrift.Type.I64, 3);
    output.writeI64(this.future);
    output.writeFieldEnd();
  }
  if (this.scan_spec !== null && this.scan_spec !== undefined) {
    output.writeFieldBegin('scan_spec', Thrift.Type.STRUCT, 4);
    this.scan_spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_open_scanner_async_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_open_scanner_async_result.prototype = {};
ClientService_open_scanner_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_scanner_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_scanner_async_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_scanner_close_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_scanner_close_args.prototype = {};
ClientService_scanner_close_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_close_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_close_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_scanner_close_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_scanner_close_result.prototype = {};
ClientService_scanner_close_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_close_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_close_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_close_scanner_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_close_scanner_args.prototype = {};
ClientService_close_scanner_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_scanner_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_scanner_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_close_scanner_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_close_scanner_result.prototype = {};
ClientService_close_scanner_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_scanner_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_scanner_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_scanner_cancel_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_async_scanner_cancel_args.prototype = {};
ClientService_async_scanner_cancel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_scanner_cancel_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_scanner_cancel_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_scanner_cancel_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_scanner_cancel_result.prototype = {};
ClientService_async_scanner_cancel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_scanner_cancel_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_scanner_cancel_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_cancel_scanner_async_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_cancel_scanner_async_args.prototype = {};
ClientService_cancel_scanner_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_cancel_scanner_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_cancel_scanner_async_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_cancel_scanner_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_cancel_scanner_async_result.prototype = {};
ClientService_cancel_scanner_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_cancel_scanner_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_cancel_scanner_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_scanner_close_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_async_scanner_close_args.prototype = {};
ClientService_async_scanner_close_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_scanner_close_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_scanner_close_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_scanner_close_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_scanner_close_result.prototype = {};
ClientService_async_scanner_close_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_scanner_close_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_scanner_close_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_close_scanner_async_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_close_scanner_async_args.prototype = {};
ClientService_close_scanner_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_scanner_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_scanner_async_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_close_scanner_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_close_scanner_async_result.prototype = {};
ClientService_close_scanner_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_scanner_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_scanner_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_scanner_get_cells_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_scanner_get_cells_args.prototype = {};
ClientService_scanner_get_cells_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_cells_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_cells_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_scanner_get_cells_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Cell]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_scanner_get_cells_result.prototype = {};
ClientService_scanner_get_cells_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp350 = input.readListBegin();
        var _size49 = _rtmp350.size || 0;
        for (var _i51 = 0; _i51 < _size49; ++_i51) {
          var elem52 = null;
          elem52 = new ttypes.Cell();
          elem52.read(input);
          this.success.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_cells_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_cells_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter53 in this.success) {
      if (this.success.hasOwnProperty(iter53)) {
        iter53 = this.success[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_next_cells_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_next_cells_args.prototype = {};
ClientService_next_cells_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_cells_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_cells_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_next_cells_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Cell]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_next_cells_result.prototype = {};
ClientService_next_cells_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp355 = input.readListBegin();
        var _size54 = _rtmp355.size || 0;
        for (var _i56 = 0; _i56 < _size54; ++_i56) {
          var elem57 = null;
          elem57 = new ttypes.Cell();
          elem57.read(input);
          this.success.push(elem57);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_cells_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_cells_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter58 in this.success) {
      if (this.success.hasOwnProperty(iter58)) {
        iter58 = this.success[iter58];
        iter58.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_scanner_get_cells_as_arrays_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_scanner_get_cells_as_arrays_args.prototype = {};
ClientService_scanner_get_cells_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_cells_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_cells_as_arrays_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_scanner_get_cells_as_arrays_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_scanner_get_cells_as_arrays_result.prototype = {};
ClientService_scanner_get_cells_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp360 = input.readListBegin();
        var _size59 = _rtmp360.size || 0;
        for (var _i61 = 0; _i61 < _size59; ++_i61) {
          var elem62 = null;
          elem62 = [];
          var _rtmp364 = input.readListBegin();
          var _size63 = _rtmp364.size || 0;
          for (var _i65 = 0; _i65 < _size63; ++_i65) {
            var elem66 = null;
            elem66 = input.readString();
            elem62.push(elem66);
          }
          input.readListEnd();
          this.success.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_cells_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_cells_as_arrays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.LIST, this.success.length);
    for (var iter67 in this.success) {
      if (this.success.hasOwnProperty(iter67)) {
        iter67 = this.success[iter67];
        output.writeListBegin(Thrift.Type.STRING, iter67.length);
        for (var iter68 in iter67) {
          if (iter67.hasOwnProperty(iter68)) {
            iter68 = iter67[iter68];
            output.writeString(iter68);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_next_cells_as_arrays_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_next_cells_as_arrays_args.prototype = {};
ClientService_next_cells_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_cells_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_cells_as_arrays_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_next_cells_as_arrays_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_next_cells_as_arrays_result.prototype = {};
ClientService_next_cells_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp370 = input.readListBegin();
        var _size69 = _rtmp370.size || 0;
        for (var _i71 = 0; _i71 < _size69; ++_i71) {
          var elem72 = null;
          elem72 = [];
          var _rtmp374 = input.readListBegin();
          var _size73 = _rtmp374.size || 0;
          for (var _i75 = 0; _i75 < _size73; ++_i75) {
            var elem76 = null;
            elem76 = input.readString();
            elem72.push(elem76);
          }
          input.readListEnd();
          this.success.push(elem72);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_cells_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_cells_as_arrays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.LIST, this.success.length);
    for (var iter77 in this.success) {
      if (this.success.hasOwnProperty(iter77)) {
        iter77 = this.success[iter77];
        output.writeListBegin(Thrift.Type.STRING, iter77.length);
        for (var iter78 in iter77) {
          if (iter77.hasOwnProperty(iter78)) {
            iter78 = iter77[iter78];
            output.writeString(iter78);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_scanner_get_cells_serialized_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_scanner_get_cells_serialized_args.prototype = {};
ClientService_scanner_get_cells_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_cells_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_cells_serialized_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_scanner_get_cells_serialized_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_scanner_get_cells_serialized_result.prototype = {};
ClientService_scanner_get_cells_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_cells_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_cells_serialized_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_next_cells_serialized_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_next_cells_serialized_args.prototype = {};
ClientService_next_cells_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_cells_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_cells_serialized_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_next_cells_serialized_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_next_cells_serialized_result.prototype = {};
ClientService_next_cells_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_cells_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_cells_serialized_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_scanner_get_row_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_scanner_get_row_args.prototype = {};
ClientService_scanner_get_row_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_row_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_row_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_scanner_get_row_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Cell]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_scanner_get_row_result.prototype = {};
ClientService_scanner_get_row_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp380 = input.readListBegin();
        var _size79 = _rtmp380.size || 0;
        for (var _i81 = 0; _i81 < _size79; ++_i81) {
          var elem82 = null;
          elem82 = new ttypes.Cell();
          elem82.read(input);
          this.success.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_row_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_row_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter83 in this.success) {
      if (this.success.hasOwnProperty(iter83)) {
        iter83 = this.success[iter83];
        iter83.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_next_row_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_next_row_args.prototype = {};
ClientService_next_row_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_row_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_row_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_next_row_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Cell]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_next_row_result.prototype = {};
ClientService_next_row_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp385 = input.readListBegin();
        var _size84 = _rtmp385.size || 0;
        for (var _i86 = 0; _i86 < _size84; ++_i86) {
          var elem87 = null;
          elem87 = new ttypes.Cell();
          elem87.read(input);
          this.success.push(elem87);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_row_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_row_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter88 in this.success) {
      if (this.success.hasOwnProperty(iter88)) {
        iter88 = this.success[iter88];
        iter88.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_scanner_get_row_as_arrays_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_scanner_get_row_as_arrays_args.prototype = {};
ClientService_scanner_get_row_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_row_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_row_as_arrays_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_scanner_get_row_as_arrays_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_scanner_get_row_as_arrays_result.prototype = {};
ClientService_scanner_get_row_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp390 = input.readListBegin();
        var _size89 = _rtmp390.size || 0;
        for (var _i91 = 0; _i91 < _size89; ++_i91) {
          var elem92 = null;
          elem92 = [];
          var _rtmp394 = input.readListBegin();
          var _size93 = _rtmp394.size || 0;
          for (var _i95 = 0; _i95 < _size93; ++_i95) {
            var elem96 = null;
            elem96 = input.readString();
            elem92.push(elem96);
          }
          input.readListEnd();
          this.success.push(elem92);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_row_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_row_as_arrays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.LIST, this.success.length);
    for (var iter97 in this.success) {
      if (this.success.hasOwnProperty(iter97)) {
        iter97 = this.success[iter97];
        output.writeListBegin(Thrift.Type.STRING, iter97.length);
        for (var iter98 in iter97) {
          if (iter97.hasOwnProperty(iter98)) {
            iter98 = iter97[iter98];
            output.writeString(iter98);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_next_row_as_arrays_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_next_row_as_arrays_args.prototype = {};
ClientService_next_row_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_row_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_row_as_arrays_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_next_row_as_arrays_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_next_row_as_arrays_result.prototype = {};
ClientService_next_row_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3100 = input.readListBegin();
        var _size99 = _rtmp3100.size || 0;
        for (var _i101 = 0; _i101 < _size99; ++_i101) {
          var elem102 = null;
          elem102 = [];
          var _rtmp3104 = input.readListBegin();
          var _size103 = _rtmp3104.size || 0;
          for (var _i105 = 0; _i105 < _size103; ++_i105) {
            var elem106 = null;
            elem106 = input.readString();
            elem102.push(elem106);
          }
          input.readListEnd();
          this.success.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_row_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_row_as_arrays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.LIST, this.success.length);
    for (var iter107 in this.success) {
      if (this.success.hasOwnProperty(iter107)) {
        iter107 = this.success[iter107];
        output.writeListBegin(Thrift.Type.STRING, iter107.length);
        for (var iter108 in iter107) {
          if (iter107.hasOwnProperty(iter108)) {
            iter108 = iter107[iter108];
            output.writeString(iter108);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_scanner_get_row_serialized_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_scanner_get_row_serialized_args.prototype = {};
ClientService_scanner_get_row_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_row_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_row_serialized_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_scanner_get_row_serialized_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_scanner_get_row_serialized_result.prototype = {};
ClientService_scanner_get_row_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_row_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_row_serialized_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_next_row_serialized_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_next_row_serialized_args.prototype = {};
ClientService_next_row_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_row_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_row_serialized_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_next_row_serialized_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_next_row_serialized_result.prototype = {};
ClientService_next_row_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_row_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_row_serialized_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_row_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.row = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
  }
};
ClientService_get_row_args.prototype = {};
ClientService_get_row_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_row_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_row_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 3);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_row_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Cell]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_row_result.prototype = {};
ClientService_get_row_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3110 = input.readListBegin();
        var _size109 = _rtmp3110.size || 0;
        for (var _i111 = 0; _i111 < _size109; ++_i111) {
          var elem112 = null;
          elem112 = new ttypes.Cell();
          elem112.read(input);
          this.success.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_row_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_row_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter113 in this.success) {
      if (this.success.hasOwnProperty(iter113)) {
        iter113 = this.success[iter113];
        iter113.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_row_as_arrays_args = function(args) {
  this.ns = null;
  this.name = null;
  this.row = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
  }
};
ClientService_get_row_as_arrays_args.prototype = {};
ClientService_get_row_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_row_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_row_as_arrays_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 3);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_row_as_arrays_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_row_as_arrays_result.prototype = {};
ClientService_get_row_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3115 = input.readListBegin();
        var _size114 = _rtmp3115.size || 0;
        for (var _i116 = 0; _i116 < _size114; ++_i116) {
          var elem117 = null;
          elem117 = [];
          var _rtmp3119 = input.readListBegin();
          var _size118 = _rtmp3119.size || 0;
          for (var _i120 = 0; _i120 < _size118; ++_i120) {
            var elem121 = null;
            elem121 = input.readString();
            elem117.push(elem121);
          }
          input.readListEnd();
          this.success.push(elem117);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_row_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_row_as_arrays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.LIST, this.success.length);
    for (var iter122 in this.success) {
      if (this.success.hasOwnProperty(iter122)) {
        iter122 = this.success[iter122];
        output.writeListBegin(Thrift.Type.STRING, iter122.length);
        for (var iter123 in iter122) {
          if (iter122.hasOwnProperty(iter123)) {
            iter123 = iter122[iter123];
            output.writeString(iter123);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_row_serialized_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.row = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
  }
};
ClientService_get_row_serialized_args.prototype = {};
ClientService_get_row_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_row_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_row_serialized_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 3);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_row_serialized_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_row_serialized_result.prototype = {};
ClientService_get_row_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_row_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_row_serialized_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_cell_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.row = null;
  this.column = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.column !== undefined && args.column !== null) {
      this.column = args.column;
    }
  }
};
ClientService_get_cell_args.prototype = {};
ClientService_get_cell_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_cell_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_cell_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 3);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 4);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_cell_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_cell_result.prototype = {};
ClientService_get_cell_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_cell_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_cell_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_cells_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.scan_spec = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.scan_spec !== undefined && args.scan_spec !== null) {
      this.scan_spec = new ttypes.ScanSpec(args.scan_spec);
    }
  }
};
ClientService_get_cells_args.prototype = {};
ClientService_get_cells_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan_spec = new ttypes.ScanSpec();
        this.scan_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_cells_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_cells_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.scan_spec !== null && this.scan_spec !== undefined) {
    output.writeFieldBegin('scan_spec', Thrift.Type.STRUCT, 3);
    this.scan_spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_cells_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Cell]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_cells_result.prototype = {};
ClientService_get_cells_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3125 = input.readListBegin();
        var _size124 = _rtmp3125.size || 0;
        for (var _i126 = 0; _i126 < _size124; ++_i126) {
          var elem127 = null;
          elem127 = new ttypes.Cell();
          elem127.read(input);
          this.success.push(elem127);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_cells_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_cells_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter128 in this.success) {
      if (this.success.hasOwnProperty(iter128)) {
        iter128 = this.success[iter128];
        iter128.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_cells_as_arrays_args = function(args) {
  this.ns = null;
  this.name = null;
  this.scan_spec = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.scan_spec !== undefined && args.scan_spec !== null) {
      this.scan_spec = new ttypes.ScanSpec(args.scan_spec);
    }
  }
};
ClientService_get_cells_as_arrays_args.prototype = {};
ClientService_get_cells_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan_spec = new ttypes.ScanSpec();
        this.scan_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_cells_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_cells_as_arrays_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.scan_spec !== null && this.scan_spec !== undefined) {
    output.writeFieldBegin('scan_spec', Thrift.Type.STRUCT, 3);
    this.scan_spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_cells_as_arrays_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_cells_as_arrays_result.prototype = {};
ClientService_get_cells_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3130 = input.readListBegin();
        var _size129 = _rtmp3130.size || 0;
        for (var _i131 = 0; _i131 < _size129; ++_i131) {
          var elem132 = null;
          elem132 = [];
          var _rtmp3134 = input.readListBegin();
          var _size133 = _rtmp3134.size || 0;
          for (var _i135 = 0; _i135 < _size133; ++_i135) {
            var elem136 = null;
            elem136 = input.readString();
            elem132.push(elem136);
          }
          input.readListEnd();
          this.success.push(elem132);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_cells_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_cells_as_arrays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.LIST, this.success.length);
    for (var iter137 in this.success) {
      if (this.success.hasOwnProperty(iter137)) {
        iter137 = this.success[iter137];
        output.writeListBegin(Thrift.Type.STRING, iter137.length);
        for (var iter138 in iter137) {
          if (iter137.hasOwnProperty(iter138)) {
            iter138 = iter137[iter138];
            output.writeString(iter138);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_cells_serialized_args = function(args) {
  this.ns = null;
  this.name = null;
  this.scan_spec = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.scan_spec !== undefined && args.scan_spec !== null) {
      this.scan_spec = new ttypes.ScanSpec(args.scan_spec);
    }
  }
};
ClientService_get_cells_serialized_args.prototype = {};
ClientService_get_cells_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan_spec = new ttypes.ScanSpec();
        this.scan_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_cells_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_cells_serialized_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.scan_spec !== null && this.scan_spec !== undefined) {
    output.writeFieldBegin('scan_spec', Thrift.Type.STRUCT, 3);
    this.scan_spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_cells_serialized_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_cells_serialized_result.prototype = {};
ClientService_get_cells_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_cells_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_cells_serialized_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_shared_mutator_refresh_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
  }
};
ClientService_shared_mutator_refresh_args.prototype = {};
ClientService_shared_mutator_refresh_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_refresh_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_refresh_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_shared_mutator_refresh_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_shared_mutator_refresh_result.prototype = {};
ClientService_shared_mutator_refresh_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_refresh_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_refresh_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_refresh_shared_mutator_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
  }
};
ClientService_refresh_shared_mutator_args.prototype = {};
ClientService_refresh_shared_mutator_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_refresh_shared_mutator_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_refresh_shared_mutator_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_refresh_shared_mutator_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_refresh_shared_mutator_result.prototype = {};
ClientService_refresh_shared_mutator_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_refresh_shared_mutator_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_refresh_shared_mutator_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_shared_mutator_set_cells_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  this.cells = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [ttypes.Cell]);
    }
  }
};
ClientService_shared_mutator_set_cells_args.prototype = {};
ClientService_shared_mutator_set_cells_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.cells = [];
        var _rtmp3140 = input.readListBegin();
        var _size139 = _rtmp3140.size || 0;
        for (var _i141 = 0; _i141 < _size139; ++_i141) {
          var elem142 = null;
          elem142 = new ttypes.Cell();
          elem142.read(input);
          this.cells.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_set_cells_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_set_cells_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter143 in this.cells) {
      if (this.cells.hasOwnProperty(iter143)) {
        iter143 = this.cells[iter143];
        iter143.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_shared_mutator_set_cells_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_shared_mutator_set_cells_result.prototype = {};
ClientService_shared_mutator_set_cells_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_set_cells_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_set_cells_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_offer_cells_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  this.cells = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [ttypes.Cell]);
    }
  }
};
ClientService_offer_cells_args.prototype = {};
ClientService_offer_cells_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.cells = [];
        var _rtmp3145 = input.readListBegin();
        var _size144 = _rtmp3145.size || 0;
        for (var _i146 = 0; _i146 < _size144; ++_i146) {
          var elem147 = null;
          elem147 = new ttypes.Cell();
          elem147.read(input);
          this.cells.push(elem147);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_offer_cells_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_offer_cells_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter148 in this.cells) {
      if (this.cells.hasOwnProperty(iter148)) {
        iter148 = this.cells[iter148];
        iter148.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_offer_cells_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_offer_cells_result.prototype = {};
ClientService_offer_cells_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_offer_cells_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_offer_cells_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_shared_mutator_set_cells_as_arrays_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  this.cells = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [null]);
    }
  }
};
ClientService_shared_mutator_set_cells_as_arrays_args.prototype = {};
ClientService_shared_mutator_set_cells_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.cells = [];
        var _rtmp3150 = input.readListBegin();
        var _size149 = _rtmp3150.size || 0;
        for (var _i151 = 0; _i151 < _size149; ++_i151) {
          var elem152 = null;
          elem152 = [];
          var _rtmp3154 = input.readListBegin();
          var _size153 = _rtmp3154.size || 0;
          for (var _i155 = 0; _i155 < _size153; ++_i155) {
            var elem156 = null;
            elem156 = input.readString();
            elem152.push(elem156);
          }
          input.readListEnd();
          this.cells.push(elem152);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_set_cells_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_set_cells_as_arrays_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.LIST, this.cells.length);
    for (var iter157 in this.cells) {
      if (this.cells.hasOwnProperty(iter157)) {
        iter157 = this.cells[iter157];
        output.writeListBegin(Thrift.Type.STRING, iter157.length);
        for (var iter158 in iter157) {
          if (iter157.hasOwnProperty(iter158)) {
            iter158 = iter157[iter158];
            output.writeString(iter158);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_shared_mutator_set_cells_as_arrays_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_shared_mutator_set_cells_as_arrays_result.prototype = {};
ClientService_shared_mutator_set_cells_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_set_cells_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_set_cells_as_arrays_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_offer_cells_as_arrays_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  this.cells = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [null]);
    }
  }
};
ClientService_offer_cells_as_arrays_args.prototype = {};
ClientService_offer_cells_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.cells = [];
        var _rtmp3160 = input.readListBegin();
        var _size159 = _rtmp3160.size || 0;
        for (var _i161 = 0; _i161 < _size159; ++_i161) {
          var elem162 = null;
          elem162 = [];
          var _rtmp3164 = input.readListBegin();
          var _size163 = _rtmp3164.size || 0;
          for (var _i165 = 0; _i165 < _size163; ++_i165) {
            var elem166 = null;
            elem166 = input.readString();
            elem162.push(elem166);
          }
          input.readListEnd();
          this.cells.push(elem162);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_offer_cells_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_offer_cells_as_arrays_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.LIST, this.cells.length);
    for (var iter167 in this.cells) {
      if (this.cells.hasOwnProperty(iter167)) {
        iter167 = this.cells[iter167];
        output.writeListBegin(Thrift.Type.STRING, iter167.length);
        for (var iter168 in iter167) {
          if (iter167.hasOwnProperty(iter168)) {
            iter168 = iter167[iter168];
            output.writeString(iter168);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_offer_cells_as_arrays_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_offer_cells_as_arrays_result.prototype = {};
ClientService_offer_cells_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_offer_cells_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_offer_cells_as_arrays_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_shared_mutator_set_cell_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  this.cell = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = new ttypes.Cell(args.cell);
    }
  }
};
ClientService_shared_mutator_set_cell_args.prototype = {};
ClientService_shared_mutator_set_cell_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.cell = new ttypes.Cell();
        this.cell.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_set_cell_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_set_cell_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.STRUCT, 4);
    this.cell.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_shared_mutator_set_cell_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_shared_mutator_set_cell_result.prototype = {};
ClientService_shared_mutator_set_cell_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_set_cell_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_set_cell_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_offer_cell_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  this.cell = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = new ttypes.Cell(args.cell);
    }
  }
};
ClientService_offer_cell_args.prototype = {};
ClientService_offer_cell_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.cell = new ttypes.Cell();
        this.cell.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_offer_cell_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_offer_cell_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.STRUCT, 4);
    this.cell.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_offer_cell_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_offer_cell_result.prototype = {};
ClientService_offer_cell_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_offer_cell_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_offer_cell_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_shared_mutator_set_cell_as_array_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  this.cell = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = Thrift.copyList(args.cell, [null]);
    }
  }
};
ClientService_shared_mutator_set_cell_as_array_args.prototype = {};
ClientService_shared_mutator_set_cell_as_array_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.cell = [];
        var _rtmp3170 = input.readListBegin();
        var _size169 = _rtmp3170.size || 0;
        for (var _i171 = 0; _i171 < _size169; ++_i171) {
          var elem172 = null;
          elem172 = input.readString();
          this.cell.push(elem172);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_set_cell_as_array_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_set_cell_as_array_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.cell.length);
    for (var iter173 in this.cell) {
      if (this.cell.hasOwnProperty(iter173)) {
        iter173 = this.cell[iter173];
        output.writeString(iter173);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_shared_mutator_set_cell_as_array_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_shared_mutator_set_cell_as_array_result.prototype = {};
ClientService_shared_mutator_set_cell_as_array_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_set_cell_as_array_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_set_cell_as_array_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_offer_cell_as_array_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  this.cell = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = Thrift.copyList(args.cell, [null]);
    }
  }
};
ClientService_offer_cell_as_array_args.prototype = {};
ClientService_offer_cell_as_array_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.cell = [];
        var _rtmp3175 = input.readListBegin();
        var _size174 = _rtmp3175.size || 0;
        for (var _i176 = 0; _i176 < _size174; ++_i176) {
          var elem177 = null;
          elem177 = input.readString();
          this.cell.push(elem177);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_offer_cell_as_array_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_offer_cell_as_array_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.cell.length);
    for (var iter178 in this.cell) {
      if (this.cell.hasOwnProperty(iter178)) {
        iter178 = this.cell[iter178];
        output.writeString(iter178);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_offer_cell_as_array_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_offer_cell_as_array_result.prototype = {};
ClientService_offer_cell_as_array_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_offer_cell_as_array_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_offer_cell_as_array_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_mutator_open_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.flags = 0;
  this.flush_interval = 0;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    }
    if (args.flush_interval !== undefined && args.flush_interval !== null) {
      this.flush_interval = args.flush_interval;
    }
  }
};
ClientService_mutator_open_args.prototype = {};
ClientService_mutator_open_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.flags = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.flush_interval = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_open_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_open_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I32, 3);
    output.writeI32(this.flags);
    output.writeFieldEnd();
  }
  if (this.flush_interval !== null && this.flush_interval !== undefined) {
    output.writeFieldBegin('flush_interval', Thrift.Type.I32, 4);
    output.writeI32(this.flush_interval);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_mutator_open_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_mutator_open_result.prototype = {};
ClientService_mutator_open_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_open_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_open_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_open_mutator_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.flags = 0;
  this.flush_interval = 0;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    }
    if (args.flush_interval !== undefined && args.flush_interval !== null) {
      this.flush_interval = args.flush_interval;
    }
  }
};
ClientService_open_mutator_args.prototype = {};
ClientService_open_mutator_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.flags = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.flush_interval = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_mutator_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_mutator_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I32, 3);
    output.writeI32(this.flags);
    output.writeFieldEnd();
  }
  if (this.flush_interval !== null && this.flush_interval !== undefined) {
    output.writeFieldBegin('flush_interval', Thrift.Type.I32, 4);
    output.writeI32(this.flush_interval);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_open_mutator_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_open_mutator_result.prototype = {};
ClientService_open_mutator_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_mutator_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_mutator_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_mutator_open_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.future = null;
  this.flags = 0;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.future !== undefined && args.future !== null) {
      this.future = args.future;
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    }
  }
};
ClientService_async_mutator_open_args.prototype = {};
ClientService_async_mutator_open_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.future = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.flags = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_open_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_open_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.future !== null && this.future !== undefined) {
    output.writeFieldBegin('future', Thrift.Type.I64, 3);
    output.writeI64(this.future);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I32, 4);
    output.writeI32(this.flags);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_mutator_open_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_mutator_open_result.prototype = {};
ClientService_async_mutator_open_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_open_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_open_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_open_mutator_async_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.future = null;
  this.flags = 0;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.future !== undefined && args.future !== null) {
      this.future = args.future;
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    }
  }
};
ClientService_open_mutator_async_args.prototype = {};
ClientService_open_mutator_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.future = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.flags = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_mutator_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_mutator_async_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.future !== null && this.future !== undefined) {
    output.writeFieldBegin('future', Thrift.Type.I64, 3);
    output.writeI64(this.future);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I32, 4);
    output.writeI32(this.flags);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_open_mutator_async_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_open_mutator_async_result.prototype = {};
ClientService_open_mutator_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_mutator_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_mutator_async_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_mutator_close_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_mutator_close_args.prototype = {};
ClientService_mutator_close_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_close_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_close_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_mutator_close_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_mutator_close_result.prototype = {};
ClientService_mutator_close_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_close_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_close_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_close_mutator_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_close_mutator_args.prototype = {};
ClientService_close_mutator_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_mutator_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_mutator_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_close_mutator_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_close_mutator_result.prototype = {};
ClientService_close_mutator_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_mutator_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_mutator_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_mutator_cancel_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_async_mutator_cancel_args.prototype = {};
ClientService_async_mutator_cancel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_cancel_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_cancel_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_mutator_cancel_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_mutator_cancel_result.prototype = {};
ClientService_async_mutator_cancel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_cancel_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_cancel_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_cancel_mutator_async_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_cancel_mutator_async_args.prototype = {};
ClientService_cancel_mutator_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_cancel_mutator_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_cancel_mutator_async_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_cancel_mutator_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_cancel_mutator_async_result.prototype = {};
ClientService_cancel_mutator_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_cancel_mutator_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_cancel_mutator_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_mutator_close_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_async_mutator_close_args.prototype = {};
ClientService_async_mutator_close_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_close_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_close_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_mutator_close_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_mutator_close_result.prototype = {};
ClientService_async_mutator_close_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_close_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_close_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_close_mutator_async_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_close_mutator_async_args.prototype = {};
ClientService_close_mutator_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_mutator_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_mutator_async_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_close_mutator_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_close_mutator_async_result.prototype = {};
ClientService_close_mutator_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_mutator_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_mutator_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_mutator_set_cell_args = function(args) {
  this.mutator = null;
  this.cell = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = new ttypes.Cell(args.cell);
    }
  }
};
ClientService_mutator_set_cell_args.prototype = {};
ClientService_mutator_set_cell_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.cell = new ttypes.Cell();
        this.cell.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cell_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cell_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.STRUCT, 2);
    this.cell.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_mutator_set_cell_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_mutator_set_cell_result.prototype = {};
ClientService_mutator_set_cell_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cell_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cell_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cell_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.cell = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = new ttypes.Cell(args.cell);
    }
  }
};
ClientService_set_cell_args.prototype = {};
ClientService_set_cell_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cell = new ttypes.Cell();
        this.cell.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cell_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cell_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.STRUCT, 3);
    this.cell.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cell_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cell_result.prototype = {};
ClientService_set_cell_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cell_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cell_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_mutator_set_cell_as_array_args = function(args) {
  this.mutator = null;
  this.cell = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = Thrift.copyList(args.cell, [null]);
    }
  }
};
ClientService_mutator_set_cell_as_array_args.prototype = {};
ClientService_mutator_set_cell_as_array_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.cell = [];
        var _rtmp3180 = input.readListBegin();
        var _size179 = _rtmp3180.size || 0;
        for (var _i181 = 0; _i181 < _size179; ++_i181) {
          var elem182 = null;
          elem182 = input.readString();
          this.cell.push(elem182);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cell_as_array_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cell_as_array_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.cell.length);
    for (var iter183 in this.cell) {
      if (this.cell.hasOwnProperty(iter183)) {
        iter183 = this.cell[iter183];
        output.writeString(iter183);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_mutator_set_cell_as_array_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_mutator_set_cell_as_array_result.prototype = {};
ClientService_mutator_set_cell_as_array_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cell_as_array_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cell_as_array_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cell_as_array_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.cell = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = Thrift.copyList(args.cell, [null]);
    }
  }
};
ClientService_set_cell_as_array_args.prototype = {};
ClientService_set_cell_as_array_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.cell = [];
        var _rtmp3185 = input.readListBegin();
        var _size184 = _rtmp3185.size || 0;
        for (var _i186 = 0; _i186 < _size184; ++_i186) {
          var elem187 = null;
          elem187 = input.readString();
          this.cell.push(elem187);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cell_as_array_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cell_as_array_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.cell.length);
    for (var iter188 in this.cell) {
      if (this.cell.hasOwnProperty(iter188)) {
        iter188 = this.cell[iter188];
        output.writeString(iter188);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cell_as_array_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cell_as_array_result.prototype = {};
ClientService_set_cell_as_array_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cell_as_array_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cell_as_array_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_mutator_set_cells_args = function(args) {
  this.mutator = null;
  this.cells = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [ttypes.Cell]);
    }
  }
};
ClientService_mutator_set_cells_args.prototype = {};
ClientService_mutator_set_cells_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.cells = [];
        var _rtmp3190 = input.readListBegin();
        var _size189 = _rtmp3190.size || 0;
        for (var _i191 = 0; _i191 < _size189; ++_i191) {
          var elem192 = null;
          elem192 = new ttypes.Cell();
          elem192.read(input);
          this.cells.push(elem192);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cells_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cells_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter193 in this.cells) {
      if (this.cells.hasOwnProperty(iter193)) {
        iter193 = this.cells[iter193];
        iter193.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_mutator_set_cells_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_mutator_set_cells_result.prototype = {};
ClientService_mutator_set_cells_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cells_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cells_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cells_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.cells = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [ttypes.Cell]);
    }
  }
};
ClientService_set_cells_args.prototype = {};
ClientService_set_cells_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.cells = [];
        var _rtmp3195 = input.readListBegin();
        var _size194 = _rtmp3195.size || 0;
        for (var _i196 = 0; _i196 < _size194; ++_i196) {
          var elem197 = null;
          elem197 = new ttypes.Cell();
          elem197.read(input);
          this.cells.push(elem197);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter198 in this.cells) {
      if (this.cells.hasOwnProperty(iter198)) {
        iter198 = this.cells[iter198];
        iter198.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cells_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cells_result.prototype = {};
ClientService_set_cells_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_mutator_set_cells_as_arrays_args = function(args) {
  this.mutator = null;
  this.cells = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [null]);
    }
  }
};
ClientService_mutator_set_cells_as_arrays_args.prototype = {};
ClientService_mutator_set_cells_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.cells = [];
        var _rtmp3200 = input.readListBegin();
        var _size199 = _rtmp3200.size || 0;
        for (var _i201 = 0; _i201 < _size199; ++_i201) {
          var elem202 = null;
          elem202 = [];
          var _rtmp3204 = input.readListBegin();
          var _size203 = _rtmp3204.size || 0;
          for (var _i205 = 0; _i205 < _size203; ++_i205) {
            var elem206 = null;
            elem206 = input.readString();
            elem202.push(elem206);
          }
          input.readListEnd();
          this.cells.push(elem202);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cells_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cells_as_arrays_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.cells.length);
    for (var iter207 in this.cells) {
      if (this.cells.hasOwnProperty(iter207)) {
        iter207 = this.cells[iter207];
        output.writeListBegin(Thrift.Type.STRING, iter207.length);
        for (var iter208 in iter207) {
          if (iter207.hasOwnProperty(iter208)) {
            iter208 = iter207[iter208];
            output.writeString(iter208);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_mutator_set_cells_as_arrays_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_mutator_set_cells_as_arrays_result.prototype = {};
ClientService_mutator_set_cells_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cells_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cells_as_arrays_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cells_as_arrays_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.cells = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [null]);
    }
  }
};
ClientService_set_cells_as_arrays_args.prototype = {};
ClientService_set_cells_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.cells = [];
        var _rtmp3210 = input.readListBegin();
        var _size209 = _rtmp3210.size || 0;
        for (var _i211 = 0; _i211 < _size209; ++_i211) {
          var elem212 = null;
          elem212 = [];
          var _rtmp3214 = input.readListBegin();
          var _size213 = _rtmp3214.size || 0;
          for (var _i215 = 0; _i215 < _size213; ++_i215) {
            var elem216 = null;
            elem216 = input.readString();
            elem212.push(elem216);
          }
          input.readListEnd();
          this.cells.push(elem212);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_as_arrays_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.LIST, this.cells.length);
    for (var iter217 in this.cells) {
      if (this.cells.hasOwnProperty(iter217)) {
        iter217 = this.cells[iter217];
        output.writeListBegin(Thrift.Type.STRING, iter217.length);
        for (var iter218 in iter217) {
          if (iter217.hasOwnProperty(iter218)) {
            iter218 = iter217[iter218];
            output.writeString(iter218);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cells_as_arrays_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cells_as_arrays_result.prototype = {};
ClientService_set_cells_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_as_arrays_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_mutator_set_cells_serialized_args = function(args) {
  this.mutator = null;
  this.cells = null;
  this.flush = false;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = args.cells;
    }
    if (args.flush !== undefined && args.flush !== null) {
      this.flush = args.flush;
    }
  }
};
ClientService_mutator_set_cells_serialized_args.prototype = {};
ClientService_mutator_set_cells_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cells = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.flush = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cells_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cells_serialized_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.STRING, 2);
    output.writeBinary(this.cells);
    output.writeFieldEnd();
  }
  if (this.flush !== null && this.flush !== undefined) {
    output.writeFieldBegin('flush', Thrift.Type.BOOL, 3);
    output.writeBool(this.flush);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_mutator_set_cells_serialized_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_mutator_set_cells_serialized_result.prototype = {};
ClientService_mutator_set_cells_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cells_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cells_serialized_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cells_serialized_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.cells = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = args.cells;
    }
  }
};
ClientService_set_cells_serialized_args.prototype = {};
ClientService_set_cells_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cells = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_serialized_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.STRING, 3);
    output.writeBinary(this.cells);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cells_serialized_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cells_serialized_result.prototype = {};
ClientService_set_cells_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_serialized_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_mutator_flush_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_mutator_flush_args.prototype = {};
ClientService_mutator_flush_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_flush_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_flush_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_mutator_flush_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_mutator_flush_result.prototype = {};
ClientService_mutator_flush_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_flush_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_flush_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_flush_mutator_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_flush_mutator_args.prototype = {};
ClientService_flush_mutator_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_flush_mutator_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_flush_mutator_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_flush_mutator_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_flush_mutator_result.prototype = {};
ClientService_flush_mutator_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_flush_mutator_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_flush_mutator_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_mutator_set_cell_args = function(args) {
  this.mutator = null;
  this.cell = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = new ttypes.Cell(args.cell);
    }
  }
};
ClientService_async_mutator_set_cell_args.prototype = {};
ClientService_async_mutator_set_cell_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.cell = new ttypes.Cell();
        this.cell.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cell_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cell_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.STRUCT, 2);
    this.cell.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_mutator_set_cell_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_mutator_set_cell_result.prototype = {};
ClientService_async_mutator_set_cell_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cell_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cell_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cell_async_args = function(args) {
  this.mutator = null;
  this.cell = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = new ttypes.Cell(args.cell);
    }
  }
};
ClientService_set_cell_async_args.prototype = {};
ClientService_set_cell_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.cell = new ttypes.Cell();
        this.cell.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cell_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cell_async_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.STRUCT, 2);
    this.cell.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cell_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cell_async_result.prototype = {};
ClientService_set_cell_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cell_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cell_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_mutator_set_cell_as_array_args = function(args) {
  this.mutator = null;
  this.cell = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = Thrift.copyList(args.cell, [null]);
    }
  }
};
ClientService_async_mutator_set_cell_as_array_args.prototype = {};
ClientService_async_mutator_set_cell_as_array_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.cell = [];
        var _rtmp3220 = input.readListBegin();
        var _size219 = _rtmp3220.size || 0;
        for (var _i221 = 0; _i221 < _size219; ++_i221) {
          var elem222 = null;
          elem222 = input.readString();
          this.cell.push(elem222);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cell_as_array_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cell_as_array_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.cell.length);
    for (var iter223 in this.cell) {
      if (this.cell.hasOwnProperty(iter223)) {
        iter223 = this.cell[iter223];
        output.writeString(iter223);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_mutator_set_cell_as_array_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_mutator_set_cell_as_array_result.prototype = {};
ClientService_async_mutator_set_cell_as_array_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cell_as_array_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cell_as_array_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cell_as_array_async_args = function(args) {
  this.mutator = null;
  this.cell = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = Thrift.copyList(args.cell, [null]);
    }
  }
};
ClientService_set_cell_as_array_async_args.prototype = {};
ClientService_set_cell_as_array_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.cell = [];
        var _rtmp3225 = input.readListBegin();
        var _size224 = _rtmp3225.size || 0;
        for (var _i226 = 0; _i226 < _size224; ++_i226) {
          var elem227 = null;
          elem227 = input.readString();
          this.cell.push(elem227);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cell_as_array_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cell_as_array_async_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.cell.length);
    for (var iter228 in this.cell) {
      if (this.cell.hasOwnProperty(iter228)) {
        iter228 = this.cell[iter228];
        output.writeString(iter228);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cell_as_array_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cell_as_array_async_result.prototype = {};
ClientService_set_cell_as_array_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cell_as_array_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cell_as_array_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_mutator_set_cells_args = function(args) {
  this.mutator = null;
  this.cells = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [ttypes.Cell]);
    }
  }
};
ClientService_async_mutator_set_cells_args.prototype = {};
ClientService_async_mutator_set_cells_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.cells = [];
        var _rtmp3230 = input.readListBegin();
        var _size229 = _rtmp3230.size || 0;
        for (var _i231 = 0; _i231 < _size229; ++_i231) {
          var elem232 = null;
          elem232 = new ttypes.Cell();
          elem232.read(input);
          this.cells.push(elem232);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cells_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cells_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter233 in this.cells) {
      if (this.cells.hasOwnProperty(iter233)) {
        iter233 = this.cells[iter233];
        iter233.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_mutator_set_cells_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_mutator_set_cells_result.prototype = {};
ClientService_async_mutator_set_cells_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cells_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cells_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cells_async_args = function(args) {
  this.mutator = null;
  this.cells = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [ttypes.Cell]);
    }
  }
};
ClientService_set_cells_async_args.prototype = {};
ClientService_set_cells_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.cells = [];
        var _rtmp3235 = input.readListBegin();
        var _size234 = _rtmp3235.size || 0;
        for (var _i236 = 0; _i236 < _size234; ++_i236) {
          var elem237 = null;
          elem237 = new ttypes.Cell();
          elem237.read(input);
          this.cells.push(elem237);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_async_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter238 in this.cells) {
      if (this.cells.hasOwnProperty(iter238)) {
        iter238 = this.cells[iter238];
        iter238.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cells_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cells_async_result.prototype = {};
ClientService_set_cells_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_mutator_set_cells_as_arrays_args = function(args) {
  this.mutator = null;
  this.cells = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [null]);
    }
  }
};
ClientService_async_mutator_set_cells_as_arrays_args.prototype = {};
ClientService_async_mutator_set_cells_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.cells = [];
        var _rtmp3240 = input.readListBegin();
        var _size239 = _rtmp3240.size || 0;
        for (var _i241 = 0; _i241 < _size239; ++_i241) {
          var elem242 = null;
          elem242 = [];
          var _rtmp3244 = input.readListBegin();
          var _size243 = _rtmp3244.size || 0;
          for (var _i245 = 0; _i245 < _size243; ++_i245) {
            var elem246 = null;
            elem246 = input.readString();
            elem242.push(elem246);
          }
          input.readListEnd();
          this.cells.push(elem242);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cells_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cells_as_arrays_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.cells.length);
    for (var iter247 in this.cells) {
      if (this.cells.hasOwnProperty(iter247)) {
        iter247 = this.cells[iter247];
        output.writeListBegin(Thrift.Type.STRING, iter247.length);
        for (var iter248 in iter247) {
          if (iter247.hasOwnProperty(iter248)) {
            iter248 = iter247[iter248];
            output.writeString(iter248);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_mutator_set_cells_as_arrays_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_mutator_set_cells_as_arrays_result.prototype = {};
ClientService_async_mutator_set_cells_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cells_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cells_as_arrays_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cells_as_arrays_async_args = function(args) {
  this.mutator = null;
  this.cells = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [null]);
    }
  }
};
ClientService_set_cells_as_arrays_async_args.prototype = {};
ClientService_set_cells_as_arrays_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.cells = [];
        var _rtmp3250 = input.readListBegin();
        var _size249 = _rtmp3250.size || 0;
        for (var _i251 = 0; _i251 < _size249; ++_i251) {
          var elem252 = null;
          elem252 = [];
          var _rtmp3254 = input.readListBegin();
          var _size253 = _rtmp3254.size || 0;
          for (var _i255 = 0; _i255 < _size253; ++_i255) {
            var elem256 = null;
            elem256 = input.readString();
            elem252.push(elem256);
          }
          input.readListEnd();
          this.cells.push(elem252);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_as_arrays_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_as_arrays_async_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.cells.length);
    for (var iter257 in this.cells) {
      if (this.cells.hasOwnProperty(iter257)) {
        iter257 = this.cells[iter257];
        output.writeListBegin(Thrift.Type.STRING, iter257.length);
        for (var iter258 in iter257) {
          if (iter257.hasOwnProperty(iter258)) {
            iter258 = iter257[iter258];
            output.writeString(iter258);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cells_as_arrays_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cells_as_arrays_async_result.prototype = {};
ClientService_set_cells_as_arrays_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_as_arrays_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_as_arrays_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_mutator_set_cells_serialized_args = function(args) {
  this.mutator = null;
  this.cells = null;
  this.flush = false;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = args.cells;
    }
    if (args.flush !== undefined && args.flush !== null) {
      this.flush = args.flush;
    }
  }
};
ClientService_async_mutator_set_cells_serialized_args.prototype = {};
ClientService_async_mutator_set_cells_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cells = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.flush = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cells_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cells_serialized_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.STRING, 2);
    output.writeBinary(this.cells);
    output.writeFieldEnd();
  }
  if (this.flush !== null && this.flush !== undefined) {
    output.writeFieldBegin('flush', Thrift.Type.BOOL, 3);
    output.writeBool(this.flush);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_mutator_set_cells_serialized_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_mutator_set_cells_serialized_result.prototype = {};
ClientService_async_mutator_set_cells_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cells_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cells_serialized_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cells_serialized_async_args = function(args) {
  this.mutator = null;
  this.cells = null;
  this.flush = false;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = args.cells;
    }
    if (args.flush !== undefined && args.flush !== null) {
      this.flush = args.flush;
    }
  }
};
ClientService_set_cells_serialized_async_args.prototype = {};
ClientService_set_cells_serialized_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cells = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.flush = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_serialized_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_serialized_async_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.STRING, 2);
    output.writeBinary(this.cells);
    output.writeFieldEnd();
  }
  if (this.flush !== null && this.flush !== undefined) {
    output.writeFieldBegin('flush', Thrift.Type.BOOL, 3);
    output.writeBool(this.flush);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_set_cells_serialized_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cells_serialized_async_result.prototype = {};
ClientService_set_cells_serialized_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_serialized_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_serialized_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_mutator_flush_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_async_mutator_flush_args.prototype = {};
ClientService_async_mutator_flush_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_flush_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_flush_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_async_mutator_flush_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_mutator_flush_result.prototype = {};
ClientService_async_mutator_flush_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_flush_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_flush_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_flush_mutator_async_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_flush_mutator_async_args.prototype = {};
ClientService_flush_mutator_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_flush_mutator_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_flush_mutator_async_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_flush_mutator_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_flush_mutator_async_result.prototype = {};
ClientService_flush_mutator_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_flush_mutator_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_flush_mutator_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_namespace_exists_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_namespace_exists_args.prototype = {};
ClientService_namespace_exists_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_exists_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_exists_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_namespace_exists_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_namespace_exists_result.prototype = {};
ClientService_namespace_exists_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_exists_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_exists_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_exists_namespace_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_exists_namespace_args.prototype = {};
ClientService_exists_namespace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_exists_namespace_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_exists_namespace_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_exists_namespace_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_exists_namespace_result.prototype = {};
ClientService_exists_namespace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_exists_namespace_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_exists_namespace_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_exists_table_args = function(args) {
  this.ns = null;
  this.name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
ClientService_exists_table_args.prototype = {};
ClientService_exists_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_exists_table_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_exists_table_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_exists_table_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_exists_table_result.prototype = {};
ClientService_exists_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_exists_table_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_exists_table_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_exists_args = function(args) {
  this.ns = null;
  this.name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
ClientService_table_exists_args.prototype = {};
ClientService_table_exists_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_exists_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_exists_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_exists_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_exists_result.prototype = {};
ClientService_table_exists_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_exists_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_exists_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_get_id_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_table_get_id_args.prototype = {};
ClientService_table_get_id_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_id_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_id_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_get_id_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_get_id_result.prototype = {};
ClientService_table_get_id_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_id_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_id_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_table_id_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_get_table_id_args.prototype = {};
ClientService_get_table_id_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_table_id_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_table_id_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_table_id_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_table_id_result.prototype = {};
ClientService_get_table_id_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_table_id_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_table_id_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_get_schema_str_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_table_get_schema_str_args.prototype = {};
ClientService_table_get_schema_str_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_schema_str_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_schema_str_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_get_schema_str_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_get_schema_str_result.prototype = {};
ClientService_table_get_schema_str_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_schema_str_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_schema_str_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_schema_str_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_get_schema_str_args.prototype = {};
ClientService_get_schema_str_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_schema_str_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_schema_str_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_schema_str_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_schema_str_result.prototype = {};
ClientService_get_schema_str_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_schema_str_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_schema_str_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_get_schema_str_with_ids_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_table_get_schema_str_with_ids_args.prototype = {};
ClientService_table_get_schema_str_with_ids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_schema_str_with_ids_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_schema_str_with_ids_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_get_schema_str_with_ids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_get_schema_str_with_ids_result.prototype = {};
ClientService_table_get_schema_str_with_ids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_schema_str_with_ids_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_schema_str_with_ids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_schema_str_with_ids_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_get_schema_str_with_ids_args.prototype = {};
ClientService_get_schema_str_with_ids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_schema_str_with_ids_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_schema_str_with_ids_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_schema_str_with_ids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_schema_str_with_ids_result.prototype = {};
ClientService_get_schema_str_with_ids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_schema_str_with_ids_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_schema_str_with_ids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_get_schema_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_table_get_schema_args.prototype = {};
ClientService_table_get_schema_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_schema_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_schema_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_get_schema_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Schema(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_get_schema_result.prototype = {};
ClientService_table_get_schema_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Schema();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_schema_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_schema_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_schema_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_get_schema_args.prototype = {};
ClientService_get_schema_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_schema_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_schema_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_schema_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Schema(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_schema_result.prototype = {};
ClientService_get_schema_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Schema();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_schema_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_schema_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_tables_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_get_tables_args.prototype = {};
ClientService_get_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_tables_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_tables_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_tables_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_tables_result.prototype = {};
ClientService_get_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3260 = input.readListBegin();
        var _size259 = _rtmp3260.size || 0;
        for (var _i261 = 0; _i261 < _size259; ++_i261) {
          var elem262 = null;
          elem262 = input.readString();
          this.success.push(elem262);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_tables_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_tables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter263 in this.success) {
      if (this.success.hasOwnProperty(iter263)) {
        iter263 = this.success[iter263];
        output.writeString(iter263);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_namespace_get_listing_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_namespace_get_listing_args.prototype = {};
ClientService_namespace_get_listing_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_get_listing_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_get_listing_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_namespace_get_listing_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.NamespaceListing]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_namespace_get_listing_result.prototype = {};
ClientService_namespace_get_listing_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3265 = input.readListBegin();
        var _size264 = _rtmp3265.size || 0;
        for (var _i266 = 0; _i266 < _size264; ++_i266) {
          var elem267 = null;
          elem267 = new ttypes.NamespaceListing();
          elem267.read(input);
          this.success.push(elem267);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_get_listing_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_get_listing_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter268 in this.success) {
      if (this.success.hasOwnProperty(iter268)) {
        iter268 = this.success[iter268];
        iter268.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_listing_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_get_listing_args.prototype = {};
ClientService_get_listing_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_listing_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_listing_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_listing_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.NamespaceListing]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_listing_result.prototype = {};
ClientService_get_listing_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3270 = input.readListBegin();
        var _size269 = _rtmp3270.size || 0;
        for (var _i271 = 0; _i271 < _size269; ++_i271) {
          var elem272 = null;
          elem272 = new ttypes.NamespaceListing();
          elem272.read(input);
          this.success.push(elem272);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_listing_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_listing_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter273 in this.success) {
      if (this.success.hasOwnProperty(iter273)) {
        iter273 = this.success[iter273];
        iter273.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_get_splits_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_table_get_splits_args.prototype = {};
ClientService_table_get_splits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_splits_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_splits_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_get_splits_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TableSplit]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_get_splits_result.prototype = {};
ClientService_table_get_splits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3275 = input.readListBegin();
        var _size274 = _rtmp3275.size || 0;
        for (var _i276 = 0; _i276 < _size274; ++_i276) {
          var elem277 = null;
          elem277 = new ttypes.TableSplit();
          elem277.read(input);
          this.success.push(elem277);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_splits_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_splits_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter278 in this.success) {
      if (this.success.hasOwnProperty(iter278)) {
        iter278 = this.success[iter278];
        iter278.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_table_splits_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_get_table_splits_args.prototype = {};
ClientService_get_table_splits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_table_splits_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_table_splits_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_get_table_splits_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TableSplit]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_table_splits_result.prototype = {};
ClientService_get_table_splits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3280 = input.readListBegin();
        var _size279 = _rtmp3280.size || 0;
        for (var _i281 = 0; _i281 < _size279; ++_i281) {
          var elem282 = null;
          elem282 = new ttypes.TableSplit();
          elem282.read(input);
          this.success.push(elem282);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_table_splits_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_table_splits_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter283 in this.success) {
      if (this.success.hasOwnProperty(iter283)) {
        iter283 = this.success[iter283];
        iter283.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_namespace_drop_args = function(args) {
  this.ns = null;
  this.if_exists = true;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.if_exists !== undefined && args.if_exists !== null) {
      this.if_exists = args.if_exists;
    }
  }
};
ClientService_namespace_drop_args.prototype = {};
ClientService_namespace_drop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.if_exists = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_drop_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_drop_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  if (this.if_exists !== null && this.if_exists !== undefined) {
    output.writeFieldBegin('if_exists', Thrift.Type.BOOL, 2);
    output.writeBool(this.if_exists);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_namespace_drop_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_namespace_drop_result.prototype = {};
ClientService_namespace_drop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_drop_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_drop_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_drop_namespace_args = function(args) {
  this.ns = null;
  this.if_exists = true;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.if_exists !== undefined && args.if_exists !== null) {
      this.if_exists = args.if_exists;
    }
  }
};
ClientService_drop_namespace_args.prototype = {};
ClientService_drop_namespace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.if_exists = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_drop_namespace_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_drop_namespace_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  if (this.if_exists !== null && this.if_exists !== undefined) {
    output.writeFieldBegin('if_exists', Thrift.Type.BOOL, 2);
    output.writeBool(this.if_exists);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_drop_namespace_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_drop_namespace_result.prototype = {};
ClientService_drop_namespace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_drop_namespace_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_drop_namespace_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_rename_table_args = function(args) {
  this.ns = null;
  this.name = null;
  this.new_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.new_name !== undefined && args.new_name !== null) {
      this.new_name = args.new_name;
    }
  }
};
ClientService_rename_table_args.prototype = {};
ClientService_rename_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.new_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_rename_table_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_rename_table_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.new_name !== null && this.new_name !== undefined) {
    output.writeFieldBegin('new_name', Thrift.Type.STRING, 3);
    output.writeString(this.new_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_rename_table_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_rename_table_result.prototype = {};
ClientService_rename_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_rename_table_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_rename_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_rename_args = function(args) {
  this.ns = null;
  this.name = null;
  this.new_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.new_name !== undefined && args.new_name !== null) {
      this.new_name = args.new_name;
    }
  }
};
ClientService_table_rename_args.prototype = {};
ClientService_table_rename_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.new_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_rename_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_rename_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.new_name !== null && this.new_name !== undefined) {
    output.writeFieldBegin('new_name', Thrift.Type.STRING, 3);
    output.writeString(this.new_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_rename_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_rename_result.prototype = {};
ClientService_table_rename_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_rename_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_rename_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_drop_table_args = function(args) {
  this.ns = null;
  this.name = null;
  this.if_exists = true;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.if_exists !== undefined && args.if_exists !== null) {
      this.if_exists = args.if_exists;
    }
  }
};
ClientService_drop_table_args.prototype = {};
ClientService_drop_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.if_exists = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_drop_table_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_drop_table_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.if_exists !== null && this.if_exists !== undefined) {
    output.writeFieldBegin('if_exists', Thrift.Type.BOOL, 3);
    output.writeBool(this.if_exists);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_drop_table_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_drop_table_result.prototype = {};
ClientService_drop_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_drop_table_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_drop_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_drop_args = function(args) {
  this.ns = null;
  this.name = null;
  this.if_exists = true;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.if_exists !== undefined && args.if_exists !== null) {
      this.if_exists = args.if_exists;
    }
  }
};
ClientService_table_drop_args.prototype = {};
ClientService_table_drop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.if_exists = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_drop_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_drop_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.if_exists !== null && this.if_exists !== undefined) {
    output.writeFieldBegin('if_exists', Thrift.Type.BOOL, 3);
    output.writeBool(this.if_exists);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_table_drop_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_drop_result.prototype = {};
ClientService_table_drop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_drop_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_drop_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_generate_guid_args = function(args) {
};
ClientService_generate_guid_args.prototype = {};
ClientService_generate_guid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_generate_guid_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_generate_guid_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_generate_guid_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ClientService_generate_guid_result.prototype = {};
ClientService_generate_guid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_generate_guid_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_generate_guid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_create_cell_unique_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.key = null;
  this.value = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = new ttypes.Key(args.key);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
ClientService_create_cell_unique_args.prototype = {};
ClientService_create_cell_unique_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.Key();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_create_cell_unique_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_create_cell_unique_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 3);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_create_cell_unique_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_create_cell_unique_result.prototype = {};
ClientService_create_cell_unique_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_create_cell_unique_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_create_cell_unique_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_error_get_text_args = function(args) {
  this.error_code = null;
  if (args) {
    if (args.error_code !== undefined && args.error_code !== null) {
      this.error_code = args.error_code;
    }
  }
};
ClientService_error_get_text_args.prototype = {};
ClientService_error_get_text_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.error_code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_error_get_text_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_error_get_text_args');
  if (this.error_code !== null && this.error_code !== undefined) {
    output.writeFieldBegin('error_code', Thrift.Type.I32, 1);
    output.writeI32(this.error_code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_error_get_text_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ClientService_error_get_text_result.prototype = {};
ClientService_error_get_text_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_error_get_text_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_error_get_text_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_status_args = function(args) {
};
ClientService_status_args.prototype = {};
ClientService_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_status_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_status_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_status_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Status(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_status_result.prototype = {};
ClientService_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Status();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_status_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_shutdown_args = function(args) {
};
ClientService_shutdown_args.prototype = {};
ClientService_shutdown_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shutdown_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shutdown_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_shutdown_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_shutdown_result.prototype = {};
ClientService_shutdown_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shutdown_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shutdown_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientServiceClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
ClientServiceClient.prototype = {};
ClientServiceClient.prototype.seqid = function() { return this._seqid; };
ClientServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };

ClientServiceClient.prototype.namespace_create = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_namespace_create(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_namespace_create(ns);
  }
};

ClientServiceClient.prototype.send_namespace_create = function(ns) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns
  };
  var args = new ClientService_namespace_create_args(params);
  try {
    output.writeMessageBegin('namespace_create', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_namespace_create = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_namespace_create_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.create_namespace = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_namespace(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_namespace(ns);
  }
};

ClientServiceClient.prototype.send_create_namespace = function(ns) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns
  };
  var args = new ClientService_create_namespace_args(params);
  try {
    output.writeMessageBegin('create_namespace', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_create_namespace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_create_namespace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.table_create = function(ns, table_name, schema, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_create(ns, table_name, schema);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_create(ns, table_name, schema);
  }
};

ClientServiceClient.prototype.send_table_create = function(ns, table_name, schema) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    schema: schema
  };
  var args = new ClientService_table_create_args(params);
  try {
    output.writeMessageBegin('table_create', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_table_create = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_create_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.table_alter = function(ns, table_name, schema, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_alter(ns, table_name, schema);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_alter(ns, table_name, schema);
  }
};

ClientServiceClient.prototype.send_table_alter = function(ns, table_name, schema) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    schema: schema
  };
  var args = new ClientService_table_alter_args(params);
  try {
    output.writeMessageBegin('table_alter', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_table_alter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_alter_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.refresh_table = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_refresh_table(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_refresh_table(ns, table_name);
  }
};

ClientServiceClient.prototype.send_refresh_table = function(ns, table_name) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name
  };
  var args = new ClientService_refresh_table_args(params);
  try {
    output.writeMessageBegin('refresh_table', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_refresh_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_refresh_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.namespace_open = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_namespace_open(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_namespace_open(ns);
  }
};

ClientServiceClient.prototype.send_namespace_open = function(ns) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns
  };
  var args = new ClientService_namespace_open_args(params);
  try {
    output.writeMessageBegin('namespace_open', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_namespace_open = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_namespace_open_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('namespace_open failed: unknown result');
};

ClientServiceClient.prototype.open_namespace = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_open_namespace(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_open_namespace(ns);
  }
};

ClientServiceClient.prototype.send_open_namespace = function(ns) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns
  };
  var args = new ClientService_open_namespace_args(params);
  try {
    output.writeMessageBegin('open_namespace', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_open_namespace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_open_namespace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('open_namespace failed: unknown result');
};

ClientServiceClient.prototype.namespace_close = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_namespace_close(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_namespace_close(ns);
  }
};

ClientServiceClient.prototype.send_namespace_close = function(ns) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns
  };
  var args = new ClientService_namespace_close_args(params);
  try {
    output.writeMessageBegin('namespace_close', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_namespace_close = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_namespace_close_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.close_namespace = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_close_namespace(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_close_namespace(ns);
  }
};

ClientServiceClient.prototype.send_close_namespace = function(ns) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns
  };
  var args = new ClientService_close_namespace_args(params);
  try {
    output.writeMessageBegin('close_namespace', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_close_namespace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_close_namespace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.future_open = function(capacity, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_open(capacity);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_open(capacity);
  }
};

ClientServiceClient.prototype.send_future_open = function(capacity) {
  var output = new this.pClass(this.output);
  var params = {
    capacity: capacity
  };
  var args = new ClientService_future_open_args(params);
  try {
    output.writeMessageBegin('future_open', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_future_open = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_open_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('future_open failed: unknown result');
};

ClientServiceClient.prototype.open_future = function(capacity, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_open_future(capacity);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_open_future(capacity);
  }
};

ClientServiceClient.prototype.send_open_future = function(capacity) {
  var output = new this.pClass(this.output);
  var params = {
    capacity: capacity
  };
  var args = new ClientService_open_future_args(params);
  try {
    output.writeMessageBegin('open_future', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_open_future = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_open_future_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('open_future failed: unknown result');
};

ClientServiceClient.prototype.future_cancel = function(ff, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_cancel(ff);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_cancel(ff);
  }
};

ClientServiceClient.prototype.send_future_cancel = function(ff) {
  var output = new this.pClass(this.output);
  var params = {
    ff: ff
  };
  var args = new ClientService_future_cancel_args(params);
  try {
    output.writeMessageBegin('future_cancel', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_future_cancel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_cancel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.cancel_future = function(ff, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancel_future(ff);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancel_future(ff);
  }
};

ClientServiceClient.prototype.send_cancel_future = function(ff) {
  var output = new this.pClass(this.output);
  var params = {
    ff: ff
  };
  var args = new ClientService_cancel_future_args(params);
  try {
    output.writeMessageBegin('cancel_future', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_cancel_future = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_cancel_future_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.future_get_result = function(ff, timeout_millis, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_get_result(ff, timeout_millis);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_get_result(ff, timeout_millis);
  }
};

ClientServiceClient.prototype.send_future_get_result = function(ff, timeout_millis) {
  var output = new this.pClass(this.output);
  var params = {
    ff: ff,
    timeout_millis: timeout_millis
  };
  var args = new ClientService_future_get_result_args(params);
  try {
    output.writeMessageBegin('future_get_result', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_future_get_result = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_get_result_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('future_get_result failed: unknown result');
};

ClientServiceClient.prototype.get_future_result = function(ff, timeout_millis, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_future_result(ff, timeout_millis);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_future_result(ff, timeout_millis);
  }
};

ClientServiceClient.prototype.send_get_future_result = function(ff, timeout_millis) {
  var output = new this.pClass(this.output);
  var params = {
    ff: ff,
    timeout_millis: timeout_millis
  };
  var args = new ClientService_get_future_result_args(params);
  try {
    output.writeMessageBegin('get_future_result', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_get_future_result = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_future_result_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_future_result failed: unknown result');
};

ClientServiceClient.prototype.future_get_result_as_arrays = function(ff, timeout_millis, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_get_result_as_arrays(ff, timeout_millis);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_get_result_as_arrays(ff, timeout_millis);
  }
};

ClientServiceClient.prototype.send_future_get_result_as_arrays = function(ff, timeout_millis) {
  var output = new this.pClass(this.output);
  var params = {
    ff: ff,
    timeout_millis: timeout_millis
  };
  var args = new ClientService_future_get_result_as_arrays_args(params);
  try {
    output.writeMessageBegin('future_get_result_as_arrays', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_future_get_result_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_get_result_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('future_get_result_as_arrays failed: unknown result');
};

ClientServiceClient.prototype.get_future_result_as_arrays = function(ff, timeout_millis, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_future_result_as_arrays(ff, timeout_millis);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_future_result_as_arrays(ff, timeout_millis);
  }
};

ClientServiceClient.prototype.send_get_future_result_as_arrays = function(ff, timeout_millis) {
  var output = new this.pClass(this.output);
  var params = {
    ff: ff,
    timeout_millis: timeout_millis
  };
  var args = new ClientService_get_future_result_as_arrays_args(params);
  try {
    output.writeMessageBegin('get_future_result_as_arrays', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_get_future_result_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_future_result_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_future_result_as_arrays failed: unknown result');
};

ClientServiceClient.prototype.future_get_result_serialized = function(ff, timeout_millis, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_get_result_serialized(ff, timeout_millis);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_get_result_serialized(ff, timeout_millis);
  }
};

ClientServiceClient.prototype.send_future_get_result_serialized = function(ff, timeout_millis) {
  var output = new this.pClass(this.output);
  var params = {
    ff: ff,
    timeout_millis: timeout_millis
  };
  var args = new ClientService_future_get_result_serialized_args(params);
  try {
    output.writeMessageBegin('future_get_result_serialized', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_future_get_result_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_get_result_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('future_get_result_serialized failed: unknown result');
};

ClientServiceClient.prototype.get_future_result_serialized = function(ff, timeout_millis, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_future_result_serialized(ff, timeout_millis);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_future_result_serialized(ff, timeout_millis);
  }
};

ClientServiceClient.prototype.send_get_future_result_serialized = function(ff, timeout_millis) {
  var output = new this.pClass(this.output);
  var params = {
    ff: ff,
    timeout_millis: timeout_millis
  };
  var args = new ClientService_get_future_result_serialized_args(params);
  try {
    output.writeMessageBegin('get_future_result_serialized', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_get_future_result_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_future_result_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_future_result_serialized failed: unknown result');
};

ClientServiceClient.prototype.future_is_empty = function(ff, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_is_empty(ff);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_is_empty(ff);
  }
};

ClientServiceClient.prototype.send_future_is_empty = function(ff) {
  var output = new this.pClass(this.output);
  var params = {
    ff: ff
  };
  var args = new ClientService_future_is_empty_args(params);
  try {
    output.writeMessageBegin('future_is_empty', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_future_is_empty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_is_empty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('future_is_empty failed: unknown result');
};

ClientServiceClient.prototype.future_is_full = function(ff, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_is_full(ff);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_is_full(ff);
  }
};

ClientServiceClient.prototype.send_future_is_full = function(ff) {
  var output = new this.pClass(this.output);
  var params = {
    ff: ff
  };
  var args = new ClientService_future_is_full_args(params);
  try {
    output.writeMessageBegin('future_is_full', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_future_is_full = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_is_full_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('future_is_full failed: unknown result');
};

ClientServiceClient.prototype.future_is_cancelled = function(ff, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_is_cancelled(ff);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_is_cancelled(ff);
  }
};

ClientServiceClient.prototype.send_future_is_cancelled = function(ff) {
  var output = new this.pClass(this.output);
  var params = {
    ff: ff
  };
  var args = new ClientService_future_is_cancelled_args(params);
  try {
    output.writeMessageBegin('future_is_cancelled', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_future_is_cancelled = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_is_cancelled_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('future_is_cancelled failed: unknown result');
};

ClientServiceClient.prototype.future_has_outstanding = function(ff, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_has_outstanding(ff);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_has_outstanding(ff);
  }
};

ClientServiceClient.prototype.send_future_has_outstanding = function(ff) {
  var output = new this.pClass(this.output);
  var params = {
    ff: ff
  };
  var args = new ClientService_future_has_outstanding_args(params);
  try {
    output.writeMessageBegin('future_has_outstanding', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_future_has_outstanding = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_has_outstanding_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('future_has_outstanding failed: unknown result');
};

ClientServiceClient.prototype.future_close = function(ff, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_close(ff);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_close(ff);
  }
};

ClientServiceClient.prototype.send_future_close = function(ff) {
  var output = new this.pClass(this.output);
  var params = {
    ff: ff
  };
  var args = new ClientService_future_close_args(params);
  try {
    output.writeMessageBegin('future_close', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_future_close = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_close_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.close_future = function(ff, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_close_future(ff);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_close_future(ff);
  }
};

ClientServiceClient.prototype.send_close_future = function(ff) {
  var output = new this.pClass(this.output);
  var params = {
    ff: ff
  };
  var args = new ClientService_close_future_args(params);
  try {
    output.writeMessageBegin('close_future', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_close_future = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_close_future_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.scanner_open = function(ns, table_name, scan_spec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scanner_open(ns, table_name, scan_spec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scanner_open(ns, table_name, scan_spec);
  }
};

ClientServiceClient.prototype.send_scanner_open = function(ns, table_name, scan_spec) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    scan_spec: scan_spec
  };
  var args = new ClientService_scanner_open_args(params);
  try {
    output.writeMessageBegin('scanner_open', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_scanner_open = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_scanner_open_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scanner_open failed: unknown result');
};

ClientServiceClient.prototype.open_scanner = function(ns, table_name, scan_spec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_open_scanner(ns, table_name, scan_spec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_open_scanner(ns, table_name, scan_spec);
  }
};

ClientServiceClient.prototype.send_open_scanner = function(ns, table_name, scan_spec) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    scan_spec: scan_spec
  };
  var args = new ClientService_open_scanner_args(params);
  try {
    output.writeMessageBegin('open_scanner', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_open_scanner = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_open_scanner_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('open_scanner failed: unknown result');
};

ClientServiceClient.prototype.async_scanner_open = function(ns, table_name, future, scan_spec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_scanner_open(ns, table_name, future, scan_spec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_scanner_open(ns, table_name, future, scan_spec);
  }
};

ClientServiceClient.prototype.send_async_scanner_open = function(ns, table_name, future, scan_spec) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    future: future,
    scan_spec: scan_spec
  };
  var args = new ClientService_async_scanner_open_args(params);
  try {
    output.writeMessageBegin('async_scanner_open', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_async_scanner_open = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_scanner_open_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('async_scanner_open failed: unknown result');
};

ClientServiceClient.prototype.open_scanner_async = function(ns, table_name, future, scan_spec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_open_scanner_async(ns, table_name, future, scan_spec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_open_scanner_async(ns, table_name, future, scan_spec);
  }
};

ClientServiceClient.prototype.send_open_scanner_async = function(ns, table_name, future, scan_spec) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    future: future,
    scan_spec: scan_spec
  };
  var args = new ClientService_open_scanner_async_args(params);
  try {
    output.writeMessageBegin('open_scanner_async', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_open_scanner_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_open_scanner_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('open_scanner_async failed: unknown result');
};

ClientServiceClient.prototype.scanner_close = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scanner_close(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scanner_close(scanner);
  }
};

ClientServiceClient.prototype.send_scanner_close = function(scanner) {
  var output = new this.pClass(this.output);
  var params = {
    scanner: scanner
  };
  var args = new ClientService_scanner_close_args(params);
  try {
    output.writeMessageBegin('scanner_close', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_scanner_close = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_scanner_close_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.close_scanner = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_close_scanner(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_close_scanner(scanner);
  }
};

ClientServiceClient.prototype.send_close_scanner = function(scanner) {
  var output = new this.pClass(this.output);
  var params = {
    scanner: scanner
  };
  var args = new ClientService_close_scanner_args(params);
  try {
    output.writeMessageBegin('close_scanner', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_close_scanner = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_close_scanner_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.async_scanner_cancel = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_scanner_cancel(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_scanner_cancel(scanner);
  }
};

ClientServiceClient.prototype.send_async_scanner_cancel = function(scanner) {
  var output = new this.pClass(this.output);
  var params = {
    scanner: scanner
  };
  var args = new ClientService_async_scanner_cancel_args(params);
  try {
    output.writeMessageBegin('async_scanner_cancel', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_async_scanner_cancel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_scanner_cancel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.cancel_scanner_async = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancel_scanner_async(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancel_scanner_async(scanner);
  }
};

ClientServiceClient.prototype.send_cancel_scanner_async = function(scanner) {
  var output = new this.pClass(this.output);
  var params = {
    scanner: scanner
  };
  var args = new ClientService_cancel_scanner_async_args(params);
  try {
    output.writeMessageBegin('cancel_scanner_async', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_cancel_scanner_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_cancel_scanner_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.async_scanner_close = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_scanner_close(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_scanner_close(scanner);
  }
};

ClientServiceClient.prototype.send_async_scanner_close = function(scanner) {
  var output = new this.pClass(this.output);
  var params = {
    scanner: scanner
  };
  var args = new ClientService_async_scanner_close_args(params);
  try {
    output.writeMessageBegin('async_scanner_close', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_async_scanner_close = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_scanner_close_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.close_scanner_async = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_close_scanner_async(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_close_scanner_async(scanner);
  }
};

ClientServiceClient.prototype.send_close_scanner_async = function(scanner) {
  var output = new this.pClass(this.output);
  var params = {
    scanner: scanner
  };
  var args = new ClientService_close_scanner_async_args(params);
  try {
    output.writeMessageBegin('close_scanner_async', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_close_scanner_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_close_scanner_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.scanner_get_cells = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scanner_get_cells(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scanner_get_cells(scanner);
  }
};

ClientServiceClient.prototype.send_scanner_get_cells = function(scanner) {
  var output = new this.pClass(this.output);
  var params = {
    scanner: scanner
  };
  var args = new ClientService_scanner_get_cells_args(params);
  try {
    output.writeMessageBegin('scanner_get_cells', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_scanner_get_cells = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_scanner_get_cells_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scanner_get_cells failed: unknown result');
};

ClientServiceClient.prototype.next_cells = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_next_cells(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_next_cells(scanner);
  }
};

ClientServiceClient.prototype.send_next_cells = function(scanner) {
  var output = new this.pClass(this.output);
  var params = {
    scanner: scanner
  };
  var args = new ClientService_next_cells_args(params);
  try {
    output.writeMessageBegin('next_cells', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_next_cells = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_next_cells_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('next_cells failed: unknown result');
};

ClientServiceClient.prototype.scanner_get_cells_as_arrays = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scanner_get_cells_as_arrays(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scanner_get_cells_as_arrays(scanner);
  }
};

ClientServiceClient.prototype.send_scanner_get_cells_as_arrays = function(scanner) {
  var output = new this.pClass(this.output);
  var params = {
    scanner: scanner
  };
  var args = new ClientService_scanner_get_cells_as_arrays_args(params);
  try {
    output.writeMessageBegin('scanner_get_cells_as_arrays', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_scanner_get_cells_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_scanner_get_cells_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scanner_get_cells_as_arrays failed: unknown result');
};

ClientServiceClient.prototype.next_cells_as_arrays = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_next_cells_as_arrays(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_next_cells_as_arrays(scanner);
  }
};

ClientServiceClient.prototype.send_next_cells_as_arrays = function(scanner) {
  var output = new this.pClass(this.output);
  var params = {
    scanner: scanner
  };
  var args = new ClientService_next_cells_as_arrays_args(params);
  try {
    output.writeMessageBegin('next_cells_as_arrays', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_next_cells_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_next_cells_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('next_cells_as_arrays failed: unknown result');
};

ClientServiceClient.prototype.scanner_get_cells_serialized = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scanner_get_cells_serialized(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scanner_get_cells_serialized(scanner);
  }
};

ClientServiceClient.prototype.send_scanner_get_cells_serialized = function(scanner) {
  var output = new this.pClass(this.output);
  var params = {
    scanner: scanner
  };
  var args = new ClientService_scanner_get_cells_serialized_args(params);
  try {
    output.writeMessageBegin('scanner_get_cells_serialized', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_scanner_get_cells_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_scanner_get_cells_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scanner_get_cells_serialized failed: unknown result');
};

ClientServiceClient.prototype.next_cells_serialized = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_next_cells_serialized(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_next_cells_serialized(scanner);
  }
};

ClientServiceClient.prototype.send_next_cells_serialized = function(scanner) {
  var output = new this.pClass(this.output);
  var params = {
    scanner: scanner
  };
  var args = new ClientService_next_cells_serialized_args(params);
  try {
    output.writeMessageBegin('next_cells_serialized', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_next_cells_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_next_cells_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('next_cells_serialized failed: unknown result');
};

ClientServiceClient.prototype.scanner_get_row = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scanner_get_row(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scanner_get_row(scanner);
  }
};

ClientServiceClient.prototype.send_scanner_get_row = function(scanner) {
  var output = new this.pClass(this.output);
  var params = {
    scanner: scanner
  };
  var args = new ClientService_scanner_get_row_args(params);
  try {
    output.writeMessageBegin('scanner_get_row', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_scanner_get_row = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_scanner_get_row_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scanner_get_row failed: unknown result');
};

ClientServiceClient.prototype.next_row = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_next_row(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_next_row(scanner);
  }
};

ClientServiceClient.prototype.send_next_row = function(scanner) {
  var output = new this.pClass(this.output);
  var params = {
    scanner: scanner
  };
  var args = new ClientService_next_row_args(params);
  try {
    output.writeMessageBegin('next_row', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_next_row = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_next_row_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('next_row failed: unknown result');
};

ClientServiceClient.prototype.scanner_get_row_as_arrays = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scanner_get_row_as_arrays(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scanner_get_row_as_arrays(scanner);
  }
};

ClientServiceClient.prototype.send_scanner_get_row_as_arrays = function(scanner) {
  var output = new this.pClass(this.output);
  var params = {
    scanner: scanner
  };
  var args = new ClientService_scanner_get_row_as_arrays_args(params);
  try {
    output.writeMessageBegin('scanner_get_row_as_arrays', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_scanner_get_row_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_scanner_get_row_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scanner_get_row_as_arrays failed: unknown result');
};

ClientServiceClient.prototype.next_row_as_arrays = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_next_row_as_arrays(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_next_row_as_arrays(scanner);
  }
};

ClientServiceClient.prototype.send_next_row_as_arrays = function(scanner) {
  var output = new this.pClass(this.output);
  var params = {
    scanner: scanner
  };
  var args = new ClientService_next_row_as_arrays_args(params);
  try {
    output.writeMessageBegin('next_row_as_arrays', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_next_row_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_next_row_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('next_row_as_arrays failed: unknown result');
};

ClientServiceClient.prototype.scanner_get_row_serialized = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scanner_get_row_serialized(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scanner_get_row_serialized(scanner);
  }
};

ClientServiceClient.prototype.send_scanner_get_row_serialized = function(scanner) {
  var output = new this.pClass(this.output);
  var params = {
    scanner: scanner
  };
  var args = new ClientService_scanner_get_row_serialized_args(params);
  try {
    output.writeMessageBegin('scanner_get_row_serialized', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_scanner_get_row_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_scanner_get_row_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scanner_get_row_serialized failed: unknown result');
};

ClientServiceClient.prototype.next_row_serialized = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_next_row_serialized(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_next_row_serialized(scanner);
  }
};

ClientServiceClient.prototype.send_next_row_serialized = function(scanner) {
  var output = new this.pClass(this.output);
  var params = {
    scanner: scanner
  };
  var args = new ClientService_next_row_serialized_args(params);
  try {
    output.writeMessageBegin('next_row_serialized', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_next_row_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_next_row_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('next_row_serialized failed: unknown result');
};

ClientServiceClient.prototype.get_row = function(ns, table_name, row, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_row(ns, table_name, row);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_row(ns, table_name, row);
  }
};

ClientServiceClient.prototype.send_get_row = function(ns, table_name, row) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    row: row
  };
  var args = new ClientService_get_row_args(params);
  try {
    output.writeMessageBegin('get_row', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_get_row = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_row_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_row failed: unknown result');
};

ClientServiceClient.prototype.get_row_as_arrays = function(ns, name, row, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_row_as_arrays(ns, name, row);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_row_as_arrays(ns, name, row);
  }
};

ClientServiceClient.prototype.send_get_row_as_arrays = function(ns, name, row) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    name: name,
    row: row
  };
  var args = new ClientService_get_row_as_arrays_args(params);
  try {
    output.writeMessageBegin('get_row_as_arrays', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_get_row_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_row_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_row_as_arrays failed: unknown result');
};

ClientServiceClient.prototype.get_row_serialized = function(ns, table_name, row, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_row_serialized(ns, table_name, row);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_row_serialized(ns, table_name, row);
  }
};

ClientServiceClient.prototype.send_get_row_serialized = function(ns, table_name, row) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    row: row
  };
  var args = new ClientService_get_row_serialized_args(params);
  try {
    output.writeMessageBegin('get_row_serialized', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_get_row_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_row_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_row_serialized failed: unknown result');
};

ClientServiceClient.prototype.get_cell = function(ns, table_name, row, column, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_cell(ns, table_name, row, column);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_cell(ns, table_name, row, column);
  }
};

ClientServiceClient.prototype.send_get_cell = function(ns, table_name, row, column) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    row: row,
    column: column
  };
  var args = new ClientService_get_cell_args(params);
  try {
    output.writeMessageBegin('get_cell', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_get_cell = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_cell_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_cell failed: unknown result');
};

ClientServiceClient.prototype.get_cells = function(ns, table_name, scan_spec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_cells(ns, table_name, scan_spec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_cells(ns, table_name, scan_spec);
  }
};

ClientServiceClient.prototype.send_get_cells = function(ns, table_name, scan_spec) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    scan_spec: scan_spec
  };
  var args = new ClientService_get_cells_args(params);
  try {
    output.writeMessageBegin('get_cells', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_get_cells = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_cells_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_cells failed: unknown result');
};

ClientServiceClient.prototype.get_cells_as_arrays = function(ns, name, scan_spec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_cells_as_arrays(ns, name, scan_spec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_cells_as_arrays(ns, name, scan_spec);
  }
};

ClientServiceClient.prototype.send_get_cells_as_arrays = function(ns, name, scan_spec) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    name: name,
    scan_spec: scan_spec
  };
  var args = new ClientService_get_cells_as_arrays_args(params);
  try {
    output.writeMessageBegin('get_cells_as_arrays', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_get_cells_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_cells_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_cells_as_arrays failed: unknown result');
};

ClientServiceClient.prototype.get_cells_serialized = function(ns, name, scan_spec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_cells_serialized(ns, name, scan_spec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_cells_serialized(ns, name, scan_spec);
  }
};

ClientServiceClient.prototype.send_get_cells_serialized = function(ns, name, scan_spec) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    name: name,
    scan_spec: scan_spec
  };
  var args = new ClientService_get_cells_serialized_args(params);
  try {
    output.writeMessageBegin('get_cells_serialized', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_get_cells_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_cells_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_cells_serialized failed: unknown result');
};

ClientServiceClient.prototype.shared_mutator_refresh = function(ns, table_name, mutate_spec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shared_mutator_refresh(ns, table_name, mutate_spec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shared_mutator_refresh(ns, table_name, mutate_spec);
  }
};

ClientServiceClient.prototype.send_shared_mutator_refresh = function(ns, table_name, mutate_spec) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    mutate_spec: mutate_spec
  };
  var args = new ClientService_shared_mutator_refresh_args(params);
  try {
    output.writeMessageBegin('shared_mutator_refresh', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_shared_mutator_refresh = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_shared_mutator_refresh_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.refresh_shared_mutator = function(ns, table_name, mutate_spec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_refresh_shared_mutator(ns, table_name, mutate_spec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_refresh_shared_mutator(ns, table_name, mutate_spec);
  }
};

ClientServiceClient.prototype.send_refresh_shared_mutator = function(ns, table_name, mutate_spec) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    mutate_spec: mutate_spec
  };
  var args = new ClientService_refresh_shared_mutator_args(params);
  try {
    output.writeMessageBegin('refresh_shared_mutator', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_refresh_shared_mutator = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_refresh_shared_mutator_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.shared_mutator_set_cells = function(ns, table_name, mutate_spec, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shared_mutator_set_cells(ns, table_name, mutate_spec, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shared_mutator_set_cells(ns, table_name, mutate_spec, cells);
  }
};

ClientServiceClient.prototype.send_shared_mutator_set_cells = function(ns, table_name, mutate_spec, cells) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    mutate_spec: mutate_spec,
    cells: cells
  };
  var args = new ClientService_shared_mutator_set_cells_args(params);
  try {
    output.writeMessageBegin('shared_mutator_set_cells', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_shared_mutator_set_cells = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_shared_mutator_set_cells_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.offer_cells = function(ns, table_name, mutate_spec, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_offer_cells(ns, table_name, mutate_spec, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_offer_cells(ns, table_name, mutate_spec, cells);
  }
};

ClientServiceClient.prototype.send_offer_cells = function(ns, table_name, mutate_spec, cells) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    mutate_spec: mutate_spec,
    cells: cells
  };
  var args = new ClientService_offer_cells_args(params);
  try {
    output.writeMessageBegin('offer_cells', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_offer_cells = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_offer_cells_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.shared_mutator_set_cells_as_arrays = function(ns, table_name, mutate_spec, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shared_mutator_set_cells_as_arrays(ns, table_name, mutate_spec, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shared_mutator_set_cells_as_arrays(ns, table_name, mutate_spec, cells);
  }
};

ClientServiceClient.prototype.send_shared_mutator_set_cells_as_arrays = function(ns, table_name, mutate_spec, cells) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    mutate_spec: mutate_spec,
    cells: cells
  };
  var args = new ClientService_shared_mutator_set_cells_as_arrays_args(params);
  try {
    output.writeMessageBegin('shared_mutator_set_cells_as_arrays', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_shared_mutator_set_cells_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_shared_mutator_set_cells_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.offer_cells_as_arrays = function(ns, table_name, mutate_spec, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_offer_cells_as_arrays(ns, table_name, mutate_spec, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_offer_cells_as_arrays(ns, table_name, mutate_spec, cells);
  }
};

ClientServiceClient.prototype.send_offer_cells_as_arrays = function(ns, table_name, mutate_spec, cells) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    mutate_spec: mutate_spec,
    cells: cells
  };
  var args = new ClientService_offer_cells_as_arrays_args(params);
  try {
    output.writeMessageBegin('offer_cells_as_arrays', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_offer_cells_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_offer_cells_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.shared_mutator_set_cell = function(ns, table_name, mutate_spec, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shared_mutator_set_cell(ns, table_name, mutate_spec, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shared_mutator_set_cell(ns, table_name, mutate_spec, cell);
  }
};

ClientServiceClient.prototype.send_shared_mutator_set_cell = function(ns, table_name, mutate_spec, cell) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    mutate_spec: mutate_spec,
    cell: cell
  };
  var args = new ClientService_shared_mutator_set_cell_args(params);
  try {
    output.writeMessageBegin('shared_mutator_set_cell', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_shared_mutator_set_cell = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_shared_mutator_set_cell_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.offer_cell = function(ns, table_name, mutate_spec, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_offer_cell(ns, table_name, mutate_spec, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_offer_cell(ns, table_name, mutate_spec, cell);
  }
};

ClientServiceClient.prototype.send_offer_cell = function(ns, table_name, mutate_spec, cell) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    mutate_spec: mutate_spec,
    cell: cell
  };
  var args = new ClientService_offer_cell_args(params);
  try {
    output.writeMessageBegin('offer_cell', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_offer_cell = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_offer_cell_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.shared_mutator_set_cell_as_array = function(ns, table_name, mutate_spec, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shared_mutator_set_cell_as_array(ns, table_name, mutate_spec, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shared_mutator_set_cell_as_array(ns, table_name, mutate_spec, cell);
  }
};

ClientServiceClient.prototype.send_shared_mutator_set_cell_as_array = function(ns, table_name, mutate_spec, cell) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    mutate_spec: mutate_spec,
    cell: cell
  };
  var args = new ClientService_shared_mutator_set_cell_as_array_args(params);
  try {
    output.writeMessageBegin('shared_mutator_set_cell_as_array', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_shared_mutator_set_cell_as_array = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_shared_mutator_set_cell_as_array_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.offer_cell_as_array = function(ns, table_name, mutate_spec, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_offer_cell_as_array(ns, table_name, mutate_spec, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_offer_cell_as_array(ns, table_name, mutate_spec, cell);
  }
};

ClientServiceClient.prototype.send_offer_cell_as_array = function(ns, table_name, mutate_spec, cell) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    mutate_spec: mutate_spec,
    cell: cell
  };
  var args = new ClientService_offer_cell_as_array_args(params);
  try {
    output.writeMessageBegin('offer_cell_as_array', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_offer_cell_as_array = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_offer_cell_as_array_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.mutator_open = function(ns, table_name, flags, flush_interval, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutator_open(ns, table_name, flags, flush_interval);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutator_open(ns, table_name, flags, flush_interval);
  }
};

ClientServiceClient.prototype.send_mutator_open = function(ns, table_name, flags, flush_interval) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    flags: flags,
    flush_interval: flush_interval
  };
  var args = new ClientService_mutator_open_args(params);
  try {
    output.writeMessageBegin('mutator_open', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_mutator_open = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_mutator_open_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('mutator_open failed: unknown result');
};

ClientServiceClient.prototype.open_mutator = function(ns, table_name, flags, flush_interval, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_open_mutator(ns, table_name, flags, flush_interval);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_open_mutator(ns, table_name, flags, flush_interval);
  }
};

ClientServiceClient.prototype.send_open_mutator = function(ns, table_name, flags, flush_interval) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    flags: flags,
    flush_interval: flush_interval
  };
  var args = new ClientService_open_mutator_args(params);
  try {
    output.writeMessageBegin('open_mutator', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_open_mutator = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_open_mutator_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('open_mutator failed: unknown result');
};

ClientServiceClient.prototype.async_mutator_open = function(ns, table_name, future, flags, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_mutator_open(ns, table_name, future, flags);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_mutator_open(ns, table_name, future, flags);
  }
};

ClientServiceClient.prototype.send_async_mutator_open = function(ns, table_name, future, flags) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    future: future,
    flags: flags
  };
  var args = new ClientService_async_mutator_open_args(params);
  try {
    output.writeMessageBegin('async_mutator_open', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_async_mutator_open = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_mutator_open_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('async_mutator_open failed: unknown result');
};

ClientServiceClient.prototype.open_mutator_async = function(ns, table_name, future, flags, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_open_mutator_async(ns, table_name, future, flags);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_open_mutator_async(ns, table_name, future, flags);
  }
};

ClientServiceClient.prototype.send_open_mutator_async = function(ns, table_name, future, flags) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    future: future,
    flags: flags
  };
  var args = new ClientService_open_mutator_async_args(params);
  try {
    output.writeMessageBegin('open_mutator_async', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_open_mutator_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_open_mutator_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('open_mutator_async failed: unknown result');
};

ClientServiceClient.prototype.mutator_close = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutator_close(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutator_close(mutator);
  }
};

ClientServiceClient.prototype.send_mutator_close = function(mutator) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator
  };
  var args = new ClientService_mutator_close_args(params);
  try {
    output.writeMessageBegin('mutator_close', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_mutator_close = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_mutator_close_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.close_mutator = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_close_mutator(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_close_mutator(mutator);
  }
};

ClientServiceClient.prototype.send_close_mutator = function(mutator) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator
  };
  var args = new ClientService_close_mutator_args(params);
  try {
    output.writeMessageBegin('close_mutator', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_close_mutator = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_close_mutator_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.async_mutator_cancel = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_mutator_cancel(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_mutator_cancel(mutator);
  }
};

ClientServiceClient.prototype.send_async_mutator_cancel = function(mutator) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator
  };
  var args = new ClientService_async_mutator_cancel_args(params);
  try {
    output.writeMessageBegin('async_mutator_cancel', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_async_mutator_cancel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_mutator_cancel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.cancel_mutator_async = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancel_mutator_async(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancel_mutator_async(mutator);
  }
};

ClientServiceClient.prototype.send_cancel_mutator_async = function(mutator) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator
  };
  var args = new ClientService_cancel_mutator_async_args(params);
  try {
    output.writeMessageBegin('cancel_mutator_async', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_cancel_mutator_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_cancel_mutator_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.async_mutator_close = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_mutator_close(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_mutator_close(mutator);
  }
};

ClientServiceClient.prototype.send_async_mutator_close = function(mutator) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator
  };
  var args = new ClientService_async_mutator_close_args(params);
  try {
    output.writeMessageBegin('async_mutator_close', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_async_mutator_close = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_mutator_close_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.close_mutator_async = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_close_mutator_async(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_close_mutator_async(mutator);
  }
};

ClientServiceClient.prototype.send_close_mutator_async = function(mutator) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator
  };
  var args = new ClientService_close_mutator_async_args(params);
  try {
    output.writeMessageBegin('close_mutator_async', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_close_mutator_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_close_mutator_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.mutator_set_cell = function(mutator, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutator_set_cell(mutator, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutator_set_cell(mutator, cell);
  }
};

ClientServiceClient.prototype.send_mutator_set_cell = function(mutator, cell) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator,
    cell: cell
  };
  var args = new ClientService_mutator_set_cell_args(params);
  try {
    output.writeMessageBegin('mutator_set_cell', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_mutator_set_cell = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_mutator_set_cell_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.set_cell = function(ns, table_name, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cell(ns, table_name, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cell(ns, table_name, cell);
  }
};

ClientServiceClient.prototype.send_set_cell = function(ns, table_name, cell) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    cell: cell
  };
  var args = new ClientService_set_cell_args(params);
  try {
    output.writeMessageBegin('set_cell', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_set_cell = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cell_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.mutator_set_cell_as_array = function(mutator, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutator_set_cell_as_array(mutator, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutator_set_cell_as_array(mutator, cell);
  }
};

ClientServiceClient.prototype.send_mutator_set_cell_as_array = function(mutator, cell) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator,
    cell: cell
  };
  var args = new ClientService_mutator_set_cell_as_array_args(params);
  try {
    output.writeMessageBegin('mutator_set_cell_as_array', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_mutator_set_cell_as_array = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_mutator_set_cell_as_array_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.set_cell_as_array = function(ns, table_name, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cell_as_array(ns, table_name, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cell_as_array(ns, table_name, cell);
  }
};

ClientServiceClient.prototype.send_set_cell_as_array = function(ns, table_name, cell) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    cell: cell
  };
  var args = new ClientService_set_cell_as_array_args(params);
  try {
    output.writeMessageBegin('set_cell_as_array', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_set_cell_as_array = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cell_as_array_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.mutator_set_cells = function(mutator, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutator_set_cells(mutator, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutator_set_cells(mutator, cells);
  }
};

ClientServiceClient.prototype.send_mutator_set_cells = function(mutator, cells) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator,
    cells: cells
  };
  var args = new ClientService_mutator_set_cells_args(params);
  try {
    output.writeMessageBegin('mutator_set_cells', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_mutator_set_cells = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_mutator_set_cells_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.set_cells = function(ns, table_name, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cells(ns, table_name, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cells(ns, table_name, cells);
  }
};

ClientServiceClient.prototype.send_set_cells = function(ns, table_name, cells) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    cells: cells
  };
  var args = new ClientService_set_cells_args(params);
  try {
    output.writeMessageBegin('set_cells', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_set_cells = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cells_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.mutator_set_cells_as_arrays = function(mutator, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutator_set_cells_as_arrays(mutator, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutator_set_cells_as_arrays(mutator, cells);
  }
};

ClientServiceClient.prototype.send_mutator_set_cells_as_arrays = function(mutator, cells) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator,
    cells: cells
  };
  var args = new ClientService_mutator_set_cells_as_arrays_args(params);
  try {
    output.writeMessageBegin('mutator_set_cells_as_arrays', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_mutator_set_cells_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_mutator_set_cells_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.set_cells_as_arrays = function(ns, table_name, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cells_as_arrays(ns, table_name, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cells_as_arrays(ns, table_name, cells);
  }
};

ClientServiceClient.prototype.send_set_cells_as_arrays = function(ns, table_name, cells) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    cells: cells
  };
  var args = new ClientService_set_cells_as_arrays_args(params);
  try {
    output.writeMessageBegin('set_cells_as_arrays', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_set_cells_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cells_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.mutator_set_cells_serialized = function(mutator, cells, flush, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutator_set_cells_serialized(mutator, cells, flush);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutator_set_cells_serialized(mutator, cells, flush);
  }
};

ClientServiceClient.prototype.send_mutator_set_cells_serialized = function(mutator, cells, flush) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator,
    cells: cells,
    flush: flush
  };
  var args = new ClientService_mutator_set_cells_serialized_args(params);
  try {
    output.writeMessageBegin('mutator_set_cells_serialized', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_mutator_set_cells_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_mutator_set_cells_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.set_cells_serialized = function(ns, table_name, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cells_serialized(ns, table_name, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cells_serialized(ns, table_name, cells);
  }
};

ClientServiceClient.prototype.send_set_cells_serialized = function(ns, table_name, cells) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    cells: cells
  };
  var args = new ClientService_set_cells_serialized_args(params);
  try {
    output.writeMessageBegin('set_cells_serialized', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_set_cells_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cells_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.mutator_flush = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutator_flush(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutator_flush(mutator);
  }
};

ClientServiceClient.prototype.send_mutator_flush = function(mutator) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator
  };
  var args = new ClientService_mutator_flush_args(params);
  try {
    output.writeMessageBegin('mutator_flush', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_mutator_flush = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_mutator_flush_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.flush_mutator = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_flush_mutator(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_flush_mutator(mutator);
  }
};

ClientServiceClient.prototype.send_flush_mutator = function(mutator) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator
  };
  var args = new ClientService_flush_mutator_args(params);
  try {
    output.writeMessageBegin('flush_mutator', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_flush_mutator = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_flush_mutator_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.async_mutator_set_cell = function(mutator, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_mutator_set_cell(mutator, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_mutator_set_cell(mutator, cell);
  }
};

ClientServiceClient.prototype.send_async_mutator_set_cell = function(mutator, cell) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator,
    cell: cell
  };
  var args = new ClientService_async_mutator_set_cell_args(params);
  try {
    output.writeMessageBegin('async_mutator_set_cell', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_async_mutator_set_cell = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_mutator_set_cell_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.set_cell_async = function(mutator, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cell_async(mutator, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cell_async(mutator, cell);
  }
};

ClientServiceClient.prototype.send_set_cell_async = function(mutator, cell) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator,
    cell: cell
  };
  var args = new ClientService_set_cell_async_args(params);
  try {
    output.writeMessageBegin('set_cell_async', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_set_cell_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cell_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.async_mutator_set_cell_as_array = function(mutator, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_mutator_set_cell_as_array(mutator, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_mutator_set_cell_as_array(mutator, cell);
  }
};

ClientServiceClient.prototype.send_async_mutator_set_cell_as_array = function(mutator, cell) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator,
    cell: cell
  };
  var args = new ClientService_async_mutator_set_cell_as_array_args(params);
  try {
    output.writeMessageBegin('async_mutator_set_cell_as_array', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_async_mutator_set_cell_as_array = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_mutator_set_cell_as_array_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.set_cell_as_array_async = function(mutator, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cell_as_array_async(mutator, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cell_as_array_async(mutator, cell);
  }
};

ClientServiceClient.prototype.send_set_cell_as_array_async = function(mutator, cell) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator,
    cell: cell
  };
  var args = new ClientService_set_cell_as_array_async_args(params);
  try {
    output.writeMessageBegin('set_cell_as_array_async', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_set_cell_as_array_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cell_as_array_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.async_mutator_set_cells = function(mutator, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_mutator_set_cells(mutator, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_mutator_set_cells(mutator, cells);
  }
};

ClientServiceClient.prototype.send_async_mutator_set_cells = function(mutator, cells) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator,
    cells: cells
  };
  var args = new ClientService_async_mutator_set_cells_args(params);
  try {
    output.writeMessageBegin('async_mutator_set_cells', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_async_mutator_set_cells = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_mutator_set_cells_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.set_cells_async = function(mutator, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cells_async(mutator, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cells_async(mutator, cells);
  }
};

ClientServiceClient.prototype.send_set_cells_async = function(mutator, cells) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator,
    cells: cells
  };
  var args = new ClientService_set_cells_async_args(params);
  try {
    output.writeMessageBegin('set_cells_async', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_set_cells_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cells_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.async_mutator_set_cells_as_arrays = function(mutator, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_mutator_set_cells_as_arrays(mutator, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_mutator_set_cells_as_arrays(mutator, cells);
  }
};

ClientServiceClient.prototype.send_async_mutator_set_cells_as_arrays = function(mutator, cells) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator,
    cells: cells
  };
  var args = new ClientService_async_mutator_set_cells_as_arrays_args(params);
  try {
    output.writeMessageBegin('async_mutator_set_cells_as_arrays', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_async_mutator_set_cells_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_mutator_set_cells_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.set_cells_as_arrays_async = function(mutator, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cells_as_arrays_async(mutator, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cells_as_arrays_async(mutator, cells);
  }
};

ClientServiceClient.prototype.send_set_cells_as_arrays_async = function(mutator, cells) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator,
    cells: cells
  };
  var args = new ClientService_set_cells_as_arrays_async_args(params);
  try {
    output.writeMessageBegin('set_cells_as_arrays_async', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_set_cells_as_arrays_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cells_as_arrays_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.async_mutator_set_cells_serialized = function(mutator, cells, flush, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_mutator_set_cells_serialized(mutator, cells, flush);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_mutator_set_cells_serialized(mutator, cells, flush);
  }
};

ClientServiceClient.prototype.send_async_mutator_set_cells_serialized = function(mutator, cells, flush) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator,
    cells: cells,
    flush: flush
  };
  var args = new ClientService_async_mutator_set_cells_serialized_args(params);
  try {
    output.writeMessageBegin('async_mutator_set_cells_serialized', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_async_mutator_set_cells_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_mutator_set_cells_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.set_cells_serialized_async = function(mutator, cells, flush, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cells_serialized_async(mutator, cells, flush);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cells_serialized_async(mutator, cells, flush);
  }
};

ClientServiceClient.prototype.send_set_cells_serialized_async = function(mutator, cells, flush) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator,
    cells: cells,
    flush: flush
  };
  var args = new ClientService_set_cells_serialized_async_args(params);
  try {
    output.writeMessageBegin('set_cells_serialized_async', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_set_cells_serialized_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cells_serialized_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.async_mutator_flush = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_mutator_flush(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_mutator_flush(mutator);
  }
};

ClientServiceClient.prototype.send_async_mutator_flush = function(mutator) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator
  };
  var args = new ClientService_async_mutator_flush_args(params);
  try {
    output.writeMessageBegin('async_mutator_flush', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_async_mutator_flush = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_mutator_flush_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.flush_mutator_async = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_flush_mutator_async(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_flush_mutator_async(mutator);
  }
};

ClientServiceClient.prototype.send_flush_mutator_async = function(mutator) {
  var output = new this.pClass(this.output);
  var params = {
    mutator: mutator
  };
  var args = new ClientService_flush_mutator_async_args(params);
  try {
    output.writeMessageBegin('flush_mutator_async', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_flush_mutator_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_flush_mutator_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.namespace_exists = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_namespace_exists(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_namespace_exists(ns);
  }
};

ClientServiceClient.prototype.send_namespace_exists = function(ns) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns
  };
  var args = new ClientService_namespace_exists_args(params);
  try {
    output.writeMessageBegin('namespace_exists', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_namespace_exists = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_namespace_exists_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('namespace_exists failed: unknown result');
};

ClientServiceClient.prototype.exists_namespace = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exists_namespace(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exists_namespace(ns);
  }
};

ClientServiceClient.prototype.send_exists_namespace = function(ns) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns
  };
  var args = new ClientService_exists_namespace_args(params);
  try {
    output.writeMessageBegin('exists_namespace', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_exists_namespace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_exists_namespace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exists_namespace failed: unknown result');
};

ClientServiceClient.prototype.exists_table = function(ns, name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exists_table(ns, name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exists_table(ns, name);
  }
};

ClientServiceClient.prototype.send_exists_table = function(ns, name) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    name: name
  };
  var args = new ClientService_exists_table_args(params);
  try {
    output.writeMessageBegin('exists_table', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_exists_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_exists_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exists_table failed: unknown result');
};

ClientServiceClient.prototype.table_exists = function(ns, name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_exists(ns, name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_exists(ns, name);
  }
};

ClientServiceClient.prototype.send_table_exists = function(ns, name) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    name: name
  };
  var args = new ClientService_table_exists_args(params);
  try {
    output.writeMessageBegin('table_exists', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_table_exists = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_exists_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('table_exists failed: unknown result');
};

ClientServiceClient.prototype.table_get_id = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_get_id(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_get_id(ns, table_name);
  }
};

ClientServiceClient.prototype.send_table_get_id = function(ns, table_name) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name
  };
  var args = new ClientService_table_get_id_args(params);
  try {
    output.writeMessageBegin('table_get_id', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_table_get_id = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_get_id_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('table_get_id failed: unknown result');
};

ClientServiceClient.prototype.get_table_id = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_id(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_id(ns, table_name);
  }
};

ClientServiceClient.prototype.send_get_table_id = function(ns, table_name) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name
  };
  var args = new ClientService_get_table_id_args(params);
  try {
    output.writeMessageBegin('get_table_id', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_get_table_id = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_table_id_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_id failed: unknown result');
};

ClientServiceClient.prototype.table_get_schema_str = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_get_schema_str(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_get_schema_str(ns, table_name);
  }
};

ClientServiceClient.prototype.send_table_get_schema_str = function(ns, table_name) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name
  };
  var args = new ClientService_table_get_schema_str_args(params);
  try {
    output.writeMessageBegin('table_get_schema_str', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_table_get_schema_str = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_get_schema_str_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('table_get_schema_str failed: unknown result');
};

ClientServiceClient.prototype.get_schema_str = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_schema_str(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_schema_str(ns, table_name);
  }
};

ClientServiceClient.prototype.send_get_schema_str = function(ns, table_name) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name
  };
  var args = new ClientService_get_schema_str_args(params);
  try {
    output.writeMessageBegin('get_schema_str', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_get_schema_str = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_schema_str_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_schema_str failed: unknown result');
};

ClientServiceClient.prototype.table_get_schema_str_with_ids = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_get_schema_str_with_ids(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_get_schema_str_with_ids(ns, table_name);
  }
};

ClientServiceClient.prototype.send_table_get_schema_str_with_ids = function(ns, table_name) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name
  };
  var args = new ClientService_table_get_schema_str_with_ids_args(params);
  try {
    output.writeMessageBegin('table_get_schema_str_with_ids', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_table_get_schema_str_with_ids = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_get_schema_str_with_ids_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('table_get_schema_str_with_ids failed: unknown result');
};

ClientServiceClient.prototype.get_schema_str_with_ids = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_schema_str_with_ids(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_schema_str_with_ids(ns, table_name);
  }
};

ClientServiceClient.prototype.send_get_schema_str_with_ids = function(ns, table_name) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name
  };
  var args = new ClientService_get_schema_str_with_ids_args(params);
  try {
    output.writeMessageBegin('get_schema_str_with_ids', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_get_schema_str_with_ids = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_schema_str_with_ids_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_schema_str_with_ids failed: unknown result');
};

ClientServiceClient.prototype.table_get_schema = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_get_schema(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_get_schema(ns, table_name);
  }
};

ClientServiceClient.prototype.send_table_get_schema = function(ns, table_name) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name
  };
  var args = new ClientService_table_get_schema_args(params);
  try {
    output.writeMessageBegin('table_get_schema', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_table_get_schema = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_get_schema_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('table_get_schema failed: unknown result');
};

ClientServiceClient.prototype.get_schema = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_schema(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_schema(ns, table_name);
  }
};

ClientServiceClient.prototype.send_get_schema = function(ns, table_name) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name
  };
  var args = new ClientService_get_schema_args(params);
  try {
    output.writeMessageBegin('get_schema', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_get_schema = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_schema_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_schema failed: unknown result');
};

ClientServiceClient.prototype.get_tables = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_tables(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_tables(ns);
  }
};

ClientServiceClient.prototype.send_get_tables = function(ns) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns
  };
  var args = new ClientService_get_tables_args(params);
  try {
    output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_get_tables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_tables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_tables failed: unknown result');
};

ClientServiceClient.prototype.namespace_get_listing = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_namespace_get_listing(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_namespace_get_listing(ns);
  }
};

ClientServiceClient.prototype.send_namespace_get_listing = function(ns) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns
  };
  var args = new ClientService_namespace_get_listing_args(params);
  try {
    output.writeMessageBegin('namespace_get_listing', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_namespace_get_listing = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_namespace_get_listing_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('namespace_get_listing failed: unknown result');
};

ClientServiceClient.prototype.get_listing = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_listing(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_listing(ns);
  }
};

ClientServiceClient.prototype.send_get_listing = function(ns) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns
  };
  var args = new ClientService_get_listing_args(params);
  try {
    output.writeMessageBegin('get_listing', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_get_listing = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_listing_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_listing failed: unknown result');
};

ClientServiceClient.prototype.table_get_splits = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_get_splits(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_get_splits(ns, table_name);
  }
};

ClientServiceClient.prototype.send_table_get_splits = function(ns, table_name) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name
  };
  var args = new ClientService_table_get_splits_args(params);
  try {
    output.writeMessageBegin('table_get_splits', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_table_get_splits = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_get_splits_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('table_get_splits failed: unknown result');
};

ClientServiceClient.prototype.get_table_splits = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_splits(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_splits(ns, table_name);
  }
};

ClientServiceClient.prototype.send_get_table_splits = function(ns, table_name) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name
  };
  var args = new ClientService_get_table_splits_args(params);
  try {
    output.writeMessageBegin('get_table_splits', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_get_table_splits = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_table_splits_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_splits failed: unknown result');
};

ClientServiceClient.prototype.namespace_drop = function(ns, if_exists, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_namespace_drop(ns, if_exists);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_namespace_drop(ns, if_exists);
  }
};

ClientServiceClient.prototype.send_namespace_drop = function(ns, if_exists) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    if_exists: if_exists
  };
  var args = new ClientService_namespace_drop_args(params);
  try {
    output.writeMessageBegin('namespace_drop', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_namespace_drop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_namespace_drop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.drop_namespace = function(ns, if_exists, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_namespace(ns, if_exists);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_namespace(ns, if_exists);
  }
};

ClientServiceClient.prototype.send_drop_namespace = function(ns, if_exists) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    if_exists: if_exists
  };
  var args = new ClientService_drop_namespace_args(params);
  try {
    output.writeMessageBegin('drop_namespace', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_drop_namespace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_drop_namespace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.rename_table = function(ns, name, new_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rename_table(ns, name, new_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rename_table(ns, name, new_name);
  }
};

ClientServiceClient.prototype.send_rename_table = function(ns, name, new_name) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    name: name,
    new_name: new_name
  };
  var args = new ClientService_rename_table_args(params);
  try {
    output.writeMessageBegin('rename_table', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_rename_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_rename_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.table_rename = function(ns, name, new_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_rename(ns, name, new_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_rename(ns, name, new_name);
  }
};

ClientServiceClient.prototype.send_table_rename = function(ns, name, new_name) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    name: name,
    new_name: new_name
  };
  var args = new ClientService_table_rename_args(params);
  try {
    output.writeMessageBegin('table_rename', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_table_rename = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_rename_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.drop_table = function(ns, name, if_exists, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_table(ns, name, if_exists);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_table(ns, name, if_exists);
  }
};

ClientServiceClient.prototype.send_drop_table = function(ns, name, if_exists) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    name: name,
    if_exists: if_exists
  };
  var args = new ClientService_drop_table_args(params);
  try {
    output.writeMessageBegin('drop_table', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_drop_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_drop_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.table_drop = function(ns, name, if_exists, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_drop(ns, name, if_exists);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_drop(ns, name, if_exists);
  }
};

ClientServiceClient.prototype.send_table_drop = function(ns, name, if_exists) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    name: name,
    if_exists: if_exists
  };
  var args = new ClientService_table_drop_args(params);
  try {
    output.writeMessageBegin('table_drop', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_table_drop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_drop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ClientServiceClient.prototype.generate_guid = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_generate_guid();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_generate_guid();
  }
};

ClientServiceClient.prototype.send_generate_guid = function() {
  var output = new this.pClass(this.output);
  var args = new ClientService_generate_guid_args();
  try {
    output.writeMessageBegin('generate_guid', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_generate_guid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_generate_guid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('generate_guid failed: unknown result');
};

ClientServiceClient.prototype.create_cell_unique = function(ns, table_name, key, value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_cell_unique(ns, table_name, key, value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_cell_unique(ns, table_name, key, value);
  }
};

ClientServiceClient.prototype.send_create_cell_unique = function(ns, table_name, key, value) {
  var output = new this.pClass(this.output);
  var params = {
    ns: ns,
    table_name: table_name,
    key: key,
    value: value
  };
  var args = new ClientService_create_cell_unique_args(params);
  try {
    output.writeMessageBegin('create_cell_unique', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_create_cell_unique = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_create_cell_unique_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_cell_unique failed: unknown result');
};

ClientServiceClient.prototype.error_get_text = function(error_code, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_error_get_text(error_code);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_error_get_text(error_code);
  }
};

ClientServiceClient.prototype.send_error_get_text = function(error_code) {
  var output = new this.pClass(this.output);
  var params = {
    error_code: error_code
  };
  var args = new ClientService_error_get_text_args(params);
  try {
    output.writeMessageBegin('error_get_text', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_error_get_text = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_error_get_text_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('error_get_text failed: unknown result');
};

ClientServiceClient.prototype.status = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_status();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_status();
  }
};

ClientServiceClient.prototype.send_status = function() {
  var output = new this.pClass(this.output);
  var args = new ClientService_status_args();
  try {
    output.writeMessageBegin('status', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_status = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_status_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('status failed: unknown result');
};

ClientServiceClient.prototype.shutdown = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shutdown();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shutdown();
  }
};

ClientServiceClient.prototype.send_shutdown = function() {
  var output = new this.pClass(this.output);
  var args = new ClientService_shutdown_args();
  try {
    output.writeMessageBegin('shutdown', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ClientServiceClient.prototype.recv_shutdown = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_shutdown_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
var ClientServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
ClientServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
ClientServiceProcessor.prototype.process_namespace_create = function(seqid, input, output) {
  var args = new ClientService_namespace_create_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.namespace_create.length === 1) {
    Q.fcall(this._handler.namespace_create.bind(this._handler),
      args.ns
    ).then(function(result) {
      var result_obj = new ClientService_namespace_create_result({success: result});
      output.writeMessageBegin("namespace_create", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_namespace_create_result(err);
        output.writeMessageBegin("namespace_create", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("namespace_create", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.namespace_create(args.ns, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_namespace_create_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("namespace_create", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("namespace_create", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_create_namespace = function(seqid, input, output) {
  var args = new ClientService_create_namespace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_namespace.length === 1) {
    Q.fcall(this._handler.create_namespace.bind(this._handler),
      args.ns
    ).then(function(result) {
      var result_obj = new ClientService_create_namespace_result({success: result});
      output.writeMessageBegin("create_namespace", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_create_namespace_result(err);
        output.writeMessageBegin("create_namespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_namespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.create_namespace(args.ns, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_create_namespace_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_namespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_namespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_table_create = function(seqid, input, output) {
  var args = new ClientService_table_create_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_create.length === 3) {
    Q.fcall(this._handler.table_create.bind(this._handler),
      args.ns,
      args.table_name,
      args.schema
    ).then(function(result) {
      var result_obj = new ClientService_table_create_result({success: result});
      output.writeMessageBegin("table_create", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_table_create_result(err);
        output.writeMessageBegin("table_create", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_create", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.table_create(args.ns, args.table_name, args.schema, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_table_create_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("table_create", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_create", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_table_alter = function(seqid, input, output) {
  var args = new ClientService_table_alter_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_alter.length === 3) {
    Q.fcall(this._handler.table_alter.bind(this._handler),
      args.ns,
      args.table_name,
      args.schema
    ).then(function(result) {
      var result_obj = new ClientService_table_alter_result({success: result});
      output.writeMessageBegin("table_alter", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_table_alter_result(err);
        output.writeMessageBegin("table_alter", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_alter", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.table_alter(args.ns, args.table_name, args.schema, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_table_alter_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("table_alter", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_alter", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_refresh_table = function(seqid, input, output) {
  var args = new ClientService_refresh_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.refresh_table.length === 2) {
    Q.fcall(this._handler.refresh_table.bind(this._handler),
      args.ns,
      args.table_name
    ).then(function(result) {
      var result_obj = new ClientService_refresh_table_result({success: result});
      output.writeMessageBegin("refresh_table", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_refresh_table_result(err);
        output.writeMessageBegin("refresh_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("refresh_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.refresh_table(args.ns, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_refresh_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("refresh_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("refresh_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_namespace_open = function(seqid, input, output) {
  var args = new ClientService_namespace_open_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.namespace_open.length === 1) {
    Q.fcall(this._handler.namespace_open.bind(this._handler),
      args.ns
    ).then(function(result) {
      var result_obj = new ClientService_namespace_open_result({success: result});
      output.writeMessageBegin("namespace_open", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_namespace_open_result(err);
        output.writeMessageBegin("namespace_open", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("namespace_open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.namespace_open(args.ns, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_namespace_open_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("namespace_open", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("namespace_open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_open_namespace = function(seqid, input, output) {
  var args = new ClientService_open_namespace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.open_namespace.length === 1) {
    Q.fcall(this._handler.open_namespace.bind(this._handler),
      args.ns
    ).then(function(result) {
      var result_obj = new ClientService_open_namespace_result({success: result});
      output.writeMessageBegin("open_namespace", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_open_namespace_result(err);
        output.writeMessageBegin("open_namespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open_namespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.open_namespace(args.ns, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_open_namespace_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("open_namespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open_namespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_namespace_close = function(seqid, input, output) {
  var args = new ClientService_namespace_close_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.namespace_close.length === 1) {
    Q.fcall(this._handler.namespace_close.bind(this._handler),
      args.ns
    ).then(function(result) {
      var result_obj = new ClientService_namespace_close_result({success: result});
      output.writeMessageBegin("namespace_close", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_namespace_close_result(err);
        output.writeMessageBegin("namespace_close", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("namespace_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.namespace_close(args.ns, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_namespace_close_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("namespace_close", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("namespace_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_close_namespace = function(seqid, input, output) {
  var args = new ClientService_close_namespace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.close_namespace.length === 1) {
    Q.fcall(this._handler.close_namespace.bind(this._handler),
      args.ns
    ).then(function(result) {
      var result_obj = new ClientService_close_namespace_result({success: result});
      output.writeMessageBegin("close_namespace", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_close_namespace_result(err);
        output.writeMessageBegin("close_namespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_namespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.close_namespace(args.ns, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_close_namespace_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("close_namespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_namespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_future_open = function(seqid, input, output) {
  var args = new ClientService_future_open_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_open.length === 1) {
    Q.fcall(this._handler.future_open.bind(this._handler),
      args.capacity
    ).then(function(result) {
      var result_obj = new ClientService_future_open_result({success: result});
      output.writeMessageBegin("future_open", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_future_open_result(err);
        output.writeMessageBegin("future_open", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.future_open(args.capacity, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_future_open_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("future_open", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_open_future = function(seqid, input, output) {
  var args = new ClientService_open_future_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.open_future.length === 1) {
    Q.fcall(this._handler.open_future.bind(this._handler),
      args.capacity
    ).then(function(result) {
      var result_obj = new ClientService_open_future_result({success: result});
      output.writeMessageBegin("open_future", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_open_future_result(err);
        output.writeMessageBegin("open_future", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open_future", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.open_future(args.capacity, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_open_future_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("open_future", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open_future", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_future_cancel = function(seqid, input, output) {
  var args = new ClientService_future_cancel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_cancel.length === 1) {
    Q.fcall(this._handler.future_cancel.bind(this._handler),
      args.ff
    ).then(function(result) {
      var result_obj = new ClientService_future_cancel_result({success: result});
      output.writeMessageBegin("future_cancel", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_future_cancel_result(err);
        output.writeMessageBegin("future_cancel", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_cancel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.future_cancel(args.ff, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_future_cancel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("future_cancel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_cancel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_cancel_future = function(seqid, input, output) {
  var args = new ClientService_cancel_future_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancel_future.length === 1) {
    Q.fcall(this._handler.cancel_future.bind(this._handler),
      args.ff
    ).then(function(result) {
      var result_obj = new ClientService_cancel_future_result({success: result});
      output.writeMessageBegin("cancel_future", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_cancel_future_result(err);
        output.writeMessageBegin("cancel_future", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancel_future", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.cancel_future(args.ff, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_cancel_future_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("cancel_future", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancel_future", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_future_get_result = function(seqid, input, output) {
  var args = new ClientService_future_get_result_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_get_result.length === 2) {
    Q.fcall(this._handler.future_get_result.bind(this._handler),
      args.ff,
      args.timeout_millis
    ).then(function(result) {
      var result_obj = new ClientService_future_get_result_result({success: result});
      output.writeMessageBegin("future_get_result", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_future_get_result_result(err);
        output.writeMessageBegin("future_get_result", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_get_result", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.future_get_result(args.ff, args.timeout_millis, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_future_get_result_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("future_get_result", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_get_result", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_get_future_result = function(seqid, input, output) {
  var args = new ClientService_get_future_result_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_future_result.length === 2) {
    Q.fcall(this._handler.get_future_result.bind(this._handler),
      args.ff,
      args.timeout_millis
    ).then(function(result) {
      var result_obj = new ClientService_get_future_result_result({success: result});
      output.writeMessageBegin("get_future_result", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_get_future_result_result(err);
        output.writeMessageBegin("get_future_result", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_future_result", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_future_result(args.ff, args.timeout_millis, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_get_future_result_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_future_result", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_future_result", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_future_get_result_as_arrays = function(seqid, input, output) {
  var args = new ClientService_future_get_result_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_get_result_as_arrays.length === 2) {
    Q.fcall(this._handler.future_get_result_as_arrays.bind(this._handler),
      args.ff,
      args.timeout_millis
    ).then(function(result) {
      var result_obj = new ClientService_future_get_result_as_arrays_result({success: result});
      output.writeMessageBegin("future_get_result_as_arrays", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_future_get_result_as_arrays_result(err);
        output.writeMessageBegin("future_get_result_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_get_result_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.future_get_result_as_arrays(args.ff, args.timeout_millis, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_future_get_result_as_arrays_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("future_get_result_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_get_result_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_get_future_result_as_arrays = function(seqid, input, output) {
  var args = new ClientService_get_future_result_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_future_result_as_arrays.length === 2) {
    Q.fcall(this._handler.get_future_result_as_arrays.bind(this._handler),
      args.ff,
      args.timeout_millis
    ).then(function(result) {
      var result_obj = new ClientService_get_future_result_as_arrays_result({success: result});
      output.writeMessageBegin("get_future_result_as_arrays", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_get_future_result_as_arrays_result(err);
        output.writeMessageBegin("get_future_result_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_future_result_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_future_result_as_arrays(args.ff, args.timeout_millis, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_get_future_result_as_arrays_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_future_result_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_future_result_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_future_get_result_serialized = function(seqid, input, output) {
  var args = new ClientService_future_get_result_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_get_result_serialized.length === 2) {
    Q.fcall(this._handler.future_get_result_serialized.bind(this._handler),
      args.ff,
      args.timeout_millis
    ).then(function(result) {
      var result_obj = new ClientService_future_get_result_serialized_result({success: result});
      output.writeMessageBegin("future_get_result_serialized", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_future_get_result_serialized_result(err);
        output.writeMessageBegin("future_get_result_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_get_result_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.future_get_result_serialized(args.ff, args.timeout_millis, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_future_get_result_serialized_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("future_get_result_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_get_result_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_get_future_result_serialized = function(seqid, input, output) {
  var args = new ClientService_get_future_result_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_future_result_serialized.length === 2) {
    Q.fcall(this._handler.get_future_result_serialized.bind(this._handler),
      args.ff,
      args.timeout_millis
    ).then(function(result) {
      var result_obj = new ClientService_get_future_result_serialized_result({success: result});
      output.writeMessageBegin("get_future_result_serialized", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_get_future_result_serialized_result(err);
        output.writeMessageBegin("get_future_result_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_future_result_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_future_result_serialized(args.ff, args.timeout_millis, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_get_future_result_serialized_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_future_result_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_future_result_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_future_is_empty = function(seqid, input, output) {
  var args = new ClientService_future_is_empty_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_is_empty.length === 1) {
    Q.fcall(this._handler.future_is_empty.bind(this._handler),
      args.ff
    ).then(function(result) {
      var result_obj = new ClientService_future_is_empty_result({success: result});
      output.writeMessageBegin("future_is_empty", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_future_is_empty_result(err);
        output.writeMessageBegin("future_is_empty", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_is_empty", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.future_is_empty(args.ff, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_future_is_empty_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("future_is_empty", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_is_empty", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_future_is_full = function(seqid, input, output) {
  var args = new ClientService_future_is_full_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_is_full.length === 1) {
    Q.fcall(this._handler.future_is_full.bind(this._handler),
      args.ff
    ).then(function(result) {
      var result_obj = new ClientService_future_is_full_result({success: result});
      output.writeMessageBegin("future_is_full", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_future_is_full_result(err);
        output.writeMessageBegin("future_is_full", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_is_full", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.future_is_full(args.ff, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_future_is_full_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("future_is_full", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_is_full", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_future_is_cancelled = function(seqid, input, output) {
  var args = new ClientService_future_is_cancelled_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_is_cancelled.length === 1) {
    Q.fcall(this._handler.future_is_cancelled.bind(this._handler),
      args.ff
    ).then(function(result) {
      var result_obj = new ClientService_future_is_cancelled_result({success: result});
      output.writeMessageBegin("future_is_cancelled", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_future_is_cancelled_result(err);
        output.writeMessageBegin("future_is_cancelled", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_is_cancelled", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.future_is_cancelled(args.ff, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_future_is_cancelled_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("future_is_cancelled", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_is_cancelled", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_future_has_outstanding = function(seqid, input, output) {
  var args = new ClientService_future_has_outstanding_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_has_outstanding.length === 1) {
    Q.fcall(this._handler.future_has_outstanding.bind(this._handler),
      args.ff
    ).then(function(result) {
      var result_obj = new ClientService_future_has_outstanding_result({success: result});
      output.writeMessageBegin("future_has_outstanding", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_future_has_outstanding_result(err);
        output.writeMessageBegin("future_has_outstanding", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_has_outstanding", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.future_has_outstanding(args.ff, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_future_has_outstanding_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("future_has_outstanding", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_has_outstanding", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_future_close = function(seqid, input, output) {
  var args = new ClientService_future_close_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_close.length === 1) {
    Q.fcall(this._handler.future_close.bind(this._handler),
      args.ff
    ).then(function(result) {
      var result_obj = new ClientService_future_close_result({success: result});
      output.writeMessageBegin("future_close", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_future_close_result(err);
        output.writeMessageBegin("future_close", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.future_close(args.ff, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_future_close_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("future_close", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_close_future = function(seqid, input, output) {
  var args = new ClientService_close_future_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.close_future.length === 1) {
    Q.fcall(this._handler.close_future.bind(this._handler),
      args.ff
    ).then(function(result) {
      var result_obj = new ClientService_close_future_result({success: result});
      output.writeMessageBegin("close_future", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_close_future_result(err);
        output.writeMessageBegin("close_future", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_future", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.close_future(args.ff, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_close_future_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("close_future", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_future", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_scanner_open = function(seqid, input, output) {
  var args = new ClientService_scanner_open_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scanner_open.length === 3) {
    Q.fcall(this._handler.scanner_open.bind(this._handler),
      args.ns,
      args.table_name,
      args.scan_spec
    ).then(function(result) {
      var result_obj = new ClientService_scanner_open_result({success: result});
      output.writeMessageBegin("scanner_open", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_scanner_open_result(err);
        output.writeMessageBegin("scanner_open", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.scanner_open(args.ns, args.table_name, args.scan_spec, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_scanner_open_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("scanner_open", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_open_scanner = function(seqid, input, output) {
  var args = new ClientService_open_scanner_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.open_scanner.length === 3) {
    Q.fcall(this._handler.open_scanner.bind(this._handler),
      args.ns,
      args.table_name,
      args.scan_spec
    ).then(function(result) {
      var result_obj = new ClientService_open_scanner_result({success: result});
      output.writeMessageBegin("open_scanner", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_open_scanner_result(err);
        output.writeMessageBegin("open_scanner", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open_scanner", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.open_scanner(args.ns, args.table_name, args.scan_spec, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_open_scanner_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("open_scanner", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open_scanner", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_async_scanner_open = function(seqid, input, output) {
  var args = new ClientService_async_scanner_open_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_scanner_open.length === 4) {
    Q.fcall(this._handler.async_scanner_open.bind(this._handler),
      args.ns,
      args.table_name,
      args.future,
      args.scan_spec
    ).then(function(result) {
      var result_obj = new ClientService_async_scanner_open_result({success: result});
      output.writeMessageBegin("async_scanner_open", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_async_scanner_open_result(err);
        output.writeMessageBegin("async_scanner_open", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_scanner_open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.async_scanner_open(args.ns, args.table_name, args.future, args.scan_spec, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_async_scanner_open_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("async_scanner_open", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_scanner_open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_open_scanner_async = function(seqid, input, output) {
  var args = new ClientService_open_scanner_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.open_scanner_async.length === 4) {
    Q.fcall(this._handler.open_scanner_async.bind(this._handler),
      args.ns,
      args.table_name,
      args.future,
      args.scan_spec
    ).then(function(result) {
      var result_obj = new ClientService_open_scanner_async_result({success: result});
      output.writeMessageBegin("open_scanner_async", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_open_scanner_async_result(err);
        output.writeMessageBegin("open_scanner_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open_scanner_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.open_scanner_async(args.ns, args.table_name, args.future, args.scan_spec, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_open_scanner_async_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("open_scanner_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open_scanner_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_scanner_close = function(seqid, input, output) {
  var args = new ClientService_scanner_close_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scanner_close.length === 1) {
    Q.fcall(this._handler.scanner_close.bind(this._handler),
      args.scanner
    ).then(function(result) {
      var result_obj = new ClientService_scanner_close_result({success: result});
      output.writeMessageBegin("scanner_close", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_scanner_close_result(err);
        output.writeMessageBegin("scanner_close", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.scanner_close(args.scanner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_scanner_close_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("scanner_close", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_close_scanner = function(seqid, input, output) {
  var args = new ClientService_close_scanner_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.close_scanner.length === 1) {
    Q.fcall(this._handler.close_scanner.bind(this._handler),
      args.scanner
    ).then(function(result) {
      var result_obj = new ClientService_close_scanner_result({success: result});
      output.writeMessageBegin("close_scanner", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_close_scanner_result(err);
        output.writeMessageBegin("close_scanner", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_scanner", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.close_scanner(args.scanner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_close_scanner_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("close_scanner", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_scanner", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_async_scanner_cancel = function(seqid, input, output) {
  var args = new ClientService_async_scanner_cancel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_scanner_cancel.length === 1) {
    Q.fcall(this._handler.async_scanner_cancel.bind(this._handler),
      args.scanner
    ).then(function(result) {
      var result_obj = new ClientService_async_scanner_cancel_result({success: result});
      output.writeMessageBegin("async_scanner_cancel", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_async_scanner_cancel_result(err);
        output.writeMessageBegin("async_scanner_cancel", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_scanner_cancel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.async_scanner_cancel(args.scanner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_async_scanner_cancel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("async_scanner_cancel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_scanner_cancel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_cancel_scanner_async = function(seqid, input, output) {
  var args = new ClientService_cancel_scanner_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancel_scanner_async.length === 1) {
    Q.fcall(this._handler.cancel_scanner_async.bind(this._handler),
      args.scanner
    ).then(function(result) {
      var result_obj = new ClientService_cancel_scanner_async_result({success: result});
      output.writeMessageBegin("cancel_scanner_async", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_cancel_scanner_async_result(err);
        output.writeMessageBegin("cancel_scanner_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancel_scanner_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.cancel_scanner_async(args.scanner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_cancel_scanner_async_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("cancel_scanner_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancel_scanner_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_async_scanner_close = function(seqid, input, output) {
  var args = new ClientService_async_scanner_close_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_scanner_close.length === 1) {
    Q.fcall(this._handler.async_scanner_close.bind(this._handler),
      args.scanner
    ).then(function(result) {
      var result_obj = new ClientService_async_scanner_close_result({success: result});
      output.writeMessageBegin("async_scanner_close", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_async_scanner_close_result(err);
        output.writeMessageBegin("async_scanner_close", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_scanner_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.async_scanner_close(args.scanner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_async_scanner_close_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("async_scanner_close", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_scanner_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_close_scanner_async = function(seqid, input, output) {
  var args = new ClientService_close_scanner_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.close_scanner_async.length === 1) {
    Q.fcall(this._handler.close_scanner_async.bind(this._handler),
      args.scanner
    ).then(function(result) {
      var result_obj = new ClientService_close_scanner_async_result({success: result});
      output.writeMessageBegin("close_scanner_async", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_close_scanner_async_result(err);
        output.writeMessageBegin("close_scanner_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_scanner_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.close_scanner_async(args.scanner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_close_scanner_async_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("close_scanner_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_scanner_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_scanner_get_cells = function(seqid, input, output) {
  var args = new ClientService_scanner_get_cells_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scanner_get_cells.length === 1) {
    Q.fcall(this._handler.scanner_get_cells.bind(this._handler),
      args.scanner
    ).then(function(result) {
      var result_obj = new ClientService_scanner_get_cells_result({success: result});
      output.writeMessageBegin("scanner_get_cells", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_scanner_get_cells_result(err);
        output.writeMessageBegin("scanner_get_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_get_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.scanner_get_cells(args.scanner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_scanner_get_cells_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("scanner_get_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_get_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_next_cells = function(seqid, input, output) {
  var args = new ClientService_next_cells_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.next_cells.length === 1) {
    Q.fcall(this._handler.next_cells.bind(this._handler),
      args.scanner
    ).then(function(result) {
      var result_obj = new ClientService_next_cells_result({success: result});
      output.writeMessageBegin("next_cells", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_next_cells_result(err);
        output.writeMessageBegin("next_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("next_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.next_cells(args.scanner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_next_cells_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("next_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("next_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_scanner_get_cells_as_arrays = function(seqid, input, output) {
  var args = new ClientService_scanner_get_cells_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scanner_get_cells_as_arrays.length === 1) {
    Q.fcall(this._handler.scanner_get_cells_as_arrays.bind(this._handler),
      args.scanner
    ).then(function(result) {
      var result_obj = new ClientService_scanner_get_cells_as_arrays_result({success: result});
      output.writeMessageBegin("scanner_get_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_scanner_get_cells_as_arrays_result(err);
        output.writeMessageBegin("scanner_get_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_get_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.scanner_get_cells_as_arrays(args.scanner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_scanner_get_cells_as_arrays_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("scanner_get_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_get_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_next_cells_as_arrays = function(seqid, input, output) {
  var args = new ClientService_next_cells_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.next_cells_as_arrays.length === 1) {
    Q.fcall(this._handler.next_cells_as_arrays.bind(this._handler),
      args.scanner
    ).then(function(result) {
      var result_obj = new ClientService_next_cells_as_arrays_result({success: result});
      output.writeMessageBegin("next_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_next_cells_as_arrays_result(err);
        output.writeMessageBegin("next_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("next_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.next_cells_as_arrays(args.scanner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_next_cells_as_arrays_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("next_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("next_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_scanner_get_cells_serialized = function(seqid, input, output) {
  var args = new ClientService_scanner_get_cells_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scanner_get_cells_serialized.length === 1) {
    Q.fcall(this._handler.scanner_get_cells_serialized.bind(this._handler),
      args.scanner
    ).then(function(result) {
      var result_obj = new ClientService_scanner_get_cells_serialized_result({success: result});
      output.writeMessageBegin("scanner_get_cells_serialized", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_scanner_get_cells_serialized_result(err);
        output.writeMessageBegin("scanner_get_cells_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_get_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.scanner_get_cells_serialized(args.scanner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_scanner_get_cells_serialized_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("scanner_get_cells_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_get_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_next_cells_serialized = function(seqid, input, output) {
  var args = new ClientService_next_cells_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.next_cells_serialized.length === 1) {
    Q.fcall(this._handler.next_cells_serialized.bind(this._handler),
      args.scanner
    ).then(function(result) {
      var result_obj = new ClientService_next_cells_serialized_result({success: result});
      output.writeMessageBegin("next_cells_serialized", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_next_cells_serialized_result(err);
        output.writeMessageBegin("next_cells_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("next_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.next_cells_serialized(args.scanner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_next_cells_serialized_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("next_cells_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("next_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_scanner_get_row = function(seqid, input, output) {
  var args = new ClientService_scanner_get_row_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scanner_get_row.length === 1) {
    Q.fcall(this._handler.scanner_get_row.bind(this._handler),
      args.scanner
    ).then(function(result) {
      var result_obj = new ClientService_scanner_get_row_result({success: result});
      output.writeMessageBegin("scanner_get_row", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_scanner_get_row_result(err);
        output.writeMessageBegin("scanner_get_row", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_get_row", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.scanner_get_row(args.scanner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_scanner_get_row_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("scanner_get_row", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_get_row", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_next_row = function(seqid, input, output) {
  var args = new ClientService_next_row_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.next_row.length === 1) {
    Q.fcall(this._handler.next_row.bind(this._handler),
      args.scanner
    ).then(function(result) {
      var result_obj = new ClientService_next_row_result({success: result});
      output.writeMessageBegin("next_row", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_next_row_result(err);
        output.writeMessageBegin("next_row", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("next_row", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.next_row(args.scanner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_next_row_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("next_row", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("next_row", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_scanner_get_row_as_arrays = function(seqid, input, output) {
  var args = new ClientService_scanner_get_row_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scanner_get_row_as_arrays.length === 1) {
    Q.fcall(this._handler.scanner_get_row_as_arrays.bind(this._handler),
      args.scanner
    ).then(function(result) {
      var result_obj = new ClientService_scanner_get_row_as_arrays_result({success: result});
      output.writeMessageBegin("scanner_get_row_as_arrays", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_scanner_get_row_as_arrays_result(err);
        output.writeMessageBegin("scanner_get_row_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_get_row_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.scanner_get_row_as_arrays(args.scanner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_scanner_get_row_as_arrays_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("scanner_get_row_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_get_row_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_next_row_as_arrays = function(seqid, input, output) {
  var args = new ClientService_next_row_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.next_row_as_arrays.length === 1) {
    Q.fcall(this._handler.next_row_as_arrays.bind(this._handler),
      args.scanner
    ).then(function(result) {
      var result_obj = new ClientService_next_row_as_arrays_result({success: result});
      output.writeMessageBegin("next_row_as_arrays", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_next_row_as_arrays_result(err);
        output.writeMessageBegin("next_row_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("next_row_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.next_row_as_arrays(args.scanner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_next_row_as_arrays_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("next_row_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("next_row_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_scanner_get_row_serialized = function(seqid, input, output) {
  var args = new ClientService_scanner_get_row_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scanner_get_row_serialized.length === 1) {
    Q.fcall(this._handler.scanner_get_row_serialized.bind(this._handler),
      args.scanner
    ).then(function(result) {
      var result_obj = new ClientService_scanner_get_row_serialized_result({success: result});
      output.writeMessageBegin("scanner_get_row_serialized", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_scanner_get_row_serialized_result(err);
        output.writeMessageBegin("scanner_get_row_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_get_row_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.scanner_get_row_serialized(args.scanner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_scanner_get_row_serialized_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("scanner_get_row_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_get_row_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_next_row_serialized = function(seqid, input, output) {
  var args = new ClientService_next_row_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.next_row_serialized.length === 1) {
    Q.fcall(this._handler.next_row_serialized.bind(this._handler),
      args.scanner
    ).then(function(result) {
      var result_obj = new ClientService_next_row_serialized_result({success: result});
      output.writeMessageBegin("next_row_serialized", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_next_row_serialized_result(err);
        output.writeMessageBegin("next_row_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("next_row_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.next_row_serialized(args.scanner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_next_row_serialized_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("next_row_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("next_row_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_get_row = function(seqid, input, output) {
  var args = new ClientService_get_row_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_row.length === 3) {
    Q.fcall(this._handler.get_row.bind(this._handler),
      args.ns,
      args.table_name,
      args.row
    ).then(function(result) {
      var result_obj = new ClientService_get_row_result({success: result});
      output.writeMessageBegin("get_row", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_get_row_result(err);
        output.writeMessageBegin("get_row", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_row", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_row(args.ns, args.table_name, args.row, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_get_row_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_row", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_row", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_get_row_as_arrays = function(seqid, input, output) {
  var args = new ClientService_get_row_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_row_as_arrays.length === 3) {
    Q.fcall(this._handler.get_row_as_arrays.bind(this._handler),
      args.ns,
      args.name,
      args.row
    ).then(function(result) {
      var result_obj = new ClientService_get_row_as_arrays_result({success: result});
      output.writeMessageBegin("get_row_as_arrays", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_get_row_as_arrays_result(err);
        output.writeMessageBegin("get_row_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_row_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_row_as_arrays(args.ns, args.name, args.row, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_get_row_as_arrays_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_row_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_row_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_get_row_serialized = function(seqid, input, output) {
  var args = new ClientService_get_row_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_row_serialized.length === 3) {
    Q.fcall(this._handler.get_row_serialized.bind(this._handler),
      args.ns,
      args.table_name,
      args.row
    ).then(function(result) {
      var result_obj = new ClientService_get_row_serialized_result({success: result});
      output.writeMessageBegin("get_row_serialized", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_get_row_serialized_result(err);
        output.writeMessageBegin("get_row_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_row_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_row_serialized(args.ns, args.table_name, args.row, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_get_row_serialized_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_row_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_row_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_get_cell = function(seqid, input, output) {
  var args = new ClientService_get_cell_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_cell.length === 4) {
    Q.fcall(this._handler.get_cell.bind(this._handler),
      args.ns,
      args.table_name,
      args.row,
      args.column
    ).then(function(result) {
      var result_obj = new ClientService_get_cell_result({success: result});
      output.writeMessageBegin("get_cell", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_get_cell_result(err);
        output.writeMessageBegin("get_cell", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_cell", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_cell(args.ns, args.table_name, args.row, args.column, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_get_cell_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_cell", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_cell", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_get_cells = function(seqid, input, output) {
  var args = new ClientService_get_cells_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_cells.length === 3) {
    Q.fcall(this._handler.get_cells.bind(this._handler),
      args.ns,
      args.table_name,
      args.scan_spec
    ).then(function(result) {
      var result_obj = new ClientService_get_cells_result({success: result});
      output.writeMessageBegin("get_cells", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_get_cells_result(err);
        output.writeMessageBegin("get_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_cells(args.ns, args.table_name, args.scan_spec, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_get_cells_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_get_cells_as_arrays = function(seqid, input, output) {
  var args = new ClientService_get_cells_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_cells_as_arrays.length === 3) {
    Q.fcall(this._handler.get_cells_as_arrays.bind(this._handler),
      args.ns,
      args.name,
      args.scan_spec
    ).then(function(result) {
      var result_obj = new ClientService_get_cells_as_arrays_result({success: result});
      output.writeMessageBegin("get_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_get_cells_as_arrays_result(err);
        output.writeMessageBegin("get_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_cells_as_arrays(args.ns, args.name, args.scan_spec, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_get_cells_as_arrays_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_get_cells_serialized = function(seqid, input, output) {
  var args = new ClientService_get_cells_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_cells_serialized.length === 3) {
    Q.fcall(this._handler.get_cells_serialized.bind(this._handler),
      args.ns,
      args.name,
      args.scan_spec
    ).then(function(result) {
      var result_obj = new ClientService_get_cells_serialized_result({success: result});
      output.writeMessageBegin("get_cells_serialized", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_get_cells_serialized_result(err);
        output.writeMessageBegin("get_cells_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_cells_serialized(args.ns, args.name, args.scan_spec, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_get_cells_serialized_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_cells_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_shared_mutator_refresh = function(seqid, input, output) {
  var args = new ClientService_shared_mutator_refresh_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.shared_mutator_refresh.length === 3) {
    Q.fcall(this._handler.shared_mutator_refresh.bind(this._handler),
      args.ns,
      args.table_name,
      args.mutate_spec
    ).then(function(result) {
      var result_obj = new ClientService_shared_mutator_refresh_result({success: result});
      output.writeMessageBegin("shared_mutator_refresh", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_shared_mutator_refresh_result(err);
        output.writeMessageBegin("shared_mutator_refresh", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shared_mutator_refresh", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.shared_mutator_refresh(args.ns, args.table_name, args.mutate_spec, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_shared_mutator_refresh_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("shared_mutator_refresh", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shared_mutator_refresh", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_refresh_shared_mutator = function(seqid, input, output) {
  var args = new ClientService_refresh_shared_mutator_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.refresh_shared_mutator.length === 3) {
    Q.fcall(this._handler.refresh_shared_mutator.bind(this._handler),
      args.ns,
      args.table_name,
      args.mutate_spec
    ).then(function(result) {
      var result_obj = new ClientService_refresh_shared_mutator_result({success: result});
      output.writeMessageBegin("refresh_shared_mutator", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_refresh_shared_mutator_result(err);
        output.writeMessageBegin("refresh_shared_mutator", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("refresh_shared_mutator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.refresh_shared_mutator(args.ns, args.table_name, args.mutate_spec, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_refresh_shared_mutator_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("refresh_shared_mutator", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("refresh_shared_mutator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_shared_mutator_set_cells = function(seqid, input, output) {
  var args = new ClientService_shared_mutator_set_cells_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.shared_mutator_set_cells.length === 4) {
    Q.fcall(this._handler.shared_mutator_set_cells.bind(this._handler),
      args.ns,
      args.table_name,
      args.mutate_spec,
      args.cells
    ).then(function(result) {
      var result_obj = new ClientService_shared_mutator_set_cells_result({success: result});
      output.writeMessageBegin("shared_mutator_set_cells", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_shared_mutator_set_cells_result(err);
        output.writeMessageBegin("shared_mutator_set_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shared_mutator_set_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.shared_mutator_set_cells(args.ns, args.table_name, args.mutate_spec, args.cells, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_shared_mutator_set_cells_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("shared_mutator_set_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shared_mutator_set_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_offer_cells = function(seqid, input, output) {
  var args = new ClientService_offer_cells_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.offer_cells.length === 4) {
    Q.fcall(this._handler.offer_cells.bind(this._handler),
      args.ns,
      args.table_name,
      args.mutate_spec,
      args.cells
    ).then(function(result) {
      var result_obj = new ClientService_offer_cells_result({success: result});
      output.writeMessageBegin("offer_cells", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_offer_cells_result(err);
        output.writeMessageBegin("offer_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("offer_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.offer_cells(args.ns, args.table_name, args.mutate_spec, args.cells, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_offer_cells_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("offer_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("offer_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_shared_mutator_set_cells_as_arrays = function(seqid, input, output) {
  var args = new ClientService_shared_mutator_set_cells_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.shared_mutator_set_cells_as_arrays.length === 4) {
    Q.fcall(this._handler.shared_mutator_set_cells_as_arrays.bind(this._handler),
      args.ns,
      args.table_name,
      args.mutate_spec,
      args.cells
    ).then(function(result) {
      var result_obj = new ClientService_shared_mutator_set_cells_as_arrays_result({success: result});
      output.writeMessageBegin("shared_mutator_set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_shared_mutator_set_cells_as_arrays_result(err);
        output.writeMessageBegin("shared_mutator_set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shared_mutator_set_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.shared_mutator_set_cells_as_arrays(args.ns, args.table_name, args.mutate_spec, args.cells, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_shared_mutator_set_cells_as_arrays_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("shared_mutator_set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shared_mutator_set_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_offer_cells_as_arrays = function(seqid, input, output) {
  var args = new ClientService_offer_cells_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.offer_cells_as_arrays.length === 4) {
    Q.fcall(this._handler.offer_cells_as_arrays.bind(this._handler),
      args.ns,
      args.table_name,
      args.mutate_spec,
      args.cells
    ).then(function(result) {
      var result_obj = new ClientService_offer_cells_as_arrays_result({success: result});
      output.writeMessageBegin("offer_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_offer_cells_as_arrays_result(err);
        output.writeMessageBegin("offer_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("offer_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.offer_cells_as_arrays(args.ns, args.table_name, args.mutate_spec, args.cells, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_offer_cells_as_arrays_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("offer_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("offer_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_shared_mutator_set_cell = function(seqid, input, output) {
  var args = new ClientService_shared_mutator_set_cell_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.shared_mutator_set_cell.length === 4) {
    Q.fcall(this._handler.shared_mutator_set_cell.bind(this._handler),
      args.ns,
      args.table_name,
      args.mutate_spec,
      args.cell
    ).then(function(result) {
      var result_obj = new ClientService_shared_mutator_set_cell_result({success: result});
      output.writeMessageBegin("shared_mutator_set_cell", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_shared_mutator_set_cell_result(err);
        output.writeMessageBegin("shared_mutator_set_cell", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shared_mutator_set_cell", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.shared_mutator_set_cell(args.ns, args.table_name, args.mutate_spec, args.cell, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_shared_mutator_set_cell_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("shared_mutator_set_cell", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shared_mutator_set_cell", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_offer_cell = function(seqid, input, output) {
  var args = new ClientService_offer_cell_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.offer_cell.length === 4) {
    Q.fcall(this._handler.offer_cell.bind(this._handler),
      args.ns,
      args.table_name,
      args.mutate_spec,
      args.cell
    ).then(function(result) {
      var result_obj = new ClientService_offer_cell_result({success: result});
      output.writeMessageBegin("offer_cell", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_offer_cell_result(err);
        output.writeMessageBegin("offer_cell", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("offer_cell", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.offer_cell(args.ns, args.table_name, args.mutate_spec, args.cell, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_offer_cell_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("offer_cell", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("offer_cell", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_shared_mutator_set_cell_as_array = function(seqid, input, output) {
  var args = new ClientService_shared_mutator_set_cell_as_array_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.shared_mutator_set_cell_as_array.length === 4) {
    Q.fcall(this._handler.shared_mutator_set_cell_as_array.bind(this._handler),
      args.ns,
      args.table_name,
      args.mutate_spec,
      args.cell
    ).then(function(result) {
      var result_obj = new ClientService_shared_mutator_set_cell_as_array_result({success: result});
      output.writeMessageBegin("shared_mutator_set_cell_as_array", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_shared_mutator_set_cell_as_array_result(err);
        output.writeMessageBegin("shared_mutator_set_cell_as_array", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shared_mutator_set_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.shared_mutator_set_cell_as_array(args.ns, args.table_name, args.mutate_spec, args.cell, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_shared_mutator_set_cell_as_array_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("shared_mutator_set_cell_as_array", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shared_mutator_set_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_offer_cell_as_array = function(seqid, input, output) {
  var args = new ClientService_offer_cell_as_array_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.offer_cell_as_array.length === 4) {
    Q.fcall(this._handler.offer_cell_as_array.bind(this._handler),
      args.ns,
      args.table_name,
      args.mutate_spec,
      args.cell
    ).then(function(result) {
      var result_obj = new ClientService_offer_cell_as_array_result({success: result});
      output.writeMessageBegin("offer_cell_as_array", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_offer_cell_as_array_result(err);
        output.writeMessageBegin("offer_cell_as_array", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("offer_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.offer_cell_as_array(args.ns, args.table_name, args.mutate_spec, args.cell, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_offer_cell_as_array_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("offer_cell_as_array", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("offer_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_mutator_open = function(seqid, input, output) {
  var args = new ClientService_mutator_open_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutator_open.length === 4) {
    Q.fcall(this._handler.mutator_open.bind(this._handler),
      args.ns,
      args.table_name,
      args.flags,
      args.flush_interval
    ).then(function(result) {
      var result_obj = new ClientService_mutator_open_result({success: result});
      output.writeMessageBegin("mutator_open", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_mutator_open_result(err);
        output.writeMessageBegin("mutator_open", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.mutator_open(args.ns, args.table_name, args.flags, args.flush_interval, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_mutator_open_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("mutator_open", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_open_mutator = function(seqid, input, output) {
  var args = new ClientService_open_mutator_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.open_mutator.length === 4) {
    Q.fcall(this._handler.open_mutator.bind(this._handler),
      args.ns,
      args.table_name,
      args.flags,
      args.flush_interval
    ).then(function(result) {
      var result_obj = new ClientService_open_mutator_result({success: result});
      output.writeMessageBegin("open_mutator", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_open_mutator_result(err);
        output.writeMessageBegin("open_mutator", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open_mutator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.open_mutator(args.ns, args.table_name, args.flags, args.flush_interval, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_open_mutator_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("open_mutator", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open_mutator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_async_mutator_open = function(seqid, input, output) {
  var args = new ClientService_async_mutator_open_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_mutator_open.length === 4) {
    Q.fcall(this._handler.async_mutator_open.bind(this._handler),
      args.ns,
      args.table_name,
      args.future,
      args.flags
    ).then(function(result) {
      var result_obj = new ClientService_async_mutator_open_result({success: result});
      output.writeMessageBegin("async_mutator_open", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_async_mutator_open_result(err);
        output.writeMessageBegin("async_mutator_open", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.async_mutator_open(args.ns, args.table_name, args.future, args.flags, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_async_mutator_open_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("async_mutator_open", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_open_mutator_async = function(seqid, input, output) {
  var args = new ClientService_open_mutator_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.open_mutator_async.length === 4) {
    Q.fcall(this._handler.open_mutator_async.bind(this._handler),
      args.ns,
      args.table_name,
      args.future,
      args.flags
    ).then(function(result) {
      var result_obj = new ClientService_open_mutator_async_result({success: result});
      output.writeMessageBegin("open_mutator_async", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_open_mutator_async_result(err);
        output.writeMessageBegin("open_mutator_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open_mutator_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.open_mutator_async(args.ns, args.table_name, args.future, args.flags, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_open_mutator_async_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("open_mutator_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open_mutator_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_mutator_close = function(seqid, input, output) {
  var args = new ClientService_mutator_close_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutator_close.length === 1) {
    Q.fcall(this._handler.mutator_close.bind(this._handler),
      args.mutator
    ).then(function(result) {
      var result_obj = new ClientService_mutator_close_result({success: result});
      output.writeMessageBegin("mutator_close", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_mutator_close_result(err);
        output.writeMessageBegin("mutator_close", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.mutator_close(args.mutator, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_mutator_close_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("mutator_close", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_close_mutator = function(seqid, input, output) {
  var args = new ClientService_close_mutator_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.close_mutator.length === 1) {
    Q.fcall(this._handler.close_mutator.bind(this._handler),
      args.mutator
    ).then(function(result) {
      var result_obj = new ClientService_close_mutator_result({success: result});
      output.writeMessageBegin("close_mutator", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_close_mutator_result(err);
        output.writeMessageBegin("close_mutator", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_mutator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.close_mutator(args.mutator, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_close_mutator_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("close_mutator", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_mutator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_async_mutator_cancel = function(seqid, input, output) {
  var args = new ClientService_async_mutator_cancel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_mutator_cancel.length === 1) {
    Q.fcall(this._handler.async_mutator_cancel.bind(this._handler),
      args.mutator
    ).then(function(result) {
      var result_obj = new ClientService_async_mutator_cancel_result({success: result});
      output.writeMessageBegin("async_mutator_cancel", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_async_mutator_cancel_result(err);
        output.writeMessageBegin("async_mutator_cancel", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_cancel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.async_mutator_cancel(args.mutator, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_async_mutator_cancel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("async_mutator_cancel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_cancel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_cancel_mutator_async = function(seqid, input, output) {
  var args = new ClientService_cancel_mutator_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancel_mutator_async.length === 1) {
    Q.fcall(this._handler.cancel_mutator_async.bind(this._handler),
      args.mutator
    ).then(function(result) {
      var result_obj = new ClientService_cancel_mutator_async_result({success: result});
      output.writeMessageBegin("cancel_mutator_async", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_cancel_mutator_async_result(err);
        output.writeMessageBegin("cancel_mutator_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancel_mutator_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.cancel_mutator_async(args.mutator, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_cancel_mutator_async_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("cancel_mutator_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancel_mutator_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_async_mutator_close = function(seqid, input, output) {
  var args = new ClientService_async_mutator_close_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_mutator_close.length === 1) {
    Q.fcall(this._handler.async_mutator_close.bind(this._handler),
      args.mutator
    ).then(function(result) {
      var result_obj = new ClientService_async_mutator_close_result({success: result});
      output.writeMessageBegin("async_mutator_close", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_async_mutator_close_result(err);
        output.writeMessageBegin("async_mutator_close", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.async_mutator_close(args.mutator, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_async_mutator_close_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("async_mutator_close", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_close_mutator_async = function(seqid, input, output) {
  var args = new ClientService_close_mutator_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.close_mutator_async.length === 1) {
    Q.fcall(this._handler.close_mutator_async.bind(this._handler),
      args.mutator
    ).then(function(result) {
      var result_obj = new ClientService_close_mutator_async_result({success: result});
      output.writeMessageBegin("close_mutator_async", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_close_mutator_async_result(err);
        output.writeMessageBegin("close_mutator_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_mutator_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.close_mutator_async(args.mutator, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_close_mutator_async_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("close_mutator_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_mutator_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_mutator_set_cell = function(seqid, input, output) {
  var args = new ClientService_mutator_set_cell_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutator_set_cell.length === 2) {
    Q.fcall(this._handler.mutator_set_cell.bind(this._handler),
      args.mutator,
      args.cell
    ).then(function(result) {
      var result_obj = new ClientService_mutator_set_cell_result({success: result});
      output.writeMessageBegin("mutator_set_cell", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_mutator_set_cell_result(err);
        output.writeMessageBegin("mutator_set_cell", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_set_cell", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.mutator_set_cell(args.mutator, args.cell, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_mutator_set_cell_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("mutator_set_cell", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_set_cell", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_set_cell = function(seqid, input, output) {
  var args = new ClientService_set_cell_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cell.length === 3) {
    Q.fcall(this._handler.set_cell.bind(this._handler),
      args.ns,
      args.table_name,
      args.cell
    ).then(function(result) {
      var result_obj = new ClientService_set_cell_result({success: result});
      output.writeMessageBegin("set_cell", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_set_cell_result(err);
        output.writeMessageBegin("set_cell", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cell", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_cell(args.ns, args.table_name, args.cell, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_set_cell_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_cell", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cell", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_mutator_set_cell_as_array = function(seqid, input, output) {
  var args = new ClientService_mutator_set_cell_as_array_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutator_set_cell_as_array.length === 2) {
    Q.fcall(this._handler.mutator_set_cell_as_array.bind(this._handler),
      args.mutator,
      args.cell
    ).then(function(result) {
      var result_obj = new ClientService_mutator_set_cell_as_array_result({success: result});
      output.writeMessageBegin("mutator_set_cell_as_array", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_mutator_set_cell_as_array_result(err);
        output.writeMessageBegin("mutator_set_cell_as_array", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_set_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.mutator_set_cell_as_array(args.mutator, args.cell, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_mutator_set_cell_as_array_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("mutator_set_cell_as_array", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_set_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_set_cell_as_array = function(seqid, input, output) {
  var args = new ClientService_set_cell_as_array_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cell_as_array.length === 3) {
    Q.fcall(this._handler.set_cell_as_array.bind(this._handler),
      args.ns,
      args.table_name,
      args.cell
    ).then(function(result) {
      var result_obj = new ClientService_set_cell_as_array_result({success: result});
      output.writeMessageBegin("set_cell_as_array", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_set_cell_as_array_result(err);
        output.writeMessageBegin("set_cell_as_array", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_cell_as_array(args.ns, args.table_name, args.cell, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_set_cell_as_array_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_cell_as_array", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_mutator_set_cells = function(seqid, input, output) {
  var args = new ClientService_mutator_set_cells_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutator_set_cells.length === 2) {
    Q.fcall(this._handler.mutator_set_cells.bind(this._handler),
      args.mutator,
      args.cells
    ).then(function(result) {
      var result_obj = new ClientService_mutator_set_cells_result({success: result});
      output.writeMessageBegin("mutator_set_cells", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_mutator_set_cells_result(err);
        output.writeMessageBegin("mutator_set_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_set_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.mutator_set_cells(args.mutator, args.cells, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_mutator_set_cells_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("mutator_set_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_set_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_set_cells = function(seqid, input, output) {
  var args = new ClientService_set_cells_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cells.length === 3) {
    Q.fcall(this._handler.set_cells.bind(this._handler),
      args.ns,
      args.table_name,
      args.cells
    ).then(function(result) {
      var result_obj = new ClientService_set_cells_result({success: result});
      output.writeMessageBegin("set_cells", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_set_cells_result(err);
        output.writeMessageBegin("set_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_cells(args.ns, args.table_name, args.cells, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_set_cells_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_mutator_set_cells_as_arrays = function(seqid, input, output) {
  var args = new ClientService_mutator_set_cells_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutator_set_cells_as_arrays.length === 2) {
    Q.fcall(this._handler.mutator_set_cells_as_arrays.bind(this._handler),
      args.mutator,
      args.cells
    ).then(function(result) {
      var result_obj = new ClientService_mutator_set_cells_as_arrays_result({success: result});
      output.writeMessageBegin("mutator_set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_mutator_set_cells_as_arrays_result(err);
        output.writeMessageBegin("mutator_set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_set_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.mutator_set_cells_as_arrays(args.mutator, args.cells, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_mutator_set_cells_as_arrays_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("mutator_set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_set_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_set_cells_as_arrays = function(seqid, input, output) {
  var args = new ClientService_set_cells_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cells_as_arrays.length === 3) {
    Q.fcall(this._handler.set_cells_as_arrays.bind(this._handler),
      args.ns,
      args.table_name,
      args.cells
    ).then(function(result) {
      var result_obj = new ClientService_set_cells_as_arrays_result({success: result});
      output.writeMessageBegin("set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_set_cells_as_arrays_result(err);
        output.writeMessageBegin("set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_cells_as_arrays(args.ns, args.table_name, args.cells, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_set_cells_as_arrays_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_mutator_set_cells_serialized = function(seqid, input, output) {
  var args = new ClientService_mutator_set_cells_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutator_set_cells_serialized.length === 3) {
    Q.fcall(this._handler.mutator_set_cells_serialized.bind(this._handler),
      args.mutator,
      args.cells,
      args.flush
    ).then(function(result) {
      var result_obj = new ClientService_mutator_set_cells_serialized_result({success: result});
      output.writeMessageBegin("mutator_set_cells_serialized", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_mutator_set_cells_serialized_result(err);
        output.writeMessageBegin("mutator_set_cells_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_set_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.mutator_set_cells_serialized(args.mutator, args.cells, args.flush, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_mutator_set_cells_serialized_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("mutator_set_cells_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_set_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_set_cells_serialized = function(seqid, input, output) {
  var args = new ClientService_set_cells_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cells_serialized.length === 3) {
    Q.fcall(this._handler.set_cells_serialized.bind(this._handler),
      args.ns,
      args.table_name,
      args.cells
    ).then(function(result) {
      var result_obj = new ClientService_set_cells_serialized_result({success: result});
      output.writeMessageBegin("set_cells_serialized", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_set_cells_serialized_result(err);
        output.writeMessageBegin("set_cells_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_cells_serialized(args.ns, args.table_name, args.cells, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_set_cells_serialized_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_cells_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_mutator_flush = function(seqid, input, output) {
  var args = new ClientService_mutator_flush_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutator_flush.length === 1) {
    Q.fcall(this._handler.mutator_flush.bind(this._handler),
      args.mutator
    ).then(function(result) {
      var result_obj = new ClientService_mutator_flush_result({success: result});
      output.writeMessageBegin("mutator_flush", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_mutator_flush_result(err);
        output.writeMessageBegin("mutator_flush", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_flush", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.mutator_flush(args.mutator, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_mutator_flush_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("mutator_flush", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_flush", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_flush_mutator = function(seqid, input, output) {
  var args = new ClientService_flush_mutator_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.flush_mutator.length === 1) {
    Q.fcall(this._handler.flush_mutator.bind(this._handler),
      args.mutator
    ).then(function(result) {
      var result_obj = new ClientService_flush_mutator_result({success: result});
      output.writeMessageBegin("flush_mutator", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_flush_mutator_result(err);
        output.writeMessageBegin("flush_mutator", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("flush_mutator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.flush_mutator(args.mutator, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_flush_mutator_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("flush_mutator", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("flush_mutator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_async_mutator_set_cell = function(seqid, input, output) {
  var args = new ClientService_async_mutator_set_cell_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_mutator_set_cell.length === 2) {
    Q.fcall(this._handler.async_mutator_set_cell.bind(this._handler),
      args.mutator,
      args.cell
    ).then(function(result) {
      var result_obj = new ClientService_async_mutator_set_cell_result({success: result});
      output.writeMessageBegin("async_mutator_set_cell", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_async_mutator_set_cell_result(err);
        output.writeMessageBegin("async_mutator_set_cell", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_set_cell", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.async_mutator_set_cell(args.mutator, args.cell, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_async_mutator_set_cell_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("async_mutator_set_cell", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_set_cell", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_set_cell_async = function(seqid, input, output) {
  var args = new ClientService_set_cell_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cell_async.length === 2) {
    Q.fcall(this._handler.set_cell_async.bind(this._handler),
      args.mutator,
      args.cell
    ).then(function(result) {
      var result_obj = new ClientService_set_cell_async_result({success: result});
      output.writeMessageBegin("set_cell_async", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_set_cell_async_result(err);
        output.writeMessageBegin("set_cell_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cell_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_cell_async(args.mutator, args.cell, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_set_cell_async_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_cell_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cell_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_async_mutator_set_cell_as_array = function(seqid, input, output) {
  var args = new ClientService_async_mutator_set_cell_as_array_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_mutator_set_cell_as_array.length === 2) {
    Q.fcall(this._handler.async_mutator_set_cell_as_array.bind(this._handler),
      args.mutator,
      args.cell
    ).then(function(result) {
      var result_obj = new ClientService_async_mutator_set_cell_as_array_result({success: result});
      output.writeMessageBegin("async_mutator_set_cell_as_array", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_async_mutator_set_cell_as_array_result(err);
        output.writeMessageBegin("async_mutator_set_cell_as_array", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_set_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.async_mutator_set_cell_as_array(args.mutator, args.cell, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_async_mutator_set_cell_as_array_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("async_mutator_set_cell_as_array", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_set_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_set_cell_as_array_async = function(seqid, input, output) {
  var args = new ClientService_set_cell_as_array_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cell_as_array_async.length === 2) {
    Q.fcall(this._handler.set_cell_as_array_async.bind(this._handler),
      args.mutator,
      args.cell
    ).then(function(result) {
      var result_obj = new ClientService_set_cell_as_array_async_result({success: result});
      output.writeMessageBegin("set_cell_as_array_async", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_set_cell_as_array_async_result(err);
        output.writeMessageBegin("set_cell_as_array_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cell_as_array_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_cell_as_array_async(args.mutator, args.cell, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_set_cell_as_array_async_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_cell_as_array_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cell_as_array_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_async_mutator_set_cells = function(seqid, input, output) {
  var args = new ClientService_async_mutator_set_cells_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_mutator_set_cells.length === 2) {
    Q.fcall(this._handler.async_mutator_set_cells.bind(this._handler),
      args.mutator,
      args.cells
    ).then(function(result) {
      var result_obj = new ClientService_async_mutator_set_cells_result({success: result});
      output.writeMessageBegin("async_mutator_set_cells", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_async_mutator_set_cells_result(err);
        output.writeMessageBegin("async_mutator_set_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_set_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.async_mutator_set_cells(args.mutator, args.cells, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_async_mutator_set_cells_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("async_mutator_set_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_set_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_set_cells_async = function(seqid, input, output) {
  var args = new ClientService_set_cells_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cells_async.length === 2) {
    Q.fcall(this._handler.set_cells_async.bind(this._handler),
      args.mutator,
      args.cells
    ).then(function(result) {
      var result_obj = new ClientService_set_cells_async_result({success: result});
      output.writeMessageBegin("set_cells_async", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_set_cells_async_result(err);
        output.writeMessageBegin("set_cells_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cells_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_cells_async(args.mutator, args.cells, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_set_cells_async_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_cells_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cells_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_async_mutator_set_cells_as_arrays = function(seqid, input, output) {
  var args = new ClientService_async_mutator_set_cells_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_mutator_set_cells_as_arrays.length === 2) {
    Q.fcall(this._handler.async_mutator_set_cells_as_arrays.bind(this._handler),
      args.mutator,
      args.cells
    ).then(function(result) {
      var result_obj = new ClientService_async_mutator_set_cells_as_arrays_result({success: result});
      output.writeMessageBegin("async_mutator_set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_async_mutator_set_cells_as_arrays_result(err);
        output.writeMessageBegin("async_mutator_set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_set_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.async_mutator_set_cells_as_arrays(args.mutator, args.cells, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_async_mutator_set_cells_as_arrays_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("async_mutator_set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_set_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_set_cells_as_arrays_async = function(seqid, input, output) {
  var args = new ClientService_set_cells_as_arrays_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cells_as_arrays_async.length === 2) {
    Q.fcall(this._handler.set_cells_as_arrays_async.bind(this._handler),
      args.mutator,
      args.cells
    ).then(function(result) {
      var result_obj = new ClientService_set_cells_as_arrays_async_result({success: result});
      output.writeMessageBegin("set_cells_as_arrays_async", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_set_cells_as_arrays_async_result(err);
        output.writeMessageBegin("set_cells_as_arrays_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cells_as_arrays_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_cells_as_arrays_async(args.mutator, args.cells, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_set_cells_as_arrays_async_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_cells_as_arrays_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cells_as_arrays_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_async_mutator_set_cells_serialized = function(seqid, input, output) {
  var args = new ClientService_async_mutator_set_cells_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_mutator_set_cells_serialized.length === 3) {
    Q.fcall(this._handler.async_mutator_set_cells_serialized.bind(this._handler),
      args.mutator,
      args.cells,
      args.flush
    ).then(function(result) {
      var result_obj = new ClientService_async_mutator_set_cells_serialized_result({success: result});
      output.writeMessageBegin("async_mutator_set_cells_serialized", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_async_mutator_set_cells_serialized_result(err);
        output.writeMessageBegin("async_mutator_set_cells_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_set_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.async_mutator_set_cells_serialized(args.mutator, args.cells, args.flush, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_async_mutator_set_cells_serialized_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("async_mutator_set_cells_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_set_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_set_cells_serialized_async = function(seqid, input, output) {
  var args = new ClientService_set_cells_serialized_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cells_serialized_async.length === 3) {
    Q.fcall(this._handler.set_cells_serialized_async.bind(this._handler),
      args.mutator,
      args.cells,
      args.flush
    ).then(function(result) {
      var result_obj = new ClientService_set_cells_serialized_async_result({success: result});
      output.writeMessageBegin("set_cells_serialized_async", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_set_cells_serialized_async_result(err);
        output.writeMessageBegin("set_cells_serialized_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cells_serialized_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_cells_serialized_async(args.mutator, args.cells, args.flush, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_set_cells_serialized_async_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_cells_serialized_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cells_serialized_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_async_mutator_flush = function(seqid, input, output) {
  var args = new ClientService_async_mutator_flush_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_mutator_flush.length === 1) {
    Q.fcall(this._handler.async_mutator_flush.bind(this._handler),
      args.mutator
    ).then(function(result) {
      var result_obj = new ClientService_async_mutator_flush_result({success: result});
      output.writeMessageBegin("async_mutator_flush", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_async_mutator_flush_result(err);
        output.writeMessageBegin("async_mutator_flush", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_flush", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.async_mutator_flush(args.mutator, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_async_mutator_flush_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("async_mutator_flush", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_flush", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_flush_mutator_async = function(seqid, input, output) {
  var args = new ClientService_flush_mutator_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.flush_mutator_async.length === 1) {
    Q.fcall(this._handler.flush_mutator_async.bind(this._handler),
      args.mutator
    ).then(function(result) {
      var result_obj = new ClientService_flush_mutator_async_result({success: result});
      output.writeMessageBegin("flush_mutator_async", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_flush_mutator_async_result(err);
        output.writeMessageBegin("flush_mutator_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("flush_mutator_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.flush_mutator_async(args.mutator, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_flush_mutator_async_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("flush_mutator_async", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("flush_mutator_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_namespace_exists = function(seqid, input, output) {
  var args = new ClientService_namespace_exists_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.namespace_exists.length === 1) {
    Q.fcall(this._handler.namespace_exists.bind(this._handler),
      args.ns
    ).then(function(result) {
      var result_obj = new ClientService_namespace_exists_result({success: result});
      output.writeMessageBegin("namespace_exists", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_namespace_exists_result(err);
        output.writeMessageBegin("namespace_exists", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("namespace_exists", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.namespace_exists(args.ns, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_namespace_exists_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("namespace_exists", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("namespace_exists", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_exists_namespace = function(seqid, input, output) {
  var args = new ClientService_exists_namespace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exists_namespace.length === 1) {
    Q.fcall(this._handler.exists_namespace.bind(this._handler),
      args.ns
    ).then(function(result) {
      var result_obj = new ClientService_exists_namespace_result({success: result});
      output.writeMessageBegin("exists_namespace", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_exists_namespace_result(err);
        output.writeMessageBegin("exists_namespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exists_namespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.exists_namespace(args.ns, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_exists_namespace_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("exists_namespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exists_namespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_exists_table = function(seqid, input, output) {
  var args = new ClientService_exists_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exists_table.length === 2) {
    Q.fcall(this._handler.exists_table.bind(this._handler),
      args.ns,
      args.name
    ).then(function(result) {
      var result_obj = new ClientService_exists_table_result({success: result});
      output.writeMessageBegin("exists_table", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_exists_table_result(err);
        output.writeMessageBegin("exists_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exists_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.exists_table(args.ns, args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_exists_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("exists_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exists_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_table_exists = function(seqid, input, output) {
  var args = new ClientService_table_exists_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_exists.length === 2) {
    Q.fcall(this._handler.table_exists.bind(this._handler),
      args.ns,
      args.name
    ).then(function(result) {
      var result_obj = new ClientService_table_exists_result({success: result});
      output.writeMessageBegin("table_exists", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_table_exists_result(err);
        output.writeMessageBegin("table_exists", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_exists", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.table_exists(args.ns, args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_table_exists_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("table_exists", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_exists", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_table_get_id = function(seqid, input, output) {
  var args = new ClientService_table_get_id_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_get_id.length === 2) {
    Q.fcall(this._handler.table_get_id.bind(this._handler),
      args.ns,
      args.table_name
    ).then(function(result) {
      var result_obj = new ClientService_table_get_id_result({success: result});
      output.writeMessageBegin("table_get_id", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_table_get_id_result(err);
        output.writeMessageBegin("table_get_id", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_get_id", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.table_get_id(args.ns, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_table_get_id_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("table_get_id", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_get_id", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_get_table_id = function(seqid, input, output) {
  var args = new ClientService_get_table_id_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_id.length === 2) {
    Q.fcall(this._handler.get_table_id.bind(this._handler),
      args.ns,
      args.table_name
    ).then(function(result) {
      var result_obj = new ClientService_get_table_id_result({success: result});
      output.writeMessageBegin("get_table_id", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_get_table_id_result(err);
        output.writeMessageBegin("get_table_id", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_id", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_table_id(args.ns, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_get_table_id_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_table_id", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_id", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_table_get_schema_str = function(seqid, input, output) {
  var args = new ClientService_table_get_schema_str_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_get_schema_str.length === 2) {
    Q.fcall(this._handler.table_get_schema_str.bind(this._handler),
      args.ns,
      args.table_name
    ).then(function(result) {
      var result_obj = new ClientService_table_get_schema_str_result({success: result});
      output.writeMessageBegin("table_get_schema_str", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_table_get_schema_str_result(err);
        output.writeMessageBegin("table_get_schema_str", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_get_schema_str", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.table_get_schema_str(args.ns, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_table_get_schema_str_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("table_get_schema_str", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_get_schema_str", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_get_schema_str = function(seqid, input, output) {
  var args = new ClientService_get_schema_str_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_schema_str.length === 2) {
    Q.fcall(this._handler.get_schema_str.bind(this._handler),
      args.ns,
      args.table_name
    ).then(function(result) {
      var result_obj = new ClientService_get_schema_str_result({success: result});
      output.writeMessageBegin("get_schema_str", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_get_schema_str_result(err);
        output.writeMessageBegin("get_schema_str", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_schema_str", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_schema_str(args.ns, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_get_schema_str_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_schema_str", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_schema_str", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_table_get_schema_str_with_ids = function(seqid, input, output) {
  var args = new ClientService_table_get_schema_str_with_ids_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_get_schema_str_with_ids.length === 2) {
    Q.fcall(this._handler.table_get_schema_str_with_ids.bind(this._handler),
      args.ns,
      args.table_name
    ).then(function(result) {
      var result_obj = new ClientService_table_get_schema_str_with_ids_result({success: result});
      output.writeMessageBegin("table_get_schema_str_with_ids", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_table_get_schema_str_with_ids_result(err);
        output.writeMessageBegin("table_get_schema_str_with_ids", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_get_schema_str_with_ids", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.table_get_schema_str_with_ids(args.ns, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_table_get_schema_str_with_ids_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("table_get_schema_str_with_ids", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_get_schema_str_with_ids", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_get_schema_str_with_ids = function(seqid, input, output) {
  var args = new ClientService_get_schema_str_with_ids_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_schema_str_with_ids.length === 2) {
    Q.fcall(this._handler.get_schema_str_with_ids.bind(this._handler),
      args.ns,
      args.table_name
    ).then(function(result) {
      var result_obj = new ClientService_get_schema_str_with_ids_result({success: result});
      output.writeMessageBegin("get_schema_str_with_ids", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_get_schema_str_with_ids_result(err);
        output.writeMessageBegin("get_schema_str_with_ids", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_schema_str_with_ids", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_schema_str_with_ids(args.ns, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_get_schema_str_with_ids_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_schema_str_with_ids", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_schema_str_with_ids", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_table_get_schema = function(seqid, input, output) {
  var args = new ClientService_table_get_schema_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_get_schema.length === 2) {
    Q.fcall(this._handler.table_get_schema.bind(this._handler),
      args.ns,
      args.table_name
    ).then(function(result) {
      var result_obj = new ClientService_table_get_schema_result({success: result});
      output.writeMessageBegin("table_get_schema", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_table_get_schema_result(err);
        output.writeMessageBegin("table_get_schema", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_get_schema", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.table_get_schema(args.ns, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_table_get_schema_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("table_get_schema", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_get_schema", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_get_schema = function(seqid, input, output) {
  var args = new ClientService_get_schema_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_schema.length === 2) {
    Q.fcall(this._handler.get_schema.bind(this._handler),
      args.ns,
      args.table_name
    ).then(function(result) {
      var result_obj = new ClientService_get_schema_result({success: result});
      output.writeMessageBegin("get_schema", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_get_schema_result(err);
        output.writeMessageBegin("get_schema", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_schema", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_schema(args.ns, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_get_schema_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_schema", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_schema", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_get_tables = function(seqid, input, output) {
  var args = new ClientService_get_tables_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_tables.length === 1) {
    Q.fcall(this._handler.get_tables.bind(this._handler),
      args.ns
    ).then(function(result) {
      var result_obj = new ClientService_get_tables_result({success: result});
      output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_get_tables_result(err);
        output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_tables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_tables(args.ns, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_get_tables_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_tables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_namespace_get_listing = function(seqid, input, output) {
  var args = new ClientService_namespace_get_listing_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.namespace_get_listing.length === 1) {
    Q.fcall(this._handler.namespace_get_listing.bind(this._handler),
      args.ns
    ).then(function(result) {
      var result_obj = new ClientService_namespace_get_listing_result({success: result});
      output.writeMessageBegin("namespace_get_listing", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_namespace_get_listing_result(err);
        output.writeMessageBegin("namespace_get_listing", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("namespace_get_listing", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.namespace_get_listing(args.ns, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_namespace_get_listing_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("namespace_get_listing", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("namespace_get_listing", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_get_listing = function(seqid, input, output) {
  var args = new ClientService_get_listing_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_listing.length === 1) {
    Q.fcall(this._handler.get_listing.bind(this._handler),
      args.ns
    ).then(function(result) {
      var result_obj = new ClientService_get_listing_result({success: result});
      output.writeMessageBegin("get_listing", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_get_listing_result(err);
        output.writeMessageBegin("get_listing", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_listing", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_listing(args.ns, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_get_listing_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_listing", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_listing", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_table_get_splits = function(seqid, input, output) {
  var args = new ClientService_table_get_splits_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_get_splits.length === 2) {
    Q.fcall(this._handler.table_get_splits.bind(this._handler),
      args.ns,
      args.table_name
    ).then(function(result) {
      var result_obj = new ClientService_table_get_splits_result({success: result});
      output.writeMessageBegin("table_get_splits", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_table_get_splits_result(err);
        output.writeMessageBegin("table_get_splits", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_get_splits", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.table_get_splits(args.ns, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_table_get_splits_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("table_get_splits", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_get_splits", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_get_table_splits = function(seqid, input, output) {
  var args = new ClientService_get_table_splits_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_splits.length === 2) {
    Q.fcall(this._handler.get_table_splits.bind(this._handler),
      args.ns,
      args.table_name
    ).then(function(result) {
      var result_obj = new ClientService_get_table_splits_result({success: result});
      output.writeMessageBegin("get_table_splits", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_get_table_splits_result(err);
        output.writeMessageBegin("get_table_splits", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_splits", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_table_splits(args.ns, args.table_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_get_table_splits_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_table_splits", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_splits", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_namespace_drop = function(seqid, input, output) {
  var args = new ClientService_namespace_drop_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.namespace_drop.length === 2) {
    Q.fcall(this._handler.namespace_drop.bind(this._handler),
      args.ns,
      args.if_exists
    ).then(function(result) {
      var result_obj = new ClientService_namespace_drop_result({success: result});
      output.writeMessageBegin("namespace_drop", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_namespace_drop_result(err);
        output.writeMessageBegin("namespace_drop", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("namespace_drop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.namespace_drop(args.ns, args.if_exists, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_namespace_drop_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("namespace_drop", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("namespace_drop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_drop_namespace = function(seqid, input, output) {
  var args = new ClientService_drop_namespace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_namespace.length === 2) {
    Q.fcall(this._handler.drop_namespace.bind(this._handler),
      args.ns,
      args.if_exists
    ).then(function(result) {
      var result_obj = new ClientService_drop_namespace_result({success: result});
      output.writeMessageBegin("drop_namespace", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_drop_namespace_result(err);
        output.writeMessageBegin("drop_namespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("drop_namespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.drop_namespace(args.ns, args.if_exists, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_drop_namespace_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("drop_namespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("drop_namespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_rename_table = function(seqid, input, output) {
  var args = new ClientService_rename_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rename_table.length === 3) {
    Q.fcall(this._handler.rename_table.bind(this._handler),
      args.ns,
      args.name,
      args.new_name
    ).then(function(result) {
      var result_obj = new ClientService_rename_table_result({success: result});
      output.writeMessageBegin("rename_table", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_rename_table_result(err);
        output.writeMessageBegin("rename_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("rename_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.rename_table(args.ns, args.name, args.new_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_rename_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("rename_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("rename_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_table_rename = function(seqid, input, output) {
  var args = new ClientService_table_rename_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_rename.length === 3) {
    Q.fcall(this._handler.table_rename.bind(this._handler),
      args.ns,
      args.name,
      args.new_name
    ).then(function(result) {
      var result_obj = new ClientService_table_rename_result({success: result});
      output.writeMessageBegin("table_rename", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_table_rename_result(err);
        output.writeMessageBegin("table_rename", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_rename", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.table_rename(args.ns, args.name, args.new_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_table_rename_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("table_rename", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_rename", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_drop_table = function(seqid, input, output) {
  var args = new ClientService_drop_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_table.length === 3) {
    Q.fcall(this._handler.drop_table.bind(this._handler),
      args.ns,
      args.name,
      args.if_exists
    ).then(function(result) {
      var result_obj = new ClientService_drop_table_result({success: result});
      output.writeMessageBegin("drop_table", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_drop_table_result(err);
        output.writeMessageBegin("drop_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("drop_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.drop_table(args.ns, args.name, args.if_exists, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_drop_table_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("drop_table", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("drop_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_table_drop = function(seqid, input, output) {
  var args = new ClientService_table_drop_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_drop.length === 3) {
    Q.fcall(this._handler.table_drop.bind(this._handler),
      args.ns,
      args.name,
      args.if_exists
    ).then(function(result) {
      var result_obj = new ClientService_table_drop_result({success: result});
      output.writeMessageBegin("table_drop", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_table_drop_result(err);
        output.writeMessageBegin("table_drop", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_drop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.table_drop(args.ns, args.name, args.if_exists, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_table_drop_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("table_drop", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_drop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_generate_guid = function(seqid, input, output) {
  var args = new ClientService_generate_guid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.generate_guid.length === 0) {
    Q.fcall(this._handler.generate_guid.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ClientService_generate_guid_result({success: result});
      output.writeMessageBegin("generate_guid", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("generate_guid", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.generate_guid(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_generate_guid_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("generate_guid", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("generate_guid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_create_cell_unique = function(seqid, input, output) {
  var args = new ClientService_create_cell_unique_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_cell_unique.length === 4) {
    Q.fcall(this._handler.create_cell_unique.bind(this._handler),
      args.ns,
      args.table_name,
      args.key,
      args.value
    ).then(function(result) {
      var result_obj = new ClientService_create_cell_unique_result({success: result});
      output.writeMessageBegin("create_cell_unique", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_create_cell_unique_result(err);
        output.writeMessageBegin("create_cell_unique", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_cell_unique", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.create_cell_unique(args.ns, args.table_name, args.key, args.value, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_create_cell_unique_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_cell_unique", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_cell_unique", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_error_get_text = function(seqid, input, output) {
  var args = new ClientService_error_get_text_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.error_get_text.length === 1) {
    Q.fcall(this._handler.error_get_text.bind(this._handler),
      args.error_code
    ).then(function(result) {
      var result_obj = new ClientService_error_get_text_result({success: result});
      output.writeMessageBegin("error_get_text", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("error_get_text", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.error_get_text(args.error_code, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_error_get_text_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("error_get_text", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("error_get_text", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_status = function(seqid, input, output) {
  var args = new ClientService_status_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.status.length === 0) {
    Q.fcall(this._handler.status.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ClientService_status_result({success: result});
      output.writeMessageBegin("status", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_status_result(err);
        output.writeMessageBegin("status", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("status", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.status(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_status_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("status", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("status", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_shutdown = function(seqid, input, output) {
  var args = new ClientService_shutdown_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.shutdown.length === 0) {
    Q.fcall(this._handler.shutdown.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ClientService_shutdown_result({success: result});
      output.writeMessageBegin("shutdown", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ClientException) {
        result = new ClientService_shutdown_result(err);
        output.writeMessageBegin("shutdown", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shutdown", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.shutdown(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ClientException) {
        result_obj = new ClientService_shutdown_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("shutdown", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shutdown", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
