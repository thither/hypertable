<?php
namespace Hypertable_ThriftGen;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Describes a schema.
 * <dl>
 *   <dt>access_groups</dt>
 *   <dd>Map of access groups</dd>
 * 
 *   <dt>column_families</dt>
 *   <dd>Map of column families</dd>
 * </dl>
 */
class Schema
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'access_groups',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\Hypertable_ThriftGen\AccessGroupSpec',
                ),
        ),
        2 => array(
            'var' => 'column_families',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\Hypertable_ThriftGen\ColumnFamilySpec',
                ),
        ),
        3 => array(
            'var' => 'generation',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        4 => array(
            'var' => 'version',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'group_commit_interval',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'access_group_defaults',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Hypertable_ThriftGen\AccessGroupOptions',
        ),
        7 => array(
            'var' => 'column_family_defaults',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Hypertable_ThriftGen\ColumnFamilyOptions',
        ),
    );

    /**
     * @var array
     */
    public $access_groups = null;
    /**
     * @var array
     */
    public $column_families = null;
    /**
     * @var int
     */
    public $generation = null;
    /**
     * @var int
     */
    public $version = null;
    /**
     * @var int
     */
    public $group_commit_interval = null;
    /**
     * @var \Hypertable_ThriftGen\AccessGroupOptions
     */
    public $access_group_defaults = null;
    /**
     * @var \Hypertable_ThriftGen\ColumnFamilyOptions
     */
    public $column_family_defaults = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['access_groups'])) {
                $this->access_groups = $vals['access_groups'];
            }
            if (isset($vals['column_families'])) {
                $this->column_families = $vals['column_families'];
            }
            if (isset($vals['generation'])) {
                $this->generation = $vals['generation'];
            }
            if (isset($vals['version'])) {
                $this->version = $vals['version'];
            }
            if (isset($vals['group_commit_interval'])) {
                $this->group_commit_interval = $vals['group_commit_interval'];
            }
            if (isset($vals['access_group_defaults'])) {
                $this->access_group_defaults = $vals['access_group_defaults'];
            }
            if (isset($vals['column_family_defaults'])) {
                $this->column_family_defaults = $vals['column_family_defaults'];
            }
        }
    }

    public function getName()
    {
        return 'Schema';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::MAP) {
                        $this->access_groups = array();
                        $_size49 = 0;
                        $_ktype50 = 0;
                        $_vtype51 = 0;
                        $xfer += $input->readMapBegin($_ktype50, $_vtype51, $_size49);
                        for ($_i53 = 0; $_i53 < $_size49; ++$_i53) {
                            $key54 = '';
                            $val55 = new \Hypertable_ThriftGen\AccessGroupSpec();
                            $xfer += $input->readString($key54);
                            $val55 = new \Hypertable_ThriftGen\AccessGroupSpec();
                            $xfer += $val55->read($input);
                            $this->access_groups[$key54] = $val55;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::MAP) {
                        $this->column_families = array();
                        $_size56 = 0;
                        $_ktype57 = 0;
                        $_vtype58 = 0;
                        $xfer += $input->readMapBegin($_ktype57, $_vtype58, $_size56);
                        for ($_i60 = 0; $_i60 < $_size56; ++$_i60) {
                            $key61 = '';
                            $val62 = new \Hypertable_ThriftGen\ColumnFamilySpec();
                            $xfer += $input->readString($key61);
                            $val62 = new \Hypertable_ThriftGen\ColumnFamilySpec();
                            $xfer += $val62->read($input);
                            $this->column_families[$key61] = $val62;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->generation);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->group_commit_interval);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->access_group_defaults = new \Hypertable_ThriftGen\AccessGroupOptions();
                        $xfer += $this->access_group_defaults->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRUCT) {
                        $this->column_family_defaults = new \Hypertable_ThriftGen\ColumnFamilyOptions();
                        $xfer += $this->column_family_defaults->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Schema');
        if ($this->access_groups !== null) {
            if (!is_array($this->access_groups)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('access_groups', TType::MAP, 1);
            $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->access_groups));
            foreach ($this->access_groups as $kiter63 => $viter64) {
                $xfer += $output->writeString($kiter63);
                $xfer += $viter64->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->column_families !== null) {
            if (!is_array($this->column_families)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('column_families', TType::MAP, 2);
            $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->column_families));
            foreach ($this->column_families as $kiter65 => $viter66) {
                $xfer += $output->writeString($kiter65);
                $xfer += $viter66->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->generation !== null) {
            $xfer += $output->writeFieldBegin('generation', TType::I64, 3);
            $xfer += $output->writeI64($this->generation);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->version !== null) {
            $xfer += $output->writeFieldBegin('version', TType::I32, 4);
            $xfer += $output->writeI32($this->version);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->group_commit_interval !== null) {
            $xfer += $output->writeFieldBegin('group_commit_interval', TType::I32, 5);
            $xfer += $output->writeI32($this->group_commit_interval);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->access_group_defaults !== null) {
            if (!is_object($this->access_group_defaults)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('access_group_defaults', TType::STRUCT, 6);
            $xfer += $this->access_group_defaults->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->column_family_defaults !== null) {
            if (!is_object($this->column_family_defaults)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('column_family_defaults', TType::STRUCT, 7);
            $xfer += $this->column_family_defaults->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
