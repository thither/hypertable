<?php
namespace Hypertable_ThriftGen;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * The client service mimics the C++ client API, with table, scanner and
 * mutator interface flattened.
 */
interface ClientServiceIf
{
    /**
     * Create a namespace
     * 
     * @param ns - namespace name
     * 
     * @param string $ns
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function namespace_create($ns);
    /**
     * @param string $ns
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function create_namespace($ns);
    /**
     * Create a table
     * 
     * @param ns - namespace id
     * @param table_name - table name
     * @param schema - schema of the table
     * 
     * @param int $ns
     * @param string $table_name
     * @param \Hypertable_ThriftGen\Schema $schema
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function table_create($ns, $table_name, \Hypertable_ThriftGen\Schema $schema);
    /**
     * Alter a table
     * 
     * @param ns - namespace id
     * @param table_name - table name
     * @param schema - schema of the table
     * 
     * @param int $ns
     * @param string $table_name
     * @param \Hypertable_ThriftGen\Schema $schema
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function table_alter($ns, $table_name, \Hypertable_ThriftGen\Schema $schema);
    /**
     * Refreshes the cached table information
     * 
     * @param ns - namespace
     * @param table_name - name of the table
     * 
     * @param int $ns
     * @param string $table_name
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function refresh_table($ns, $table_name);
    /**
     * Open a namespace
     * 
     * @param ns - namespace
     * @return value is guaranteed to be non-zero and unique
     * 
     * @param string $ns
     * @return int Opaque ID for a Namespace
     * 
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function namespace_open($ns);
    /**
     * @param string $ns
     * @return int Opaque ID for a Namespace
     * 
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function open_namespace($ns);
    /**
     * Close a namespace
     * 
     * @param ns - namespace
     * 
     * @param int $ns
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function namespace_close($ns);
    /**
     * @param int $ns
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function close_namespace($ns);
    /**
     * Open a future object
     * @param capacity - Amount of result data the future object can enqueue without blocking threads
     * 
     * @param int $capacity
     * @return int Opaque ID for a Future object
     * 
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function future_open($capacity);
    /**
     * @param int $capacity
     * @return int Opaque ID for a Future object
     * 
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function open_future($capacity);
    /**
     * Cancel tasks outstanding in a future object
     * @param ff - Future object
     * 
     * @param int $ff
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function future_cancel($ff);
    /**
     * @param int $ff
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function cancel_future($ff);
    /**
     * Fetch asynchronous results
     * @param ff - Future object which has the asynchronous results
     * @return - result from async scanner/mutator
     * 
     * @param int $ff
     * @param int $timeout_millis
     * @return \Hypertable_ThriftGen\Result Specifies a result object for asynchronous requests.
     * TODO: add support for update results
     * 
     * <dl>
     *   <dt>is_empty</dt>
     *   <dd>Indicates whether this object contains a result or not</dd>
     * 
     *   <dt>id</dt>
     *   <dd>Scanner/mutator id for which these results pertain to</dd>
     *   
     *   <dt>is_scan</dt>
     *   <dd>Indicates whether these are scan results or update results</dd>
     *   
     *   <dt>is_error</dt>
     *   <dd>Indicates whether the async request was successful or not</dd>
     *   
     *   <dt>error</dt>
     *   <dd>Error code</dd>
     * 
     *   <dt>error_msg</dt>
     *   <dd>Error message</dd>
     * 
     *   <dt>cells</dt>
     *   <dd>Cells returned by asynchronous scanner</dd>
     * </dl>
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function future_get_result($ff, $timeout_millis);
    /**
     * @param int $ff
     * @param int $timeout_millis
     * @return \Hypertable_ThriftGen\Result Specifies a result object for asynchronous requests.
     * TODO: add support for update results
     * 
     * <dl>
     *   <dt>is_empty</dt>
     *   <dd>Indicates whether this object contains a result or not</dd>
     * 
     *   <dt>id</dt>
     *   <dd>Scanner/mutator id for which these results pertain to</dd>
     *   
     *   <dt>is_scan</dt>
     *   <dd>Indicates whether these are scan results or update results</dd>
     *   
     *   <dt>is_error</dt>
     *   <dd>Indicates whether the async request was successful or not</dd>
     *   
     *   <dt>error</dt>
     *   <dd>Error code</dd>
     * 
     *   <dt>error_msg</dt>
     *   <dd>Error message</dd>
     * 
     *   <dt>cells</dt>
     *   <dd>Cells returned by asynchronous scanner</dd>
     * </dl>
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function get_future_result($ff, $timeout_millis);
    /**
     * Fetch asynchronous results
     * @param ff - Future object which has the asynchronous results
     * @return - result from async scanner/mutator
     * 
     * @param int $ff
     * @param int $timeout_millis
     * @return \Hypertable_ThriftGen\ResultAsArrays Specifies a result object for asynchronous requests.
     * TODO: add support for update results
     * 
     * <dl>
     *   <dt>is_empty</dt>
     *   <dd>Indicates whether this object contains a result or not</dd>
     * 
     *   <dt>id</dt>
     *   <dd>Scanner/mutator id for which these results pertain to</dd>
     *   
     *   <dt>is_scan</dt>
     *   <dd>Indicates whether these are scan results or update results</dd>
     *   
     *   <dt>is_error</dt>
     *   <dd>Indicates whether the async request was successful or not</dd>
     *   
     *   <dt>error</dt>
     *   <dd>Error code</dd>
     * 
     *   <dt>error_msg</dt>
     *   <dd>Error message</dd>
     * 
     *   <dt>cells</dt>
     *   <dd>Cells returned by asynchronous scanner</dd>
     * </dl>
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function future_get_result_as_arrays($ff, $timeout_millis);
    /**
     * @param int $ff
     * @param int $timeout_millis
     * @return \Hypertable_ThriftGen\ResultAsArrays Specifies a result object for asynchronous requests.
     * TODO: add support for update results
     * 
     * <dl>
     *   <dt>is_empty</dt>
     *   <dd>Indicates whether this object contains a result or not</dd>
     * 
     *   <dt>id</dt>
     *   <dd>Scanner/mutator id for which these results pertain to</dd>
     *   
     *   <dt>is_scan</dt>
     *   <dd>Indicates whether these are scan results or update results</dd>
     *   
     *   <dt>is_error</dt>
     *   <dd>Indicates whether the async request was successful or not</dd>
     *   
     *   <dt>error</dt>
     *   <dd>Error code</dd>
     * 
     *   <dt>error_msg</dt>
     *   <dd>Error message</dd>
     * 
     *   <dt>cells</dt>
     *   <dd>Cells returned by asynchronous scanner</dd>
     * </dl>
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function get_future_result_as_arrays($ff, $timeout_millis);
    /**
     * Fetch asynchronous results
     * @param ff - Future object which has the asynchronous results
     * @return - result from async scanner/mutator
     * 
     * @param int $ff
     * @param int $timeout_millis
     * @return \Hypertable_ThriftGen\ResultSerialized Specifies a serialized result object for asynchronous requests.
     * TODO: add support for update results
     * 
     * <dl>
     *   <dt>is_empty</dt>
     *   <dd>Indicates whether this object contains a result or not</dd>
     * 
     *   <dt>id</dt>
     *   <dd>Scanner/mutator id for which these results pertain to</dd>
     *   
     *   <dt>is_scan</dt>
     *   <dd>Indicates whether these are scan results or update results</dd>
     *   
     *   <dt>is_error</dt>
     *   <dd>Indicates whether the async request was successful or not</dd>
     *   
     *   <dt>error</dt>
     *   <dd>Error code</dd>
     * 
     *   <dt>error_msg</dt>
     *   <dd>Error message</dd>
     * 
     *   <dt>cells</dt>
     *   <dd>Cells returned by asynchronous scanner</dd>
     * </dl>
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function future_get_result_serialized($ff, $timeout_millis);
    /**
     * @param int $ff
     * @param int $timeout_millis
     * @return \Hypertable_ThriftGen\ResultSerialized Specifies a serialized result object for asynchronous requests.
     * TODO: add support for update results
     * 
     * <dl>
     *   <dt>is_empty</dt>
     *   <dd>Indicates whether this object contains a result or not</dd>
     * 
     *   <dt>id</dt>
     *   <dd>Scanner/mutator id for which these results pertain to</dd>
     *   
     *   <dt>is_scan</dt>
     *   <dd>Indicates whether these are scan results or update results</dd>
     *   
     *   <dt>is_error</dt>
     *   <dd>Indicates whether the async request was successful or not</dd>
     *   
     *   <dt>error</dt>
     *   <dd>Error code</dd>
     * 
     *   <dt>error_msg</dt>
     *   <dd>Error message</dd>
     * 
     *   <dt>cells</dt>
     *   <dd>Cells returned by asynchronous scanner</dd>
     * </dl>
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function get_future_result_serialized($ff, $timeout_millis);
    /**
     * Check if future object's queue is empty
     * 
     * @param int $ff
     * @return bool
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function future_is_empty($ff);
    /**
     * Check if future object's queue is full
     * 
     * @param int $ff
     * @return bool
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function future_is_full($ff);
    /**
     * Check if future object has been cancelled
     * 
     * @param int $ff
     * @return bool
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function future_is_cancelled($ff);
    /**
     * Check if future object has outstanding operations
     * 
     * @param int $ff
     * @return bool
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function future_has_outstanding($ff);
    /**
     * Close a future object
     * @param ff - the future object to be closed
     * 
     * @param int $ff
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function future_close($ff);
    /**
     * @param int $ff
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function close_future($ff);
    /**
     * Open a table scanner
     * @param ns - namespace id
     * @param table_name - table name
     * @param scan_spec - scan specification
     * 
     * @param int $ns
     * @param string $table_name
     * @param \Hypertable_ThriftGen\ScanSpec $scan_spec
     * @return int Opaque ID for a table scanner
     * 
     * A scanner is recommended for returning large amount of data, say a full
     * table dump.
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function scanner_open($ns, $table_name, \Hypertable_ThriftGen\ScanSpec $scan_spec);
    /**
     * @param int $ns
     * @param string $table_name
     * @param \Hypertable_ThriftGen\ScanSpec $scan_spec
     * @return int Opaque ID for a table scanner
     * 
     * A scanner is recommended for returning large amount of data, say a full
     * table dump.
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function open_scanner($ns, $table_name, \Hypertable_ThriftGen\ScanSpec $scan_spec);
    /**
     * Open an asynchronous table scanner
     * @param ns - namespace id
     * @param table_name - table name
     * @param future - callback object
     * @param scan_spec - scan specification
     * 
     * @param int $ns
     * @param string $table_name
     * @param int $future
     * @param \Hypertable_ThriftGen\ScanSpec $scan_spec
     * @return int Opaque ID for a asynchronous table scanner
     * 
     * A scanner is recommended for returning large amount of data, say a full
     * table dump.
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function async_scanner_open($ns, $table_name, $future, \Hypertable_ThriftGen\ScanSpec $scan_spec);
    /**
     * @param int $ns
     * @param string $table_name
     * @param int $future
     * @param \Hypertable_ThriftGen\ScanSpec $scan_spec
     * @return int Opaque ID for a asynchronous table scanner
     * 
     * A scanner is recommended for returning large amount of data, say a full
     * table dump.
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function open_scanner_async($ns, $table_name, $future, \Hypertable_ThriftGen\ScanSpec $scan_spec);
    /**
     * Close a table scanner
     * 
     * @param scanner - scanner id to close
     * 
     * @param int $scanner
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function scanner_close($scanner);
    /**
     * @param int $scanner
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function close_scanner($scanner);
    /**
     * Cancel a table scanner
     * 
     * @param scanner - scanner id to close
     * 
     * @param int $scanner
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function async_scanner_cancel($scanner);
    /**
     * @param int $scanner
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function cancel_scanner_async($scanner);
    /**
     * Close a table scanner
     * 
     * @param scanner - scanner id to close
     * 
     * @param int $scanner
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function async_scanner_close($scanner);
    /**
     * @param int $scanner
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function close_scanner_async($scanner);
    /**
     * Iterate over cells of a scanner
     * 
     * @param scanner - scanner id
     * 
     * @param int $scanner
     * @return \Hypertable_ThriftGen\Cell[]
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function scanner_get_cells($scanner);
    /**
     * @param int $scanner
     * @return \Hypertable_ThriftGen\Cell[]
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function next_cells($scanner);
    /**
     * @param int $scanner
     * @return string[][]
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function scanner_get_cells_as_arrays($scanner);
    /**
     * @param int $scanner
     * @return string[][]
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function next_cells_as_arrays($scanner);
    /**
     * Alternative interface returning buffer of serialized cells
     * 
     * @param int $scanner
     * @return string Binary buffer holding serialized sequence of cells
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function scanner_get_cells_serialized($scanner);
    /**
     * @param int $scanner
     * @return string Binary buffer holding serialized sequence of cells
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function next_cells_serialized($scanner);
    /**
     * Iterate over rows of a scanner
     * 
     * @param scanner - scanner id
     * 
     * @param int $scanner
     * @return \Hypertable_ThriftGen\Cell[]
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function scanner_get_row($scanner);
    /**
     * @param int $scanner
     * @return \Hypertable_ThriftGen\Cell[]
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function next_row($scanner);
    /**
     * Alternative interface using array as cell
     * 
     * @param int $scanner
     * @return string[][]
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function scanner_get_row_as_arrays($scanner);
    /**
     * @param int $scanner
     * @return string[][]
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function next_row_as_arrays($scanner);
    /**
     * Alternate interface returning a buffer of serialized cells for iterating by row
     * for a given scanner
     * 
     * @param scanner - scanner id
     * 
     * @param int $scanner
     * @return string Binary buffer holding serialized sequence of cells
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function scanner_get_row_serialized($scanner);
    /**
     * @param int $scanner
     * @return string Binary buffer holding serialized sequence of cells
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function next_row_serialized($scanner);
    /**
     * Get a row (convenience method for random access a row)
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @param row - row key
     * 
     * @return a list of cells (with row_keys unset)
     * 
     * @param int $ns
     * @param string $table_name
     * @param string $row
     * @return \Hypertable_ThriftGen\Cell[]
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function get_row($ns, $table_name, $row);
    /**
     * Alternative interface using array as cell
     * 
     * @param int $ns
     * @param string $name
     * @param string $row
     * @return string[][]
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function get_row_as_arrays($ns, $name, $row);
    /**
     * Alternative interface returning buffer of serialized cells
     * 
     * @param int $ns
     * @param string $table_name
     * @param string $row
     * @return string Binary buffer holding serialized sequence of cells
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function get_row_serialized($ns, $table_name, $row);
    /**
     * Get a cell (convenience method for random access a cell)
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @param row - row key
     * 
     * @param column - column name
     * 
     * @return value (byte sequence)
     * 
     * @param int $ns
     * @param string $table_name
     * @param string $row
     * @param string $column
     * @return string Value for table cell
     * 
     * Use binary instead of string to generate efficient type for Java.
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function get_cell($ns, $table_name, $row, $column);
    /**
     * Get cells (convenience method for access small amount of cells)
     * 
     * @param ns - namespace id
     *  
     * @param table_name - table name
     * 
     * @param scan_spec - scan specification
     * 
     * @return a list of cells (a cell with no row key set is assumed to have
     *         the same row key as the previous cell)
     * 
     * @param int $ns
     * @param string $table_name
     * @param \Hypertable_ThriftGen\ScanSpec $scan_spec
     * @return \Hypertable_ThriftGen\Cell[]
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function get_cells($ns, $table_name, \Hypertable_ThriftGen\ScanSpec $scan_spec);
    /**
     * Alternative interface using array as cell
     * 
     * @param int $ns
     * @param string $name
     * @param \Hypertable_ThriftGen\ScanSpec $scan_spec
     * @return string[][]
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function get_cells_as_arrays($ns, $name, \Hypertable_ThriftGen\ScanSpec $scan_spec);
    /**
     * Alternative interface returning buffer of serialized cells
     * 
     * @param int $ns
     * @param string $name
     * @param \Hypertable_ThriftGen\ScanSpec $scan_spec
     * @return string Binary buffer holding serialized sequence of cells
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function get_cells_serialized($ns, $name, \Hypertable_ThriftGen\ScanSpec $scan_spec);
    /**
     * Create a shared mutator with specified MutateSpec.
     * Delete and recreate it if the mutator exists.
     * 
     * @param ns - namespace id
     *  
     * @param table_name - table name
     * 
     * @param mutate_spec - mutator specification
     * 
     * 
     * @param int $ns
     * @param string $table_name
     * @param \Hypertable_ThriftGen\MutateSpec $mutate_spec
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function shared_mutator_refresh($ns, $table_name, \Hypertable_ThriftGen\MutateSpec $mutate_spec);
    /**
     * @param int $ns
     * @param string $table_name
     * @param \Hypertable_ThriftGen\MutateSpec $mutate_spec
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function refresh_shared_mutator($ns, $table_name, \Hypertable_ThriftGen\MutateSpec $mutate_spec);
    /**
     * Open a shared periodic mutator which causes cells to be written asyncronously.
     * Users beware: calling this method merely writes
     * cells to a local buffer and does not guarantee that the cells have been persisted.
     * If you want guaranteed durability, use the open_mutator+set_cells* interface instead.
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @param mutate_spec - mutator specification
     * 
     * @param cells - set of cells to be written
     * 
     * @param int $ns
     * @param string $table_name
     * @param \Hypertable_ThriftGen\MutateSpec $mutate_spec
     * @param \Hypertable_ThriftGen\Cell[] $cells
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function shared_mutator_set_cells($ns, $table_name, \Hypertable_ThriftGen\MutateSpec $mutate_spec, array $cells);
    /**
     * @param int $ns
     * @param string $table_name
     * @param \Hypertable_ThriftGen\MutateSpec $mutate_spec
     * @param \Hypertable_ThriftGen\Cell[] $cells
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function offer_cells($ns, $table_name, \Hypertable_ThriftGen\MutateSpec $mutate_spec, array $cells);
    /**
     * Alternative to offer_cell interface using array as cell
     * 
     * @param int $ns
     * @param string $table_name
     * @param \Hypertable_ThriftGen\MutateSpec $mutate_spec
     * @param string[][] $cells
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function shared_mutator_set_cells_as_arrays($ns, $table_name, \Hypertable_ThriftGen\MutateSpec $mutate_spec, array $cells);
    /**
     * @param int $ns
     * @param string $table_name
     * @param \Hypertable_ThriftGen\MutateSpec $mutate_spec
     * @param string[][] $cells
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function offer_cells_as_arrays($ns, $table_name, \Hypertable_ThriftGen\MutateSpec $mutate_spec, array $cells);
    /**
     * Open a shared periodic mutator which causes cells to be written asyncronously.
     * Users beware: calling this method merely writes
     * cells to a local buffer and does not guarantee that the cells have been persisted.
     * If you want guaranteed durability, use the open_mutator+set_cells* interface instead.
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @param mutate_spec - mutator specification
     * 
     * @param cell - cell to be written
     * 
     * @param int $ns
     * @param string $table_name
     * @param \Hypertable_ThriftGen\MutateSpec $mutate_spec
     * @param \Hypertable_ThriftGen\Cell $cell
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function shared_mutator_set_cell($ns, $table_name, \Hypertable_ThriftGen\MutateSpec $mutate_spec, \Hypertable_ThriftGen\Cell $cell);
    /**
     * @param int $ns
     * @param string $table_name
     * @param \Hypertable_ThriftGen\MutateSpec $mutate_spec
     * @param \Hypertable_ThriftGen\Cell $cell
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function offer_cell($ns, $table_name, \Hypertable_ThriftGen\MutateSpec $mutate_spec, \Hypertable_ThriftGen\Cell $cell);
    /**
     * Alternative to offer_cell interface using array as cell
     * 
     * @param int $ns
     * @param string $table_name
     * @param \Hypertable_ThriftGen\MutateSpec $mutate_spec
     * @param string[] $cell
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function shared_mutator_set_cell_as_array($ns, $table_name, \Hypertable_ThriftGen\MutateSpec $mutate_spec, $cell);
    /**
     * @param int $ns
     * @param string $table_name
     * @param \Hypertable_ThriftGen\MutateSpec $mutate_spec
     * @param string[] $cell
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function offer_cell_as_array($ns, $table_name, \Hypertable_ThriftGen\MutateSpec $mutate_spec, $cell);
    /**
     * Open a table mutator
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @param flags - mutator flags
     * 
     * @param flush_interval - auto-flush interval in milliseconds; 0 disables it.
     * 
     * @return mutator id
     * 
     * @param int $ns
     * @param string $table_name
     * @param int $flags
     * @param int $flush_interval
     * @return int Opaque ID for a table mutator
     * 
     * A mutator is recommended for injecting large amount of data (across
     * many calls to mutator methods)
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function mutator_open($ns, $table_name, $flags, $flush_interval);
    /**
     * @param int $ns
     * @param string $table_name
     * @param int $flags
     * @param int $flush_interval
     * @return int Opaque ID for a table mutator
     * 
     * A mutator is recommended for injecting large amount of data (across
     * many calls to mutator methods)
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function open_mutator($ns, $table_name, $flags, $flush_interval);
    /**
     * Open an asynchronous table mutator
     * 
     * @param ns - namespace id
     * @param table_name - table name
     * @param future - callback object
     * @param flags - mutator flags
     * 
     * @return mutator id
     * 
     * @param int $ns
     * @param string $table_name
     * @param int $future
     * @param int $flags
     * @return int Opaque ID for a asynchronous table mutator
     * 
     * A mutator is recommended for injecting large amount of data (across
     * many calls to mutator methods)
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function async_mutator_open($ns, $table_name, $future, $flags);
    /**
     * @param int $ns
     * @param string $table_name
     * @param int $future
     * @param int $flags
     * @return int Opaque ID for a asynchronous table mutator
     * 
     * A mutator is recommended for injecting large amount of data (across
     * many calls to mutator methods)
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function open_mutator_async($ns, $table_name, $future, $flags);
    /**
     * Close a table mutator
     * 
     * @param mutator - mutator id to close
     * 
     * @param int $mutator
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function mutator_close($mutator);
    /**
     * @param int $mutator
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function close_mutator($mutator);
    /**
     * Cancel an asynchronous table mutator
     * 
     * @param mutator -  mutator id to cancel
     * 
     * @param int $mutator
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function async_mutator_cancel($mutator);
    /**
     * @param int $mutator
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function cancel_mutator_async($mutator);
    /**
     * Close an asynchronous table mutator
     * 
     * @param mutator - mutator id to close
     * 
     * @param int $mutator
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function async_mutator_close($mutator);
    /**
     * @param int $mutator
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function close_mutator_async($mutator);
    /**
     * Set a cell via mutator
     * 
     * @param mutator - mutator id
     * 
     * @param cell - the cell to set
     * 
     * @param int $mutator
     * @param \Hypertable_ThriftGen\Cell $cell
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function mutator_set_cell($mutator, \Hypertable_ThriftGen\Cell $cell);
    /**
     * Set a cell in the table
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @param cell - the cell to set
     * 
     * @param int $ns
     * @param string $table_name
     * @param \Hypertable_ThriftGen\Cell $cell
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function set_cell($ns, $table_name, \Hypertable_ThriftGen\Cell $cell);
    /**
     * Alternative interface using array as cell
     * 
     * @param int $mutator
     * @param string[] $cell
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function mutator_set_cell_as_array($mutator, $cell);
    /**
     * Alternative interface using array as cell
     * 
     * @param int $ns
     * @param string $table_name
     * @param string[] $cell
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function set_cell_as_array($ns, $table_name, $cell);
    /**
     * Put a list of cells into a table via mutator
     * 
     * @param mutator - mutator id
     * 
     * @param cells - a list of cells (a cell with no row key set is assumed
     *        to have the same row key as the previous cell)
     * 
     * @param int $mutator
     * @param \Hypertable_ThriftGen\Cell[] $cells
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function mutator_set_cells($mutator, array $cells);
    /**
     * Put a list of cells into a table
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @param cells - a list of cells (a cell with no row key set is assumed
     *        to have the same row key as the previous cell)
     * 
     * @param int $ns
     * @param string $table_name
     * @param \Hypertable_ThriftGen\Cell[] $cells
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function set_cells($ns, $table_name, array $cells);
    /**
     * Alternative interface using array as cell
     * 
     * @param int $mutator
     * @param string[][] $cells
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function mutator_set_cells_as_arrays($mutator, array $cells);
    /**
     * Alternative interface using array as cell
     * 
     * @param int $ns
     * @param string $table_name
     * @param string[][] $cells
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function set_cells_as_arrays($ns, $table_name, array $cells);
    /**
     * Alternative interface using buffer of serialized cells
     * 
     * @param int $mutator
     * @param string $cells
     * @param bool $flush
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function mutator_set_cells_serialized($mutator, $cells, $flush);
    /**
     * Alternative interface using buffer of serialized cells
     * 
     * @param int $ns
     * @param string $table_name
     * @param string $cells
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function set_cells_serialized($ns, $table_name, $cells);
    /**
     * Flush mutator buffers
     * 
     * @param int $mutator
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function mutator_flush($mutator);
    /**
     * @param int $mutator
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function flush_mutator($mutator);
    /**
     * Set a cell in the table using an asynchonous mutator
     * 
     * @param mutator - mutator id
     * 
     * @param cell - the cell to set
     * 
     * @param int $mutator
     * @param \Hypertable_ThriftGen\Cell $cell
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function async_mutator_set_cell($mutator, \Hypertable_ThriftGen\Cell $cell);
    /**
     * @param int $mutator
     * @param \Hypertable_ThriftGen\Cell $cell
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function set_cell_async($mutator, \Hypertable_ThriftGen\Cell $cell);
    /**
     * Alternative interface using array as cell using an asynchonous mutator
     * 
     * @param int $mutator
     * @param string[] $cell
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function async_mutator_set_cell_as_array($mutator, $cell);
    /**
     * @param int $mutator
     * @param string[] $cell
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function set_cell_as_array_async($mutator, $cell);
    /**
     * Put a list of cells into a table using asynchonous mutator
     * 
     * @param mutator - mutator id
     * 
     * @param cells - a list of cells (a cell with no row key set is assumed
     *        to have the same row key as the previous cell)
     * 
     * @param int $mutator
     * @param \Hypertable_ThriftGen\Cell[] $cells
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function async_mutator_set_cells($mutator, array $cells);
    /**
     * @param int $mutator
     * @param \Hypertable_ThriftGen\Cell[] $cells
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function set_cells_async($mutator, array $cells);
    /**
     * Alternative interface using array as cell
     * 
     * @param int $mutator
     * @param string[][] $cells
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function async_mutator_set_cells_as_arrays($mutator, array $cells);
    /**
     * @param int $mutator
     * @param string[][] $cells
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function set_cells_as_arrays_async($mutator, array $cells);
    /**
     * Alternative interface using buffer of serialized cells
     * 
     * @param int $mutator
     * @param string $cells
     * @param bool $flush
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function async_mutator_set_cells_serialized($mutator, $cells, $flush);
    /**
     * @param int $mutator
     * @param string $cells
     * @param bool $flush
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function set_cells_serialized_async($mutator, $cells, $flush);
    /**
     * Flush mutator buffers
     * 
     * @param int $mutator
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function async_mutator_flush($mutator);
    /**
     * @param int $mutator
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function flush_mutator_async($mutator);
    /**
     * Check if the namespace exists
     * 
     * @param ns - namespace name
     * 
     * @return true if ns exists, false ow
     * 
     * @param string $ns
     * @return bool
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function namespace_exists($ns);
    /**
     * @param string $ns
     * @return bool
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function exists_namespace($ns);
    /**
     * Check if the table exists
     * 
     * @param ns - namespace id
     * 
     * @param name - table name
     * 
     * @return true if table exists, false ow
     * 
     * @param int $ns
     * @param string $name
     * @return bool
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function exists_table($ns, $name);
    /**
     * @param int $ns
     * @param string $name
     * @return bool
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function table_exists($ns, $name);
    /**
     * Get the id of a table
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @return table id string
     * 
     * @param int $ns
     * @param string $table_name
     * @return string
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function table_get_id($ns, $table_name);
    /**
     * @param int $ns
     * @param string $table_name
     * @return string
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function get_table_id($ns, $table_name);
    /**
     * Get the schema of a table as a string (that can be used with create_table)
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @return schema string (in xml)
     * 
     * @param int $ns
     * @param string $table_name
     * @return string
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function table_get_schema_str($ns, $table_name);
    /**
     * @param int $ns
     * @param string $table_name
     * @return string
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function get_schema_str($ns, $table_name);
    /**
     * Get the schema of a table as a string along with column family ids
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @return schema string (in xml)
     * 
     * @param int $ns
     * @param string $table_name
     * @return string
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function table_get_schema_str_with_ids($ns, $table_name);
    /**
     * @param int $ns
     * @param string $table_name
     * @return string
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function get_schema_str_with_ids($ns, $table_name);
    /**
     * Get the schema of a table as a string (that can be used with create_table)
     *   
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @return schema object describing a table
     * 
     * @param int $ns
     * @param string $table_name
     * @return \Hypertable_ThriftGen\Schema Describes a schema.
     * <dl>
     *   <dt>access_groups</dt>
     *   <dd>Map of access groups</dd>
     * 
     *   <dt>column_families</dt>
     *   <dd>Map of column families</dd>
     * </dl>
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function table_get_schema($ns, $table_name);
    /**
     * @param int $ns
     * @param string $table_name
     * @return \Hypertable_ThriftGen\Schema Describes a schema.
     * <dl>
     *   <dt>access_groups</dt>
     *   <dd>Map of access groups</dd>
     * 
     *   <dt>column_families</dt>
     *   <dd>Map of column families</dd>
     * </dl>
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function get_schema($ns, $table_name);
    /**
     * Get a list of table names in the namespace
     * 
     * @param ns - namespace id
     * 
     * @return a list of table names
     * 
     * @param int $ns
     * @return string[]
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function get_tables($ns);
    /**
     * Get a list of namespaces and table names table names in the namespace
     * 
     * @param ns - namespace
     * 
     * @return a list of table names
     * 
     * @param int $ns
     * @return \Hypertable_ThriftGen\NamespaceListing[]
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function namespace_get_listing($ns);
    /**
     * @param int $ns
     * @return \Hypertable_ThriftGen\NamespaceListing[]
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function get_listing($ns);
    /**
     * Get a list of table splits
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @return a list of table names
     * 
     * @param int $ns
     * @param string $table_name
     * @return \Hypertable_ThriftGen\TableSplit[]
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function table_get_splits($ns, $table_name);
    /**
     * @param int $ns
     * @param string $table_name
     * @return \Hypertable_ThriftGen\TableSplit[]
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function get_table_splits($ns, $table_name);
    /**
     * Drop a namespace
     * 
     * @param ns - namespace name
     * 
     * @param if_exists - if true, don't barf if the table doesn't exist
     * 
     * @param string $ns
     * @param bool $if_exists
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function namespace_drop($ns, $if_exists);
    /**
     * @param string $ns
     * @param bool $if_exists
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function drop_namespace($ns, $if_exists);
    /**
     * Rename a table
     * 
     * @param ns - namespace id
     * 
     * @param name - current table name
     * 
     * @param new_name - new table name
     * 
     * @param int $ns
     * @param string $name
     * @param string $new_name
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function rename_table($ns, $name, $new_name);
    /**
     * @param int $ns
     * @param string $name
     * @param string $new_name
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function table_rename($ns, $name, $new_name);
    /**
     * Drop a table
     * 
     * @param ns - namespace id
     * 
     * @param name - table name
     * 
     * @param if_exists - if true, don't barf if the table doesn't exist
     * 
     * @param int $ns
     * @param string $name
     * @param bool $if_exists
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function drop_table($ns, $name, $if_exists);
    /**
     * @param int $ns
     * @param string $name
     * @param bool $if_exists
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function table_drop($ns, $name, $if_exists);
    /**
     * Generate a GUID
     * 
     * GUIDs are globally unique. The generated string is 36 bytes long and
     * has a format similar to "9cf7da31-307a-4bef-b65e-19fb05aa57d8".
     * 
     * @return string
     */
    public function generate_guid();
    /**
     * Inserts a unique value into a table
     * 
     * This function inserts a unique value into a table. The table must be
     * created with TIME_ORDER DESC, MAX_VERSIONS 1 (although the latter is
     * optional).
     * 
     * If the value is empty then a new GUID will be assigned
     * (using @a generate_guid).
     * 
     * @param ns - namespace id
     * @param table_name - table name
     * @param key - the Key of the value
     * @param value - the unique value. Can be empty; in this case a new
     *    guid will be generated internally
     * 
     * @return the inserted unique value (which is identical to the @a value
     *    parameter or a new guid, if value is empty)
     * 
     * @param int $ns
     * @param string $table_name
     * @param \Hypertable_ThriftGen\Key $key
     * @param string $value
     * @return string
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function create_cell_unique($ns, $table_name, \Hypertable_ThriftGen\Key $key, $value);
    /**
     * Retrieves a descriptive error string from an error code
     * 
     * @param error_code - the numeric error code
     * 
     * @return the descriptive string, or "ERROR NOT REGISTERED" if the error
     *    code is unknown
     * 
     * @param int $error_code
     * @return string
     */
    public function error_get_text($error_code);
    /**
     * Status check.
     * @return Status information
     * 
     * @return \Hypertable_ThriftGen\Status Status information.
     * 
     * <dl>
     *   <dt>code</dt>
     *   <dd>Status code</dd>
     * 
     *   <dt>text</dt>
     *   <dd>Status text</dd>
     * </dl>
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function status();
    /**
     * Shutdown broker.
     * 
     * @throws \Hypertable_ThriftGen\ClientException
     */
    public function shutdown();
}
