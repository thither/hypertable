<?php
namespace Hypertable_ThriftGen;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Specifies a range of rows
 * 
 * <dl>
 *   <dt>start_row</dt>
 *   <dd>The row to start scan with. Must not contain nulls (0x00)</dd>
 * 
 *   <dt>start_inclusive</dt>
 *   <dd>Whether the start row is included in the result (default: true)</dd>
 * 
 *   <dt>end_row</dt>
 *   <dd>The row to end scan with. Must not contain nulls</dd>
 * 
 *   <dt>end_inclusive</dt>
 *   <dd>Whether the end row is included in the result (default: true)</dd>
 * </dl>
 */
class RowInterval
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'start_row',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'start_inclusive',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        3 => array(
            'var' => 'end_row',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'end_inclusive',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'start_row_binary',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'end_row_binary',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $start_row = null;
    /**
     * @var bool
     */
    public $start_inclusive = true;
    /**
     * @var string
     */
    public $end_row = null;
    /**
     * @var bool
     */
    public $end_inclusive = true;
    /**
     * @var string
     */
    public $start_row_binary = null;
    /**
     * @var string
     */
    public $end_row_binary = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['start_row'])) {
                $this->start_row = $vals['start_row'];
            }
            if (isset($vals['start_inclusive'])) {
                $this->start_inclusive = $vals['start_inclusive'];
            }
            if (isset($vals['end_row'])) {
                $this->end_row = $vals['end_row'];
            }
            if (isset($vals['end_inclusive'])) {
                $this->end_inclusive = $vals['end_inclusive'];
            }
            if (isset($vals['start_row_binary'])) {
                $this->start_row_binary = $vals['start_row_binary'];
            }
            if (isset($vals['end_row_binary'])) {
                $this->end_row_binary = $vals['end_row_binary'];
            }
        }
    }

    public function getName()
    {
        return 'RowInterval';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->start_row);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->start_inclusive);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->end_row);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->end_inclusive);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->start_row_binary);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->end_row_binary);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('RowInterval');
        if ($this->start_row !== null) {
            $xfer += $output->writeFieldBegin('start_row', TType::STRING, 1);
            $xfer += $output->writeString($this->start_row);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->start_inclusive !== null) {
            $xfer += $output->writeFieldBegin('start_inclusive', TType::BOOL, 2);
            $xfer += $output->writeBool($this->start_inclusive);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->end_row !== null) {
            $xfer += $output->writeFieldBegin('end_row', TType::STRING, 3);
            $xfer += $output->writeString($this->end_row);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->end_inclusive !== null) {
            $xfer += $output->writeFieldBegin('end_inclusive', TType::BOOL, 4);
            $xfer += $output->writeBool($this->end_inclusive);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->start_row_binary !== null) {
            $xfer += $output->writeFieldBegin('start_row_binary', TType::STRING, 5);
            $xfer += $output->writeString($this->start_row_binary);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->end_row_binary !== null) {
            $xfer += $output->writeFieldBegin('end_row_binary', TType::STRING, 6);
            $xfer += $output->writeString($this->end_row_binary);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
