<?php
namespace Hypertable_ThriftGen;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Specifies a serialized result object for asynchronous requests.
 * TODO: add support for update results
 * 
 * <dl>
 *   <dt>is_empty</dt>
 *   <dd>Indicates whether this object contains a result or not</dd>
 * 
 *   <dt>id</dt>
 *   <dd>Scanner/mutator id for which these results pertain to</dd>
 *   
 *   <dt>is_scan</dt>
 *   <dd>Indicates whether these are scan results or update results</dd>
 *   
 *   <dt>is_error</dt>
 *   <dd>Indicates whether the async request was successful or not</dd>
 *   
 *   <dt>error</dt>
 *   <dd>Error code</dd>
 * 
 *   <dt>error_msg</dt>
 *   <dd>Error message</dd>
 * 
 *   <dt>cells</dt>
 *   <dd>Cells returned by asynchronous scanner</dd>
 * </dl>
 */
class ResultSerialized
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'is_empty',
            'isRequired' => true,
            'type' => TType::BOOL,
        ),
        2 => array(
            'var' => 'id',
            'isRequired' => true,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'is_scan',
            'isRequired' => true,
            'type' => TType::BOOL,
        ),
        4 => array(
            'var' => 'is_error',
            'isRequired' => true,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'error',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'error_msg',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'cells',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var bool
     */
    public $is_empty = null;
    /**
     * @var int
     */
    public $id = null;
    /**
     * @var bool
     */
    public $is_scan = null;
    /**
     * @var bool
     */
    public $is_error = null;
    /**
     * @var int
     */
    public $error = null;
    /**
     * @var string
     */
    public $error_msg = null;
    /**
     * @var string
     */
    public $cells = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['is_empty'])) {
                $this->is_empty = $vals['is_empty'];
            }
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['is_scan'])) {
                $this->is_scan = $vals['is_scan'];
            }
            if (isset($vals['is_error'])) {
                $this->is_error = $vals['is_error'];
            }
            if (isset($vals['error'])) {
                $this->error = $vals['error'];
            }
            if (isset($vals['error_msg'])) {
                $this->error_msg = $vals['error_msg'];
            }
            if (isset($vals['cells'])) {
                $this->cells = $vals['cells'];
            }
        }
    }

    public function getName()
    {
        return 'ResultSerialized';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_empty);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_scan);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->is_error);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->error);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->error_msg);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cells);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ResultSerialized');
        if ($this->is_empty !== null) {
            $xfer += $output->writeFieldBegin('is_empty', TType::BOOL, 1);
            $xfer += $output->writeBool($this->is_empty);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::I64, 2);
            $xfer += $output->writeI64($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_scan !== null) {
            $xfer += $output->writeFieldBegin('is_scan', TType::BOOL, 3);
            $xfer += $output->writeBool($this->is_scan);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->is_error !== null) {
            $xfer += $output->writeFieldBegin('is_error', TType::BOOL, 4);
            $xfer += $output->writeBool($this->is_error);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->error !== null) {
            $xfer += $output->writeFieldBegin('error', TType::I32, 5);
            $xfer += $output->writeI32($this->error);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->error_msg !== null) {
            $xfer += $output->writeFieldBegin('error_msg', TType::STRING, 6);
            $xfer += $output->writeString($this->error_msg);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cells !== null) {
            $xfer += $output->writeFieldBegin('cells', TType::STRING, 7);
            $xfer += $output->writeString($this->cells);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
