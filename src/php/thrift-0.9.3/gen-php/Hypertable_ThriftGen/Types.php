<?php
namespace Hypertable_ThriftGen;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * The "operation" for a ColumnPredicate
 * 
 * EXACT_MATCH: compares the cell value for identity
 *     (... WHERE column = "value")
 * PREFIX_MATCH: compares the cell value for a prefix match
 *     (... WHERE column =^ "prefix")
 */
final class ColumnPredicateOperation {
  const EXACT_MATCH = 1;
  const PREFIX_MATCH = 2;
  const REGEX_MATCH = 4;
  const VALUE_MATCH = 7;
  const QUALIFIER_EXACT_MATCH = 256;
  const QUALIFIER_PREFIX_MATCH = 512;
  const QUALIFIER_REGEX_MATCH = 1024;
  const QUALIFIER_MATCH = 1792;
  static public $__names = array(
    1 => 'EXACT_MATCH',
    2 => 'PREFIX_MATCH',
    4 => 'REGEX_MATCH',
    7 => 'VALUE_MATCH',
    256 => 'QUALIFIER_EXACT_MATCH',
    512 => 'QUALIFIER_PREFIX_MATCH',
    1024 => 'QUALIFIER_REGEX_MATCH',
    1792 => 'QUALIFIER_MATCH',
  );
}

/**
 * State flags for a key
 * 
 * Note for maintainers: the definition must be sync'ed with FLAG_* constants
 * in src/cc/Hypertable/Lib/Key.h
 * 
 * DELETE_ROW: row is pending delete
 * 
 * DELETE_CF: column family is pending delete
 * 
 * DELETE_CELL: key is pending delete
 * 
 * DELETE_CELL_VERSION: delete specific timestamped version of key
 * 
 * INSERT: key is an insert/update (default state)
 */
final class KeyFlag {
  const DELETE_ROW = 0;
  const DELETE_CF = 1;
  const DELETE_CELL = 2;
  const DELETE_CELL_VERSION = 3;
  const INSERT = 255;
  static public $__names = array(
    0 => 'DELETE_ROW',
    1 => 'DELETE_CF',
    2 => 'DELETE_CELL',
    3 => 'DELETE_CELL_VERSION',
    255 => 'INSERT',
  );
}

/**
 * Mutator creation flags
 * 
 * NO_LOG_SYNC: Do not sync the commit log
 * IGNORE_UNKNOWN_CFS: Don't throw exception if mutator writes to unknown column family
 * NO_LOG: Don't write to the commit log
 */
final class MutatorFlag {
  const NO_LOG_SYNC = 1;
  const IGNORE_UNKNOWN_CFS = 2;
  const NO_LOG = 4;
  static public $__names = array(
    1 => 'NO_LOG_SYNC',
    2 => 'IGNORE_UNKNOWN_CFS',
    4 => 'NO_LOG',
  );
}

/**
 * Status codes.
 */
final class StatusCode {
  const OK = 0;
  const WARNING = 1;
  const CRITICAL = 2;
  const UNKNOWN = 3;
  static public $__names = array(
    0 => 'OK',
    1 => 'WARNING',
    2 => 'CRITICAL',
    3 => 'UNKNOWN',
  );
}

/**
 * Specifies a range of rows
 * 
 * <dl>
 *   <dt>start_row</dt>
 *   <dd>The row to start scan with. Must not contain nulls (0x00)</dd>
 * 
 *   <dt>start_inclusive</dt>
 *   <dd>Whether the start row is included in the result (default: true)</dd>
 * 
 *   <dt>end_row</dt>
 *   <dd>The row to end scan with. Must not contain nulls</dd>
 * 
 *   <dt>end_inclusive</dt>
 *   <dd>Whether the end row is included in the result (default: true)</dd>
 * </dl>
 */
class RowInterval {
  static $_TSPEC;

  /**
   * @var string
   */
  public $start_row = null;
  /**
   * @var bool
   */
  public $start_inclusive = true;
  /**
   * @var string
   */
  public $end_row = null;
  /**
   * @var bool
   */
  public $end_inclusive = true;
  /**
   * @var string
   */
  public $start_row_binary = null;
  /**
   * @var string
   */
  public $end_row_binary = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'start_row',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'start_inclusive',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'end_row',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'end_inclusive',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'start_row_binary',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'end_row_binary',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['start_row'])) {
        $this->start_row = $vals['start_row'];
      }
      if (isset($vals['start_inclusive'])) {
        $this->start_inclusive = $vals['start_inclusive'];
      }
      if (isset($vals['end_row'])) {
        $this->end_row = $vals['end_row'];
      }
      if (isset($vals['end_inclusive'])) {
        $this->end_inclusive = $vals['end_inclusive'];
      }
      if (isset($vals['start_row_binary'])) {
        $this->start_row_binary = $vals['start_row_binary'];
      }
      if (isset($vals['end_row_binary'])) {
        $this->end_row_binary = $vals['end_row_binary'];
      }
    }
  }

  public function getName() {
    return 'RowInterval';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start_row);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->start_inclusive);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->end_row);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->end_inclusive);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start_row_binary);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->end_row_binary);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RowInterval');
    if ($this->start_row !== null) {
      $xfer += $output->writeFieldBegin('start_row', TType::STRING, 1);
      $xfer += $output->writeString($this->start_row);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_inclusive !== null) {
      $xfer += $output->writeFieldBegin('start_inclusive', TType::BOOL, 2);
      $xfer += $output->writeBool($this->start_inclusive);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_row !== null) {
      $xfer += $output->writeFieldBegin('end_row', TType::STRING, 3);
      $xfer += $output->writeString($this->end_row);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_inclusive !== null) {
      $xfer += $output->writeFieldBegin('end_inclusive', TType::BOOL, 4);
      $xfer += $output->writeBool($this->end_inclusive);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_row_binary !== null) {
      $xfer += $output->writeFieldBegin('start_row_binary', TType::STRING, 5);
      $xfer += $output->writeString($this->start_row_binary);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_row_binary !== null) {
      $xfer += $output->writeFieldBegin('end_row_binary', TType::STRING, 6);
      $xfer += $output->writeString($this->end_row_binary);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Specifies a range of cells
 * 
 * <dl>
 *   <dt>start_row</dt>
 *   <dd>The row to start scan with. Must not contain nulls (0x00)</dd>
 * 
 *   <dt>start_column</dt>
 *   <dd>The column (prefix of column_family:column_qualifier) of the
 *   start row for the scan</dd>
 * 
 *   <dt>start_inclusive</dt>
 *   <dd>Whether the start row is included in the result (default: true)</dd>
 * 
 *   <dt>end_row</dt>
 *   <dd>The row to end scan with. Must not contain nulls</dd>
 * 
 *   <dt>end_column</dt>
 *   <dd>The column (prefix of column_family:column_qualifier) of the
 *   end row for the scan</dd>
 * 
 *   <dt>end_inclusive</dt>
 *   <dd>Whether the end row is included in the result (default: true)</dd>
 * </dl>
 */
class CellInterval {
  static $_TSPEC;

  /**
   * @var string
   */
  public $start_row = null;
  /**
   * @var string
   */
  public $start_column = null;
  /**
   * @var bool
   */
  public $start_inclusive = true;
  /**
   * @var string
   */
  public $end_row = null;
  /**
   * @var string
   */
  public $end_column = null;
  /**
   * @var bool
   */
  public $end_inclusive = true;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'start_row',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'start_column',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'start_inclusive',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'end_row',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'end_column',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'end_inclusive',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['start_row'])) {
        $this->start_row = $vals['start_row'];
      }
      if (isset($vals['start_column'])) {
        $this->start_column = $vals['start_column'];
      }
      if (isset($vals['start_inclusive'])) {
        $this->start_inclusive = $vals['start_inclusive'];
      }
      if (isset($vals['end_row'])) {
        $this->end_row = $vals['end_row'];
      }
      if (isset($vals['end_column'])) {
        $this->end_column = $vals['end_column'];
      }
      if (isset($vals['end_inclusive'])) {
        $this->end_inclusive = $vals['end_inclusive'];
      }
    }
  }

  public function getName() {
    return 'CellInterval';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start_row);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start_column);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->start_inclusive);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->end_row);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->end_column);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->end_inclusive);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CellInterval');
    if ($this->start_row !== null) {
      $xfer += $output->writeFieldBegin('start_row', TType::STRING, 1);
      $xfer += $output->writeString($this->start_row);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_column !== null) {
      $xfer += $output->writeFieldBegin('start_column', TType::STRING, 2);
      $xfer += $output->writeString($this->start_column);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_inclusive !== null) {
      $xfer += $output->writeFieldBegin('start_inclusive', TType::BOOL, 3);
      $xfer += $output->writeBool($this->start_inclusive);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_row !== null) {
      $xfer += $output->writeFieldBegin('end_row', TType::STRING, 4);
      $xfer += $output->writeString($this->end_row);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_column !== null) {
      $xfer += $output->writeFieldBegin('end_column', TType::STRING, 5);
      $xfer += $output->writeString($this->end_column);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_inclusive !== null) {
      $xfer += $output->writeFieldBegin('end_inclusive', TType::BOOL, 6);
      $xfer += $output->writeBool($this->end_inclusive);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Specifies a column predicate
 *     ... WHERE column = "value"
 *   or
 *     ... WHERE column =^ "prefix"
 * 
 * <dl>
 *   <dt>column_family</dt>
 *   <dd>The name of the column family</dd>
 * 
 *   <dt>operation</dt>
 *   <dd>The predicate operation; either EXACT_MATCH or PREFIX_MATCH</dd>
 * 
 *   <dt>value</dt>
 *   <dd>The cell value or cell prefix, depending on the operation</dd>
 * 
 *   <dt>value_len</dt>
 *   <dd>The size of the value</dd>
 * 
 *   <dt>column_qualifier</dt>
 *   <dd>The column qualifier</dd>
 * </dl>
 */
class ColumnPredicate {
  static $_TSPEC;

  /**
   * @var string
   */
  public $column_family = null;
  /**
   * @var string
   */
  public $column_qualifier = null;
  /**
   * @var int
   */
  public $operation = null;
  /**
   * @var string
   */
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'column_family',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'column_qualifier',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'operation',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['column_family'])) {
        $this->column_family = $vals['column_family'];
      }
      if (isset($vals['column_qualifier'])) {
        $this->column_qualifier = $vals['column_qualifier'];
      }
      if (isset($vals['operation'])) {
        $this->operation = $vals['operation'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
    }
  }

  public function getName() {
    return 'ColumnPredicate';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->column_family);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->column_qualifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ColumnPredicate');
    if ($this->column_family !== null) {
      $xfer += $output->writeFieldBegin('column_family', TType::STRING, 1);
      $xfer += $output->writeString($this->column_family);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->column_qualifier !== null) {
      $xfer += $output->writeFieldBegin('column_qualifier', TType::STRING, 2);
      $xfer += $output->writeString($this->column_qualifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operation !== null) {
      $xfer += $output->writeFieldBegin('operation', TType::I32, 3);
      $xfer += $output->writeI32($this->operation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::STRING, 4);
      $xfer += $output->writeString($this->value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Specifies options for a scan
 * 
 * <dl>
 *   <dt>row_intervals</dt>
 *   <dd>A list of ranges of rows to scan. Mutually exclusive with
 *   cell_interval</dd>
 * 
 *   <dt>cell_intervals</dt>
 *   <dd>A list of ranges of cells to scan. Mutually exclusive with
 *   row_intervals</dd>
 * 
 *   <dt>return_deletes</dt>
 *   <dd>Indicates whether cells pending delete are returned</dd>
 * 
 *   <dt>revs</dt>
 *   <dd>Specifies max number of revisions of cells to return</dd>
 * 
 *   <dt>row_limit</dt>
 *   <dd>Specifies max number of rows to return</dd>
 * 
 *   <dt>start_time</dt>
 *   <dd>Specifies start time in nanoseconds since epoch for cells to
 *   return</dd>
 * 
 *   <dt>end_time</dt>
 *   <dd>Specifies end time in nanoseconds since epoch for cells to return</dd>
 * 
 *   <dt>columns</dt>
 *   <dd>Specifies the names of the columns to return</dd>
 * 
 *   <dt>cell_limit</dt>
 *   <dd>Specifies max number of cells to return</dd>
 * 
 *   <dt>cell_limit_per_family</dt>
 *   <dd>Specifies max number of cells to return per column family</dd>
 * 
 *   <dt>row_regexp</dt>
 *   <dd>Specifies a regexp used to filter by rowkey</dd>
 * 
 *   <dt>value_regexp</dt>
 *   <dd>Specifies a regexp used to filter by cell value</dd>
 * 
 *   <dt>scan_and_filter_rows</dt>
 *   <dd>Indicates whether table scan filters the rows specified instead of individual look up</dd>
 * 
 *   <dt>row_offset</dt>
 *   <dd>Specifies number of rows to be skipped</dd>
 * 
 *   <dt>cell_offset</dt>
 *   <dd>Specifies number of cells to be skipped</dd>
 * </dl>
 */
class ScanSpec {
  static $_TSPEC;

  /**
   * @var \Hypertable_ThriftGen\RowInterval[]
   */
  public $row_intervals = null;
  /**
   * @var \Hypertable_ThriftGen\CellInterval[]
   */
  public $cell_intervals = null;
  /**
   * @var bool
   */
  public $return_deletes = false;
  /**
   * @var int
   */
  public $versions = 0;
  /**
   * @var int
   */
  public $row_limit = 0;
  /**
   * @var int
   */
  public $start_time = null;
  /**
   * @var int
   */
  public $end_time = null;
  /**
   * @var string[]
   */
  public $columns = null;
  /**
   * @var bool
   */
  public $keys_only = false;
  /**
   * @var int
   */
  public $cell_limit = 0;
  /**
   * @var int
   */
  public $cell_limit_per_family = 0;
  /**
   * @var string
   */
  public $row_regexp = null;
  /**
   * @var string
   */
  public $value_regexp = null;
  /**
   * @var bool
   */
  public $scan_and_filter_rows = false;
  /**
   * @var int
   */
  public $row_offset = 0;
  /**
   * @var int
   */
  public $cell_offset = 0;
  /**
   * @var \Hypertable_ThriftGen\ColumnPredicate[]
   */
  public $column_predicates = null;
  /**
   * @var bool
   */
  public $do_not_cache = false;
  /**
   * @var bool
   */
  public $and_column_predicates = false;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'row_intervals',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Hypertable_ThriftGen\RowInterval',
            ),
          ),
        2 => array(
          'var' => 'cell_intervals',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Hypertable_ThriftGen\CellInterval',
            ),
          ),
        3 => array(
          'var' => 'return_deletes',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'versions',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'row_limit',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        9 => array(
          'var' => 'keys_only',
          'type' => TType::BOOL,
          ),
        14 => array(
          'var' => 'cell_limit',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'cell_limit_per_family',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'row_regexp',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'value_regexp',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'scan_and_filter_rows',
          'type' => TType::BOOL,
          ),
        15 => array(
          'var' => 'row_offset',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'cell_offset',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'column_predicates',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Hypertable_ThriftGen\ColumnPredicate',
            ),
          ),
        18 => array(
          'var' => 'do_not_cache',
          'type' => TType::BOOL,
          ),
        19 => array(
          'var' => 'and_column_predicates',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['row_intervals'])) {
        $this->row_intervals = $vals['row_intervals'];
      }
      if (isset($vals['cell_intervals'])) {
        $this->cell_intervals = $vals['cell_intervals'];
      }
      if (isset($vals['return_deletes'])) {
        $this->return_deletes = $vals['return_deletes'];
      }
      if (isset($vals['versions'])) {
        $this->versions = $vals['versions'];
      }
      if (isset($vals['row_limit'])) {
        $this->row_limit = $vals['row_limit'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
      if (isset($vals['keys_only'])) {
        $this->keys_only = $vals['keys_only'];
      }
      if (isset($vals['cell_limit'])) {
        $this->cell_limit = $vals['cell_limit'];
      }
      if (isset($vals['cell_limit_per_family'])) {
        $this->cell_limit_per_family = $vals['cell_limit_per_family'];
      }
      if (isset($vals['row_regexp'])) {
        $this->row_regexp = $vals['row_regexp'];
      }
      if (isset($vals['value_regexp'])) {
        $this->value_regexp = $vals['value_regexp'];
      }
      if (isset($vals['scan_and_filter_rows'])) {
        $this->scan_and_filter_rows = $vals['scan_and_filter_rows'];
      }
      if (isset($vals['row_offset'])) {
        $this->row_offset = $vals['row_offset'];
      }
      if (isset($vals['cell_offset'])) {
        $this->cell_offset = $vals['cell_offset'];
      }
      if (isset($vals['column_predicates'])) {
        $this->column_predicates = $vals['column_predicates'];
      }
      if (isset($vals['do_not_cache'])) {
        $this->do_not_cache = $vals['do_not_cache'];
      }
      if (isset($vals['and_column_predicates'])) {
        $this->and_column_predicates = $vals['and_column_predicates'];
      }
    }
  }

  public function getName() {
    return 'ScanSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->row_intervals = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Hypertable_ThriftGen\RowInterval();
              $xfer += $elem5->read($input);
              $this->row_intervals []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->cell_intervals = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $elem11 = new \Hypertable_ThriftGen\CellInterval();
              $xfer += $elem11->read($input);
              $this->cell_intervals []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->return_deletes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->versions);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->row_limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $xfer += $input->readString($elem17);
              $this->columns []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->keys_only);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cell_limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cell_limit_per_family);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->row_regexp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->value_regexp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->scan_and_filter_rows);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->row_offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cell_offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::LST) {
            $this->column_predicates = array();
            $_size18 = 0;
            $_etype21 = 0;
            $xfer += $input->readListBegin($_etype21, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $elem23 = null;
              $elem23 = new \Hypertable_ThriftGen\ColumnPredicate();
              $xfer += $elem23->read($input);
              $this->column_predicates []= $elem23;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->do_not_cache);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->and_column_predicates);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ScanSpec');
    if ($this->row_intervals !== null) {
      if (!is_array($this->row_intervals)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('row_intervals', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->row_intervals));
        {
          foreach ($this->row_intervals as $iter24)
          {
            $xfer += $iter24->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cell_intervals !== null) {
      if (!is_array($this->cell_intervals)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cell_intervals', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->cell_intervals));
        {
          foreach ($this->cell_intervals as $iter25)
          {
            $xfer += $iter25->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->return_deletes !== null) {
      $xfer += $output->writeFieldBegin('return_deletes', TType::BOOL, 3);
      $xfer += $output->writeBool($this->return_deletes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->versions !== null) {
      $xfer += $output->writeFieldBegin('versions', TType::I32, 4);
      $xfer += $output->writeI32($this->versions);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->row_limit !== null) {
      $xfer += $output->writeFieldBegin('row_limit', TType::I32, 5);
      $xfer += $output->writeI32($this->row_limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 6);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 7);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRING, count($this->columns));
        {
          foreach ($this->columns as $iter26)
          {
            $xfer += $output->writeString($iter26);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->keys_only !== null) {
      $xfer += $output->writeFieldBegin('keys_only', TType::BOOL, 9);
      $xfer += $output->writeBool($this->keys_only);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cell_limit_per_family !== null) {
      $xfer += $output->writeFieldBegin('cell_limit_per_family', TType::I32, 10);
      $xfer += $output->writeI32($this->cell_limit_per_family);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->row_regexp !== null) {
      $xfer += $output->writeFieldBegin('row_regexp', TType::STRING, 11);
      $xfer += $output->writeString($this->row_regexp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value_regexp !== null) {
      $xfer += $output->writeFieldBegin('value_regexp', TType::STRING, 12);
      $xfer += $output->writeString($this->value_regexp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scan_and_filter_rows !== null) {
      $xfer += $output->writeFieldBegin('scan_and_filter_rows', TType::BOOL, 13);
      $xfer += $output->writeBool($this->scan_and_filter_rows);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cell_limit !== null) {
      $xfer += $output->writeFieldBegin('cell_limit', TType::I32, 14);
      $xfer += $output->writeI32($this->cell_limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->row_offset !== null) {
      $xfer += $output->writeFieldBegin('row_offset', TType::I32, 15);
      $xfer += $output->writeI32($this->row_offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cell_offset !== null) {
      $xfer += $output->writeFieldBegin('cell_offset', TType::I32, 16);
      $xfer += $output->writeI32($this->cell_offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->column_predicates !== null) {
      if (!is_array($this->column_predicates)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('column_predicates', TType::LST, 17);
      {
        $output->writeListBegin(TType::STRUCT, count($this->column_predicates));
        {
          foreach ($this->column_predicates as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->do_not_cache !== null) {
      $xfer += $output->writeFieldBegin('do_not_cache', TType::BOOL, 18);
      $xfer += $output->writeBool($this->do_not_cache);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->and_column_predicates !== null) {
      $xfer += $output->writeFieldBegin('and_column_predicates', TType::BOOL, 19);
      $xfer += $output->writeBool($this->and_column_predicates);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Defines a cell key
 * 
 * <dl>
 *   <dt>row</dt>
 *   <dd>Specifies the row key. Note, it cannot contain null characters.
 *   If a row key is not specified in a return cell, it's assumed to
 *   be the same as the previous cell</dd>
 * 
 *   <dt>column_family</dt>
 *   <dd>Specifies the column family</dd>
 * 
 *   <dt>column_qualifier</dt>
 *   <dd>Specifies the column qualifier. A column family must be specified.</dd>
 * 
 *   <dt>timestamp</dt>
 *   <dd>Nanoseconds since epoch for the cell<dd>
 * 
 *   <dt>revision</dt>
 *   <dd>A 64-bit revision number for the cell</dd>
 * 
 *   <dt>flag</dt>
 *   <dd>A 16-bit integer indicating the state of the cell</dd>
 * </dl>
 */
class Key {
  static $_TSPEC;

  /**
   * @var string
   */
  public $row = null;
  /**
   * @var string
   */
  public $column_family = null;
  /**
   * @var string
   */
  public $column_qualifier = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var int
   */
  public $revision = null;
  /**
   * @var int
   */
  public $flag =   255;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'row',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'column_family',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'column_qualifier',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'flag',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['row'])) {
        $this->row = $vals['row'];
      }
      if (isset($vals['column_family'])) {
        $this->column_family = $vals['column_family'];
      }
      if (isset($vals['column_qualifier'])) {
        $this->column_qualifier = $vals['column_qualifier'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['flag'])) {
        $this->flag = $vals['flag'];
      }
    }
  }

  public function getName() {
    return 'Key';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->row);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->column_family);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->column_qualifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Key');
    if ($this->row !== null) {
      $xfer += $output->writeFieldBegin('row', TType::STRING, 1);
      $xfer += $output->writeString($this->row);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->column_family !== null) {
      $xfer += $output->writeFieldBegin('column_family', TType::STRING, 2);
      $xfer += $output->writeString($this->column_family);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->column_qualifier !== null) {
      $xfer += $output->writeFieldBegin('column_qualifier', TType::STRING, 3);
      $xfer += $output->writeString($this->column_qualifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 4);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 5);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flag !== null) {
      $xfer += $output->writeFieldBegin('flag', TType::I32, 6);
      $xfer += $output->writeI32($this->flag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Specifies options for a shared periodic mutator
 * 
 * <dl>
 *   <dt>appname</dt>
 *   <dd>String key used to share/retrieve mutator, eg: "my_ht_app"</dd>
 * 
 *   <dt>flush_interval</dt>
 *   <dd>Time interval between flushes</dd>
 * 
 *   <dt>flags</dt>
 *   <dd>Mutator flags</dt>
 * </dl>
 */
class MutateSpec {
  static $_TSPEC;

  /**
   * @var string
   */
  public $appname = "";
  /**
   * @var int
   */
  public $flush_interval = 1000;
  /**
   * @var int
   */
  public $flags = 2;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appname',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'flush_interval',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'flags',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appname'])) {
        $this->appname = $vals['appname'];
      }
      if (isset($vals['flush_interval'])) {
        $this->flush_interval = $vals['flush_interval'];
      }
      if (isset($vals['flags'])) {
        $this->flags = $vals['flags'];
      }
    }
  }

  public function getName() {
    return 'MutateSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flush_interval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flags);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MutateSpec');
    if ($this->appname !== null) {
      $xfer += $output->writeFieldBegin('appname', TType::STRING, 1);
      $xfer += $output->writeString($this->appname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flush_interval !== null) {
      $xfer += $output->writeFieldBegin('flush_interval', TType::I32, 2);
      $xfer += $output->writeI32($this->flush_interval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flags !== null) {
      $xfer += $output->writeFieldBegin('flags', TType::I32, 3);
      $xfer += $output->writeI32($this->flags);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Defines a table cell
 * 
 * <dl>
 *   <dt>key</dt>
 *   <dd>Specifies the cell key</dd>
 * 
 *   <dt>value</dt>
 *   <dd>Value of a cell. Currently a sequence of uninterpreted bytes.</dd>
 * </dl>
 */
class Cell {
  static $_TSPEC;

  /**
   * @var \Hypertable_ThriftGen\Key
   */
  public $key = null;
  /**
   * @var string
   */
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRUCT,
          'class' => '\Hypertable_ThriftGen\Key',
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
    }
  }

  public function getName() {
    return 'Cell';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->key = new \Hypertable_ThriftGen\Key();
            $xfer += $this->key->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Cell');
    if ($this->key !== null) {
      if (!is_object($this->key)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('key', TType::STRUCT, 1);
      $xfer += $this->key->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::STRING, 2);
      $xfer += $output->writeString($this->value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Specifies a result object for asynchronous requests.
 * TODO: add support for update results
 * 
 * <dl>
 *   <dt>is_empty</dt>
 *   <dd>Indicates whether this object contains a result or not</dd>
 * 
 *   <dt>id</dt>
 *   <dd>Scanner/mutator id for which these results pertain to</dd>
 *   
 *   <dt>is_scan</dt>
 *   <dd>Indicates whether these are scan results or update results</dd>
 *   
 *   <dt>is_error</dt>
 *   <dd>Indicates whether the async request was successful or not</dd>
 *   
 *   <dt>error</dt>
 *   <dd>Error code</dd>
 * 
 *   <dt>error_msg</dt>
 *   <dd>Error message</dd>
 * 
 *   <dt>cells</dt>
 *   <dd>Cells returned by asynchronous scanner</dd>
 * </dl>
 */
class Result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $is_empty = null;
  /**
   * @var int
   */
  public $id = null;
  /**
   * @var bool
   */
  public $is_scan = null;
  /**
   * @var bool
   */
  public $is_error = null;
  /**
   * @var int
   */
  public $error = null;
  /**
   * @var string
   */
  public $error_msg = null;
  /**
   * @var \Hypertable_ThriftGen\Cell[]
   */
  public $cells = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'is_empty',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'is_scan',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'is_error',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'error',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'error_msg',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'cells',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Hypertable_ThriftGen\Cell',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['is_empty'])) {
        $this->is_empty = $vals['is_empty'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['is_scan'])) {
        $this->is_scan = $vals['is_scan'];
      }
      if (isset($vals['is_error'])) {
        $this->is_error = $vals['is_error'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['error_msg'])) {
        $this->error_msg = $vals['error_msg'];
      }
      if (isset($vals['cells'])) {
        $this->cells = $vals['cells'];
      }
    }
  }

  public function getName() {
    return 'Result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_empty);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_scan);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->error_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->cells = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new \Hypertable_ThriftGen\Cell();
              $xfer += $elem33->read($input);
              $this->cells []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Result');
    if ($this->is_empty !== null) {
      $xfer += $output->writeFieldBegin('is_empty', TType::BOOL, 1);
      $xfer += $output->writeBool($this->is_empty);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 2);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_scan !== null) {
      $xfer += $output->writeFieldBegin('is_scan', TType::BOOL, 3);
      $xfer += $output->writeBool($this->is_scan);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_error !== null) {
      $xfer += $output->writeFieldBegin('is_error', TType::BOOL, 4);
      $xfer += $output->writeBool($this->is_error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::I32, 5);
      $xfer += $output->writeI32($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error_msg !== null) {
      $xfer += $output->writeFieldBegin('error_msg', TType::STRING, 6);
      $xfer += $output->writeString($this->error_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cells !== null) {
      if (!is_array($this->cells)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cells', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->cells));
        {
          foreach ($this->cells as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Specifies a result object for asynchronous requests.
 * TODO: add support for update results
 * 
 * <dl>
 *   <dt>is_empty</dt>
 *   <dd>Indicates whether this object contains a result or not</dd>
 * 
 *   <dt>id</dt>
 *   <dd>Scanner/mutator id for which these results pertain to</dd>
 *   
 *   <dt>is_scan</dt>
 *   <dd>Indicates whether these are scan results or update results</dd>
 *   
 *   <dt>is_error</dt>
 *   <dd>Indicates whether the async request was successful or not</dd>
 *   
 *   <dt>error</dt>
 *   <dd>Error code</dd>
 * 
 *   <dt>error_msg</dt>
 *   <dd>Error message</dd>
 * 
 *   <dt>cells</dt>
 *   <dd>Cells returned by asynchronous scanner</dd>
 * </dl>
 */
class ResultAsArrays {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $is_empty = null;
  /**
   * @var int
   */
  public $id = null;
  /**
   * @var bool
   */
  public $is_scan = null;
  /**
   * @var bool
   */
  public $is_error = null;
  /**
   * @var int
   */
  public $error = null;
  /**
   * @var string
   */
  public $error_msg = null;
  /**
   * @var string[][]
   */
  public $cells = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'is_empty',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'is_scan',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'is_error',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'error',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'error_msg',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'cells',
          'type' => TType::LST,
          'etype' => TType::LST,
          'elem' => array(
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['is_empty'])) {
        $this->is_empty = $vals['is_empty'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['is_scan'])) {
        $this->is_scan = $vals['is_scan'];
      }
      if (isset($vals['is_error'])) {
        $this->is_error = $vals['is_error'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['error_msg'])) {
        $this->error_msg = $vals['error_msg'];
      }
      if (isset($vals['cells'])) {
        $this->cells = $vals['cells'];
      }
    }
  }

  public function getName() {
    return 'ResultAsArrays';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_empty);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_scan);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->error_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->cells = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = array();
              $_size41 = 0;
              $_etype44 = 0;
              $xfer += $input->readListBegin($_etype44, $_size41);
              for ($_i45 = 0; $_i45 < $_size41; ++$_i45)
              {
                $elem46 = null;
                $xfer += $input->readString($elem46);
                $elem40 []= $elem46;
              }
              $xfer += $input->readListEnd();
              $this->cells []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ResultAsArrays');
    if ($this->is_empty !== null) {
      $xfer += $output->writeFieldBegin('is_empty', TType::BOOL, 1);
      $xfer += $output->writeBool($this->is_empty);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 2);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_scan !== null) {
      $xfer += $output->writeFieldBegin('is_scan', TType::BOOL, 3);
      $xfer += $output->writeBool($this->is_scan);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_error !== null) {
      $xfer += $output->writeFieldBegin('is_error', TType::BOOL, 4);
      $xfer += $output->writeBool($this->is_error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::I32, 5);
      $xfer += $output->writeI32($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error_msg !== null) {
      $xfer += $output->writeFieldBegin('error_msg', TType::STRING, 6);
      $xfer += $output->writeString($this->error_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cells !== null) {
      if (!is_array($this->cells)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cells', TType::LST, 7);
      {
        $output->writeListBegin(TType::LST, count($this->cells));
        {
          foreach ($this->cells as $iter47)
          {
            {
              $output->writeListBegin(TType::STRING, count($iter47));
              {
                foreach ($iter47 as $iter48)
                {
                  $xfer += $output->writeString($iter48);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Specifies a serialized result object for asynchronous requests.
 * TODO: add support for update results
 * 
 * <dl>
 *   <dt>is_empty</dt>
 *   <dd>Indicates whether this object contains a result or not</dd>
 * 
 *   <dt>id</dt>
 *   <dd>Scanner/mutator id for which these results pertain to</dd>
 *   
 *   <dt>is_scan</dt>
 *   <dd>Indicates whether these are scan results or update results</dd>
 *   
 *   <dt>is_error</dt>
 *   <dd>Indicates whether the async request was successful or not</dd>
 *   
 *   <dt>error</dt>
 *   <dd>Error code</dd>
 * 
 *   <dt>error_msg</dt>
 *   <dd>Error message</dd>
 * 
 *   <dt>cells</dt>
 *   <dd>Cells returned by asynchronous scanner</dd>
 * </dl>
 */
class ResultSerialized {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $is_empty = null;
  /**
   * @var int
   */
  public $id = null;
  /**
   * @var bool
   */
  public $is_scan = null;
  /**
   * @var bool
   */
  public $is_error = null;
  /**
   * @var int
   */
  public $error = null;
  /**
   * @var string
   */
  public $error_msg = null;
  /**
   * @var string
   */
  public $cells = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'is_empty',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'is_scan',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'is_error',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'error',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'error_msg',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'cells',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['is_empty'])) {
        $this->is_empty = $vals['is_empty'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['is_scan'])) {
        $this->is_scan = $vals['is_scan'];
      }
      if (isset($vals['is_error'])) {
        $this->is_error = $vals['is_error'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['error_msg'])) {
        $this->error_msg = $vals['error_msg'];
      }
      if (isset($vals['cells'])) {
        $this->cells = $vals['cells'];
      }
    }
  }

  public function getName() {
    return 'ResultSerialized';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_empty);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_scan);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->error_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cells);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ResultSerialized');
    if ($this->is_empty !== null) {
      $xfer += $output->writeFieldBegin('is_empty', TType::BOOL, 1);
      $xfer += $output->writeBool($this->is_empty);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 2);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_scan !== null) {
      $xfer += $output->writeFieldBegin('is_scan', TType::BOOL, 3);
      $xfer += $output->writeBool($this->is_scan);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_error !== null) {
      $xfer += $output->writeFieldBegin('is_error', TType::BOOL, 4);
      $xfer += $output->writeBool($this->is_error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::I32, 5);
      $xfer += $output->writeI32($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error_msg !== null) {
      $xfer += $output->writeFieldBegin('error_msg', TType::STRING, 6);
      $xfer += $output->writeString($this->error_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cells !== null) {
      $xfer += $output->writeFieldBegin('cells', TType::STRING, 7);
      $xfer += $output->writeString($this->cells);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Defines an individual namespace listing
 * 
 * <dl>
 *   <dt>name</dt>
 *   <dd>Name of the listing.</dd>
 * 
 *   <dt>is_namespace</dt>
 *   <dd>true if this entry is a namespace.</dd>
 * </dl>
 */
class NamespaceListing {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var bool
   */
  public $is_namespace = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'is_namespace',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['is_namespace'])) {
        $this->is_namespace = $vals['is_namespace'];
      }
    }
  }

  public function getName() {
    return 'NamespaceListing';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_namespace);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NamespaceListing');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_namespace !== null) {
      $xfer += $output->writeFieldBegin('is_namespace', TType::BOOL, 2);
      $xfer += $output->writeBool($this->is_namespace);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Defines a table split
 * 
 * <dl>
 *   <dt>start_row</dt>
 *   <dd>Starting row of the split.</dd>
 * 
 *   <dt>end_row</dt>
 *   <dd>Ending row of the split.</dd>
 * 
 *   <dt>location</dt>
 *   <dd>Location (proxy name) of the split.</dd>
 * 
 *   <dt>ip_address</dt>
 *   <dd>The IP address of the split.</dd>
 * 
 *   <dt>hostname</dt>
 *   <dd>The hostname of the split.</dd>
 * </dl>
 */
class TableSplit {
  static $_TSPEC;

  /**
   * @var string
   */
  public $start_row = null;
  /**
   * @var string
   */
  public $end_row = null;
  /**
   * @var string
   */
  public $location = null;
  /**
   * @var string
   */
  public $ip_address = null;
  /**
   * @var string
   */
  public $hostname = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'start_row',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'end_row',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'location',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ip_address',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'hostname',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['start_row'])) {
        $this->start_row = $vals['start_row'];
      }
      if (isset($vals['end_row'])) {
        $this->end_row = $vals['end_row'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['ip_address'])) {
        $this->ip_address = $vals['ip_address'];
      }
      if (isset($vals['hostname'])) {
        $this->hostname = $vals['hostname'];
      }
    }
  }

  public function getName() {
    return 'TableSplit';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start_row);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->end_row);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->location);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip_address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hostname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TableSplit');
    if ($this->start_row !== null) {
      $xfer += $output->writeFieldBegin('start_row', TType::STRING, 1);
      $xfer += $output->writeString($this->start_row);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_row !== null) {
      $xfer += $output->writeFieldBegin('end_row', TType::STRING, 2);
      $xfer += $output->writeString($this->end_row);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      $xfer += $output->writeFieldBegin('location', TType::STRING, 3);
      $xfer += $output->writeString($this->location);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip_address !== null) {
      $xfer += $output->writeFieldBegin('ip_address', TType::STRING, 4);
      $xfer += $output->writeString($this->ip_address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hostname !== null) {
      $xfer += $output->writeFieldBegin('hostname', TType::STRING, 5);
      $xfer += $output->writeString($this->hostname);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ColumnFamilyOptions {
  static $_TSPEC;

  /**
   * @var int
   */
  public $max_versions = null;
  /**
   * @var int
   */
  public $ttl = null;
  /**
   * @var bool
   */
  public $time_order_desc = null;
  /**
   * @var bool
   */
  public $counter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'max_versions',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ttl',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'time_order_desc',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'counter',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['max_versions'])) {
        $this->max_versions = $vals['max_versions'];
      }
      if (isset($vals['ttl'])) {
        $this->ttl = $vals['ttl'];
      }
      if (isset($vals['time_order_desc'])) {
        $this->time_order_desc = $vals['time_order_desc'];
      }
      if (isset($vals['counter'])) {
        $this->counter = $vals['counter'];
      }
    }
  }

  public function getName() {
    return 'ColumnFamilyOptions';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->max_versions);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ttl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->time_order_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->counter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ColumnFamilyOptions');
    if ($this->max_versions !== null) {
      $xfer += $output->writeFieldBegin('max_versions', TType::I32, 1);
      $xfer += $output->writeI32($this->max_versions);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ttl !== null) {
      $xfer += $output->writeFieldBegin('ttl', TType::I32, 2);
      $xfer += $output->writeI32($this->ttl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time_order_desc !== null) {
      $xfer += $output->writeFieldBegin('time_order_desc', TType::BOOL, 3);
      $xfer += $output->writeBool($this->time_order_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->counter !== null) {
      $xfer += $output->writeFieldBegin('counter', TType::BOOL, 4);
      $xfer += $output->writeBool($this->counter);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Describes a ColumnFamily
 * <dl>
 *   <dt>name</dt>
 *   <dd>Name of the column family</dd>
 * 
 *   <dt>ag</dt>
 *   <dd>Name of the access group for this CF</dd>
 * 
 *   <dt>max_versions</dt>
 *   <dd>Max versions of the same cell to be stored</dd>
 * 
 *   <dt>ttl</dt>
 *   <dd>Time to live for cells in the CF (ie delete cells older than this time)</dd>
 * </dl>
 */
class ColumnFamilySpec {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $access_group = null;
  /**
   * @var bool
   */
  public $deleted = null;
  /**
   * @var int
   */
  public $generation = null;
  /**
   * @var int
   */
  public $id = null;
  /**
   * @var bool
   */
  public $value_index = null;
  /**
   * @var bool
   */
  public $qualifier_index = null;
  /**
   * @var \Hypertable_ThriftGen\ColumnFamilyOptions
   */
  public $options = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'access_group',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'deleted',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'generation',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'value_index',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'qualifier_index',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'options',
          'type' => TType::STRUCT,
          'class' => '\Hypertable_ThriftGen\ColumnFamilyOptions',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['access_group'])) {
        $this->access_group = $vals['access_group'];
      }
      if (isset($vals['deleted'])) {
        $this->deleted = $vals['deleted'];
      }
      if (isset($vals['generation'])) {
        $this->generation = $vals['generation'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['value_index'])) {
        $this->value_index = $vals['value_index'];
      }
      if (isset($vals['qualifier_index'])) {
        $this->qualifier_index = $vals['qualifier_index'];
      }
      if (isset($vals['options'])) {
        $this->options = $vals['options'];
      }
    }
  }

  public function getName() {
    return 'ColumnFamilySpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->access_group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->deleted);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->generation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->value_index);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->qualifier_index);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->options = new \Hypertable_ThriftGen\ColumnFamilyOptions();
            $xfer += $this->options->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ColumnFamilySpec');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_group !== null) {
      $xfer += $output->writeFieldBegin('access_group', TType::STRING, 2);
      $xfer += $output->writeString($this->access_group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deleted !== null) {
      $xfer += $output->writeFieldBegin('deleted', TType::BOOL, 3);
      $xfer += $output->writeBool($this->deleted);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->generation !== null) {
      $xfer += $output->writeFieldBegin('generation', TType::I64, 4);
      $xfer += $output->writeI64($this->generation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 5);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value_index !== null) {
      $xfer += $output->writeFieldBegin('value_index', TType::BOOL, 6);
      $xfer += $output->writeBool($this->value_index);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qualifier_index !== null) {
      $xfer += $output->writeFieldBegin('qualifier_index', TType::BOOL, 7);
      $xfer += $output->writeBool($this->qualifier_index);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->options !== null) {
      if (!is_object($this->options)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('options', TType::STRUCT, 8);
      $xfer += $this->options->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AccessGroupOptions {
  static $_TSPEC;

  /**
   * @var int
   */
  public $replication = null;
  /**
   * @var int
   */
  public $blocksize = null;
  /**
   * @var string
   */
  public $compressor = null;
  /**
   * @var string
   */
  public $bloom_filter = null;
  /**
   * @var bool
   */
  public $in_memory = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'replication',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'blocksize',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'compressor',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'bloom_filter',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'in_memory',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['replication'])) {
        $this->replication = $vals['replication'];
      }
      if (isset($vals['blocksize'])) {
        $this->blocksize = $vals['blocksize'];
      }
      if (isset($vals['compressor'])) {
        $this->compressor = $vals['compressor'];
      }
      if (isset($vals['bloom_filter'])) {
        $this->bloom_filter = $vals['bloom_filter'];
      }
      if (isset($vals['in_memory'])) {
        $this->in_memory = $vals['in_memory'];
      }
    }
  }

  public function getName() {
    return 'AccessGroupOptions';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->replication);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->blocksize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->compressor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bloom_filter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->in_memory);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AccessGroupOptions');
    if ($this->replication !== null) {
      $xfer += $output->writeFieldBegin('replication', TType::I16, 1);
      $xfer += $output->writeI16($this->replication);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blocksize !== null) {
      $xfer += $output->writeFieldBegin('blocksize', TType::I32, 2);
      $xfer += $output->writeI32($this->blocksize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compressor !== null) {
      $xfer += $output->writeFieldBegin('compressor', TType::STRING, 3);
      $xfer += $output->writeString($this->compressor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bloom_filter !== null) {
      $xfer += $output->writeFieldBegin('bloom_filter', TType::STRING, 4);
      $xfer += $output->writeString($this->bloom_filter);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->in_memory !== null) {
      $xfer += $output->writeFieldBegin('in_memory', TType::BOOL, 5);
      $xfer += $output->writeBool($this->in_memory);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Describes an AccessGroup
 * <dl>
 *   <dt>name</dt>
 *   <dd>Name of the access group</dd>
 * 
 *   <dt>in_memory</dt>
 *   <dd>Is this access group in memory</dd>
 * 
 *   <dt>replication</dt>
 *   <dd>Replication factor for this AG</dd>
 * 
 *   <dt>blocksize</dt>
 *   <dd>Specifies blocksize for this AG</dd>
 * 
 *   <dt>compressor</dt>
 *   <dd>Specifies compressor for this AG</dd>
 * 
 *   <dt>bloom_filter</dt>
 *   <dd>Specifies bloom filter type</dd>
 * 
 *   <dt>columns</dt>
 *   <dd>Specifies list of column families in this AG</dd>
 * </dl>
 */
class AccessGroupSpec {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $generation = null;
  /**
   * @var \Hypertable_ThriftGen\AccessGroupOptions
   */
  public $options = null;
  /**
   * @var \Hypertable_ThriftGen\ColumnFamilyOptions
   */
  public $defaults = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'generation',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'options',
          'type' => TType::STRUCT,
          'class' => '\Hypertable_ThriftGen\AccessGroupOptions',
          ),
        4 => array(
          'var' => 'defaults',
          'type' => TType::STRUCT,
          'class' => '\Hypertable_ThriftGen\ColumnFamilyOptions',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['generation'])) {
        $this->generation = $vals['generation'];
      }
      if (isset($vals['options'])) {
        $this->options = $vals['options'];
      }
      if (isset($vals['defaults'])) {
        $this->defaults = $vals['defaults'];
      }
    }
  }

  public function getName() {
    return 'AccessGroupSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->generation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->options = new \Hypertable_ThriftGen\AccessGroupOptions();
            $xfer += $this->options->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->defaults = new \Hypertable_ThriftGen\ColumnFamilyOptions();
            $xfer += $this->defaults->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AccessGroupSpec');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->generation !== null) {
      $xfer += $output->writeFieldBegin('generation', TType::I64, 2);
      $xfer += $output->writeI64($this->generation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->options !== null) {
      if (!is_object($this->options)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('options', TType::STRUCT, 3);
      $xfer += $this->options->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->defaults !== null) {
      if (!is_object($this->defaults)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('defaults', TType::STRUCT, 4);
      $xfer += $this->defaults->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Describes a schema.
 * <dl>
 *   <dt>access_groups</dt>
 *   <dd>Map of access groups</dd>
 * 
 *   <dt>column_families</dt>
 *   <dd>Map of column families</dd>
 * </dl>
 */
class Schema {
  static $_TSPEC;

  /**
   * @var array
   */
  public $access_groups = null;
  /**
   * @var array
   */
  public $column_families = null;
  /**
   * @var int
   */
  public $generation = null;
  /**
   * @var int
   */
  public $version = null;
  /**
   * @var int
   */
  public $group_commit_interval = null;
  /**
   * @var \Hypertable_ThriftGen\AccessGroupOptions
   */
  public $access_group_defaults = null;
  /**
   * @var \Hypertable_ThriftGen\ColumnFamilyOptions
   */
  public $column_family_defaults = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'access_groups',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\Hypertable_ThriftGen\AccessGroupSpec',
            ),
          ),
        2 => array(
          'var' => 'column_families',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\Hypertable_ThriftGen\ColumnFamilySpec',
            ),
          ),
        3 => array(
          'var' => 'generation',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'group_commit_interval',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'access_group_defaults',
          'type' => TType::STRUCT,
          'class' => '\Hypertable_ThriftGen\AccessGroupOptions',
          ),
        7 => array(
          'var' => 'column_family_defaults',
          'type' => TType::STRUCT,
          'class' => '\Hypertable_ThriftGen\ColumnFamilyOptions',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['access_groups'])) {
        $this->access_groups = $vals['access_groups'];
      }
      if (isset($vals['column_families'])) {
        $this->column_families = $vals['column_families'];
      }
      if (isset($vals['generation'])) {
        $this->generation = $vals['generation'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['group_commit_interval'])) {
        $this->group_commit_interval = $vals['group_commit_interval'];
      }
      if (isset($vals['access_group_defaults'])) {
        $this->access_group_defaults = $vals['access_group_defaults'];
      }
      if (isset($vals['column_family_defaults'])) {
        $this->column_family_defaults = $vals['column_family_defaults'];
      }
    }
  }

  public function getName() {
    return 'Schema';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->access_groups = array();
            $_size49 = 0;
            $_ktype50 = 0;
            $_vtype51 = 0;
            $xfer += $input->readMapBegin($_ktype50, $_vtype51, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $key54 = '';
              $val55 = new \Hypertable_ThriftGen\AccessGroupSpec();
              $xfer += $input->readString($key54);
              $val55 = new \Hypertable_ThriftGen\AccessGroupSpec();
              $xfer += $val55->read($input);
              $this->access_groups[$key54] = $val55;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->column_families = array();
            $_size56 = 0;
            $_ktype57 = 0;
            $_vtype58 = 0;
            $xfer += $input->readMapBegin($_ktype57, $_vtype58, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $key61 = '';
              $val62 = new \Hypertable_ThriftGen\ColumnFamilySpec();
              $xfer += $input->readString($key61);
              $val62 = new \Hypertable_ThriftGen\ColumnFamilySpec();
              $xfer += $val62->read($input);
              $this->column_families[$key61] = $val62;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->generation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->group_commit_interval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->access_group_defaults = new \Hypertable_ThriftGen\AccessGroupOptions();
            $xfer += $this->access_group_defaults->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->column_family_defaults = new \Hypertable_ThriftGen\ColumnFamilyOptions();
            $xfer += $this->column_family_defaults->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Schema');
    if ($this->access_groups !== null) {
      if (!is_array($this->access_groups)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('access_groups', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->access_groups));
        {
          foreach ($this->access_groups as $kiter63 => $viter64)
          {
            $xfer += $output->writeString($kiter63);
            $xfer += $viter64->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->column_families !== null) {
      if (!is_array($this->column_families)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('column_families', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->column_families));
        {
          foreach ($this->column_families as $kiter65 => $viter66)
          {
            $xfer += $output->writeString($kiter65);
            $xfer += $viter66->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->generation !== null) {
      $xfer += $output->writeFieldBegin('generation', TType::I64, 3);
      $xfer += $output->writeI64($this->generation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 4);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group_commit_interval !== null) {
      $xfer += $output->writeFieldBegin('group_commit_interval', TType::I32, 5);
      $xfer += $output->writeI32($this->group_commit_interval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_group_defaults !== null) {
      if (!is_object($this->access_group_defaults)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('access_group_defaults', TType::STRUCT, 6);
      $xfer += $this->access_group_defaults->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->column_family_defaults !== null) {
      if (!is_object($this->column_family_defaults)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('column_family_defaults', TType::STRUCT, 7);
      $xfer += $this->column_family_defaults->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Status information.
 * 
 * <dl>
 *   <dt>code</dt>
 *   <dd>Status code</dd>
 * 
 *   <dt>text</dt>
 *   <dd>Status text</dd>
 * </dl>
 */
class Status {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = 0;
  /**
   * @var string
   */
  public $text = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
    }
  }

  public function getName() {
    return 'Status';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Status');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 2);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Exception for thrift clients.
 * 
 * <dl>
 *   <dt>code</dt><dd>Internal use (defined in src/cc/Common/Error.h)</dd>
 *   <dt>message</dt><dd>A message about the exception</dd>
 * </dl>
 * 
 * Note: some languages (like php) don't have adequate namespace, so Exception
 * would conflict with language builtins.
 */
class ClientException extends TException {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'ClientException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ClientException');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


