#!/usr/bin/env bash
#
# Copyright (C) 2007-2016 Hypertable, Inc.
#
# This file is part of Hypertable.
#
# Hypertable is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or any later version.
#
# Hypertable is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Hypertable. If not, see <http://www.gnu.org/licenses/>
#
export HYPERTABLE_HOME=$(cd `dirname "$0"`/.. && pwd)
. $HYPERTABLE_HOME/bin/ht-env.sh

print_help() {
  echo
  echo "usage: ht [OPTIONS] <command> [<command-arguments>]"
  echo
  echo "OPTIONS:"
  echo "  -h,--help  Display usage information"
  echo
  echo "This is a wrapper script that is used to run Hypertable programs.  Most of the"
  echo "Hypertable programs link against dynamic librarires.  All of these dependent"
  echo "libraries are included in the lib/ directory of the Hypertable installation."
  echo "In order for the dynamic linker to find these libraries, this lib/ directory"
  echo "must be added to the environment variable LD_LIBRARY_PATH (or DYLD_LIBRARY_PATH"
  echo "on OSX) prior to running any Hypertable program, which is exactly what this"
  echo "script does."
  echo
  echo "Hypertable command line programs follow the naming convention of starting with"
  echo "\"ht_\" and having name components separated by the underscore character ('_')."
  echo "To run a command line program, strip off the \"ht_\" and supply the rest of the"
  echo "name as the <command> argument to ht, for example:"
  echo
  echo "  ht cluster        Runs ht_cluster"
  echo "  ht hyperspace     Runs ht_hyperspace"
  echo "  ht metalog_dump   Runs ht_metalog_dump"
  echo
  echo "For consistency, the ht wrapper script can also be used to run any of the"
  echo "Hypertable scripts.  Hypertable scripts follow the naming convention of starting"
  echo "with \"ht-\", ending with \".sh\", and having name components separated by the"
  echo "hyphen character ('-').  To run a script, strip off the leading \"ht-\" and"
  echo "trailing \".sh\" and pass what's left as the <command> argument to ht, for"
  echo "example:"
  echo
  echo "  ht start-all-servers   Runs ht-start-all-servers.sh"
  echo "  ht check               Runs ht-check.sh"
  echo "  ht destroy-database    Runs ht-destroy-database.sh"
  echo
  echo "The ht wrapper script also accepts a few additional special commands which are"
  echo "described below."
  echo
  echo "  ht shell     Runs the hypertable shell (ht_hypertable)"
  echo "  ht help      Displays usage information"
  echo "  ht version   Displays Hypertable version information"
  echo
  echo "The \"ht version\" command prints Hypertable version information in a multi-line"
  echo "output format.  The first line lists the Hypertable version and subsequent lines"
  echo "print version information for some of the Hypertable dependencies, for example:"
  echo
  echo "@VERSION@"
  echo "  Hadoop: @HDFS_VERSION@"
  echo "  BerkeleyDB: @BDB_VERSION@"
  echo "  Boost: @BOOST_VERSION@"
  echo "  Thrift: @THRIFT_VERSION@"
  echo "  Tcmalloc: TC_VERSION@"
  echo "  Javac: @JAVAC_VERSION@"
  echo "  GCC/G++: @GCC_VERSION@"
  echo
}

do_start() {
  service=$1; shift
  exec $HYPERTABLE_HOME/bin/ht-start-$service.sh "$@"
}

do_stop() {
  service=$1; shift
  if [ -x $HYPERTABLE_HOME/bin/ht-stop-$service.sh ]; then
    exec $HYPERTABLE_HOME/bin/ht-stop-$service.sh "$@"
  fi
  pidfile=`server_pidfile $service`
  stop_server $service &&
  sleep 1 &&
  wait_for_server_shutdown $service `basename $pidfile .pid` "$@"
}

do_restart() {
  service=$1
  if [ -x $HYPERTABLE_HOME/bin/ht-restart-$service.sh ]; then
    shift;
    exec $HYPERTABLE_HOME/bin/ht-restart-$service.sh "$@"
  fi
  do_stop "$@"
  do_start "$@"
}

do_cmd() {
  cmd=$1; shift
  [ "$cmd" ] || { print_help; exit; }
  if [ -x $HYPERTABLE_HOME/bin/ht_$cmd ]; then
    exec $HYPERTABLE_HOME/bin/ht_$cmd "$@"
  elif [ -x $HYPERTABLE_HOME/bin/ht-$cmd.sh ]; then
    exec $HYPERTABLE_HOME/bin/ht-$cmd.sh "$@"
  elif [ -x $HYPERTABLE_HOME/bin/ht$cmd ]; then
    exec $HYPERTABLE_HOME/bin/ht$cmd "$@"
  elif [ -x $HYPERTABLE_HOME/bin/$cmd ]; then
    exec $HYPERTABLE_HOME/bin/$cmd "$@"
  elif [ -x $HYPERTABLE_HOME/bin/$cmd.sh ]; then
    exec $HYPERTABLE_HOME/bin/$cmd.sh "$@"
  fi
  exec $cmd "$@";
}

print_hadoop_version() {
  which hadoop > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    HADOOP_VERSION=`hadoop version | head -n 1 | sed 's/Hadoop /Hadoop: /g'`
  else
    local HADOOP_CORE=`ls $HYPERTABLE_HOME/lib/java/hadoop*core*.jar`
    if [ -z "$HADOOP_CORE" ]; then
      HADOOP_VERSION="Hadoop: Unknown"
    else
      HADOOP_VERSION=`basename $HADOOP_CORE | sed 's/hadoop-[a-z-]*\(.*\)\.jar/\1/'`
      HADOOP_VERSION="Hadoop: $HADOOP_VERSION"
    fi
  fi
  echo "  $HADOOP_VERSION"
}

print_version() {
  $HYPERTABLE_HOME/bin/ht_hypertable --version
  print_hadoop_version
  if [ -x $HYPERTABLE_HOME/bin/htFsBrokerCeph ]; then
    echo " " `$HYPERTABLE_HOME/bin/htFsBrokerCeph --ceph-version`
  fi
  echo "  BerkeleyDB:" @BDB_VERSION@
  echo "  Boost:" @BOOST_VERSION@
  echo "@THRIFT_VERSION@" | sed 's/Thrift version/  Thrift:/g'
  [ "@TCMALLOC_LIBRARIES@" ] && echo "  Tcmalloc: @TC_VERSION@"
  [ "@JAVAC_VERSION@" ] && echo "  Javac: @JAVAC_VERSION@"
  [ "@GCC_VERSION@" ] && echo "  GCC/G++: @GCC_VERSION@"
}

cmd=$1
shift

case $cmd in
  start)        do_start "$@";;
  stop)         do_stop "$@";;
  restart)      do_restart "$@";;
  shell)        exec $HYPERTABLE_HOME/bin/ht_hypertable "$@";;
  version|-v|--version) print_version;;
  help|-h|--help) print_help;;
  /*)           exec $cmd "$@";;
  *)            do_cmd "$cmd" "$@";;
esac
